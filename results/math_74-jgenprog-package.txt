2019-04-13 09:10:50,394 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  package  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/math_74/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-13 09:11:01,616 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_74//bin//default from 230 classes with test cases
2019-04-13 09:11:01,616 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-13 09:11:09,055 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-math_74//bin//default]
2019-04-13 09:12:43,992 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial
2019-04-13 09:12:43,997 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:2131, fails: 1, GZoltar suspicious 17279
2019-04-13 09:12:44,178 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 84 with susp > 0.5, we consider: 84
2019-04-13 09:12:44,285 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_74//src//default, compliance level: 8
2019-04-13 09:13:51,278 INFO main - 
---- Initial suspicious size: 84
2019-04-13 09:13:51,875 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=299, susp=0.5773502691896258]
2019-04-13 09:13:52,231 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{start(IIIIII)V 0.0, lineNumber=401, susp=0.5]
2019-04-13 09:13:52,489 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{visit(IID)V 0.0, lineNumber=411, susp=0.5]
2019-04-13 09:13:55,498 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=307, susp=0.5]
2019-04-13 09:13:55,536 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=314, susp=0.5]
2019-04-13 09:13:55,790 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=327, susp=0.5]
2019-04-13 09:13:56,059 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=354, susp=0.5]
2019-04-13 09:13:56,060 INFO main - Total suspicious from FL: 84,  77
2019-04-13 09:13:56,081 INFO main - Total ModPoint created: 77
2019-04-13 09:13:56,082 INFO main - Creating program variant #1, [Variant id: 1, #gens: 77, #ops: 0, parent:-]
2019-04-13 09:13:56,324 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=299, susp=0.5773502691896258]
2019-04-13 09:13:56,523 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{start(IIIIII)V 0.0, lineNumber=401, susp=0.5]
2019-04-13 09:13:56,702 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{visit(IID)V 0.0, lineNumber=411, susp=0.5]
2019-04-13 09:13:58,888 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=307, susp=0.5]
2019-04-13 09:13:58,946 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=314, susp=0.5]
2019-04-13 09:13:59,106 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=327, susp=0.5]
2019-04-13 09:13:59,291 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=354, susp=0.5]
2019-04-13 09:13:59,292 INFO main - Total suspicious from FL: 84,  77
2019-04-13 09:13:59,292 INFO main - Total ModPoint created: 77
2019-04-13 09:13:59,302 INFO main - Creating program variant #2, [Variant id: 2, #gens: 77, #ops: 0, parent:-]
2019-04-13 09:13:59,521 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=299, susp=0.5773502691896258]
2019-04-13 09:13:59,697 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{start(IIIIII)V 0.0, lineNumber=401, susp=0.5]
2019-04-13 09:13:59,861 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{visit(IID)V 0.0, lineNumber=411, susp=0.5]
2019-04-13 09:14:01,948 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=307, susp=0.5]
2019-04-13 09:14:01,949 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=314, susp=0.5]
2019-04-13 09:14:02,124 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=327, susp=0.5]
2019-04-13 09:14:02,377 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=354, susp=0.5]
2019-04-13 09:14:02,417 INFO main - Total suspicious from FL: 84,  77
2019-04-13 09:14:02,418 INFO main - Total ModPoint created: 77
2019-04-13 09:14:02,418 INFO main - Creating program variant #3, [Variant id: 3, #gens: 77, #ops: 0, parent:-]
2019-04-13 09:15:23,143 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-13 09:15:23,144 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-13 09:15:23,144 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-13 09:15:23,144 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-13 09:15:23,145 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-13 09:15:23,146 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-13 09:15:23,149 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-13 09:15:23,149 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-13 09:15:23,149 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-13 09:15:23,149 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-13 09:15:23,149 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-13 09:15:23,153 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-13 09:15:23,153 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-13 09:15:23,153 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-13 09:15:23,153 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-13 09:15:23,153 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/math_74/
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-13 09:15:23,159 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= package
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-13 09:15:23,160 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-13 09:15:23,161 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-13 09:15:23,161 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-13 09:15:23,161 INFO main - 
----Starting Solution Search
2019-04-13 09:17:33,146 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:19:52,706 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:22:35,861 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:24:39,075 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:27:52,178 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:30:35,578 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:32:36,106 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:35:04,490 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:35:45,185 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 09:35:45,238 ERROR main - Undo Error: original: 
public abstract class AdaptiveStepsizeIntegrator extends org.apache.commons.math.ode.AbstractIntegrator {
	protected final double scalAbsoluteTolerance;

	protected final double scalRelativeTolerance;

	protected final double[] vecAbsoluteTolerance;

	protected final double[] vecRelativeTolerance;

	private double initialStep;

	private final double minStep;

	private final double maxStep;

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
		super(name);
		this.minStep = java.lang.Math.abs(minStep);
		this.maxStep = java.lang.Math.abs(maxStep);
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = scalAbsoluteTolerance;
		this.scalRelativeTolerance = scalRelativeTolerance;
		this.vecAbsoluteTolerance = null;
		this.vecRelativeTolerance = null;
		resetInternalState();
	}

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
		super(name);
		this.minStep = minStep;
		this.maxStep = maxStep;
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = 0;
		this.scalRelativeTolerance = 0;
		this.vecAbsoluteTolerance = vecAbsoluteTolerance.clone();
		this.vecRelativeTolerance = vecRelativeTolerance.clone();
		resetInternalState();
	}

	public void setInitialStepSize(final double initialStepSize) {
		if ((initialStepSize < (minStep)) || (initialStepSize > (maxStep))) {
			initialStep = -1.0;
		}else {
			initialStep = initialStepSize;
		}
	}

	@java.lang.Override
	protected void sanityChecks(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.IntegratorException {
		super.sanityChecks(equations, t0, y0, t, y);
		if (((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " absolute tolerance vector has dimension {1}"), y0.length, vecAbsoluteTolerance.length);
		}
		if (((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " relative tolerance vector has dimension {1}"), y0.length, vecRelativeTolerance.length);
		}
	}

	public double initializeStep(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final boolean forward, final int order, final double[] scale, final double t0, final double[] y0, final double[] yDot0, final double[] y1, final double[] yDot1) throws org.apache.commons.math.ode.DerivativeException {
		if ((initialStep) > 0) {
			return forward ? initialStep : -(initialStep);
		}
		double ratio;
		double yOnScale2 = 0;
		double yDotOnScale2 = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = (y0[j]) / (scale[j]);
			yOnScale2 += ratio * ratio;
			ratio = (yDot0[j]) / (scale[j]);
			yDotOnScale2 += ratio * ratio;
		}
		double h = ((yOnScale2 < 1.0E-10) || (yDotOnScale2 < 1.0E-10)) ? 1.0E-6 : 0.01 * (java.lang.Math.sqrt((yOnScale2 / yDotOnScale2)));
		if (!forward) {
			h = -h;
		}
		for (int j = 0; j < (y0.length); ++j) {
			y1[j] = (y0[j]) + (h * (yDot0[j]));
		}
		computeDerivatives((t0 + h), y1, yDot1);
		double yDDotOnScale = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = ((yDot1[j]) - (yDot0[j])) / (scale[j]);
			yDDotOnScale += ratio * ratio;
		}
		yDDotOnScale = (java.lang.Math.sqrt(yDDotOnScale)) / h;
		final double maxInv2 = java.lang.Math.max(java.lang.Math.sqrt(yDotOnScale2), yDDotOnScale);
		final double h1 = (maxInv2 < 1.0E-15) ? java.lang.Math.max(1.0E-6, (0.001 * (java.lang.Math.abs(h)))) : java.lang.Math.pow((0.01 / maxInv2), (1.0 / order));
		h = java.lang.Math.min((100.0 * (java.lang.Math.abs(h))), h1);
		h = java.lang.Math.max(h, (1.0E-12 * (java.lang.Math.abs(t0))));
		if (h < (getMinStep())) {
			h = getMinStep();
		}
		if (h > (getMaxStep())) {
			h = getMaxStep();
		}
		if (!forward) {
			h = -h;
		}
		return h;
	}

	protected double filterStep(final double h, final boolean forward, final boolean acceptSmall) throws org.apache.commons.math.ode.IntegratorException {
		double filteredH = h;
		if ((java.lang.Math.abs(h)) < (minStep)) {
			if (acceptSmall) {
				filteredH = (forward) ? minStep : -(minStep);
			}else {
				throw new org.apache.commons.math.ode.IntegratorException("minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}", minStep, java.lang.Math.abs(h));
			}
		}
		if (filteredH > (maxStep)) {
			filteredH = maxStep;
		}else
			if (filteredH < (-(maxStep))) {
				filteredH = -(maxStep);
			}
		
		return filteredH;
	}

	public abstract double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t, double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException;

	@java.lang.Override
	public double getCurrentStepStart() {
		return stepStart;
	}

	protected void resetInternalState() {
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Math.sqrt(((minStep) * (maxStep)));
	}

	public double getMinStep() {
		return minStep;
	}

	public double getMaxStep() {
		return maxStep;
	}
}
2019-04-13 09:35:45,239 ERROR main - Undo Error: modified: 
public abstract class AdaptiveStepsizeIntegrator extends org.apache.commons.math.ode.AbstractIntegrator {
	protected final double scalAbsoluteTolerance;

	protected final double scalRelativeTolerance;

	protected final double[] vecAbsoluteTolerance;

	protected final double[] vecRelativeTolerance;

	private double initialStep;

	private final double minStep;

	private final double maxStep;

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
		super(name);
		this.minStep = java.lang.Math.abs(minStep);
		this.maxStep = java.lang.Math.abs(maxStep);
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = scalAbsoluteTolerance;
		this.scalRelativeTolerance = scalRelativeTolerance;
		this.vecAbsoluteTolerance = null;
		this.vecRelativeTolerance = null;
		resetInternalState();
	}

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
		super(name);
		this.minStep = minStep;
		this.maxStep = maxStep;
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = 0;
		this.scalRelativeTolerance = 0;
		this.vecAbsoluteTolerance = vecAbsoluteTolerance.clone();
		this.vecRelativeTolerance = vecRelativeTolerance.clone();
		resetInternalState();
	}

	public void setInitialStepSize(final double initialStepSize) {
		if ((initialStepSize < (minStep)) || (initialStepSize > (maxStep))) {
			initialStep = -1.0;
		}else {
			initialStep = initialStepSize;
		}
	}

	@java.lang.Override
	protected void sanityChecks(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.IntegratorException {
		super.sanityChecks(equations, t0, y0, t, y);
		if (((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " absolute tolerance vector has dimension {1}"), y0.length, vecAbsoluteTolerance.length);
		}
		if (((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " relative tolerance vector has dimension {1}"), y0.length, vecRelativeTolerance.length);
		}
	}

	public double initializeStep(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final boolean forward, final int order, final double[] scale, final double t0, final double[] y0, final double[] yDot0, final double[] y1, final double[] yDot1) throws org.apache.commons.math.ode.DerivativeException {
		if ((initialStep) > 0) {
			return forward ? initialStep : -(initialStep);
		}
		double ratio;
		double yOnScale2 = 0;
		double yDotOnScale2 = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = (y0[j]) / (scale[j]);
			yOnScale2 += ratio * ratio;
			ratio = (yDot0[j]) / (scale[j]);
			yDotOnScale2 += ratio * ratio;
		}
		double h = ((yOnScale2 < 1.0E-10) || (yDotOnScale2 < 1.0E-10)) ? 1.0E-6 : 0.01 * (java.lang.Math.sqrt((yOnScale2 / yDotOnScale2)));
		if (!forward) {
			h = -h;
		}
		for (int j = 0; j < (y0.length); ++j) {
			y1[j] = (y0[j]) + (h * (yDot0[j]));
		}
		computeDerivatives((t0 + h), y1, yDot1);
		double yDDotOnScale = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = ((yDot1[j]) - (yDot0[j])) / (scale[j]);
			yDDotOnScale += ratio * ratio;
		}
		yDDotOnScale = (java.lang.Math.sqrt(yDDotOnScale)) / h;
		final double maxInv2 = java.lang.Math.max(java.lang.Math.sqrt(yDotOnScale2), yDDotOnScale);
		final double h1 = (maxInv2 < 1.0E-15) ? java.lang.Math.max(1.0E-6, (0.001 * (java.lang.Math.abs(h)))) : java.lang.Math.pow((0.01 / maxInv2), (1.0 / order));
		h = java.lang.Math.min((100.0 * (java.lang.Math.abs(h))), h1);
		h = java.lang.Math.max(h, (1.0E-12 * (java.lang.Math.abs(t0))));
		if (h < (getMinStep())) {
			h = getMinStep();
		}
		if (h > (getMaxStep())) {
			h = getMaxStep();
		}
		if (!forward) {
			h = -h;
		}
		return h;
	}

	protected double filterStep(final double h, final boolean forward, final boolean acceptSmall) throws org.apache.commons.math.ode.IntegratorException {
		double filteredH = h;
		if ((java.lang.Math.abs(h)) < (minStep)) {
			if (acceptSmall) {
				filteredH = (forward) ? minStep : -(minStep);
			}else {
				throw new org.apache.commons.math.ode.IntegratorException("minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}", minStep, java.lang.Math.abs(h));
			}
		}
		if (filteredH > (maxStep))
			filteredH = maxStep;
		else
			if (filteredH < (-(maxStep))) {
				filteredH = -(maxStep);
			}
		
		return filteredH;
	}

	public abstract double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t, double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException;

	@java.lang.Override
	public double getCurrentStepStart() {
		return stepStart;
	}

	protected void resetInternalState() {
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Math.sqrt(((minStep) * (maxStep)));
	}

	public double getMinStep() {
		return minStep;
	}

	public double getMaxStep() {
		return maxStep;
	}
}
2019-04-13 09:37:45,978 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:39:50,906 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:41:55,099 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:44:10,806 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:46:11,346 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:49:08,298 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:51:34,909 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:53:54,042 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:56:02,363 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 09:58:03,519 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:00:42,277 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:02:44,382 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:05:07,346 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:07:56,526 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:07:56,530 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 10:07:56,531 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 10:07:56,534 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j)
					predictedScaled[j] = (stepSize) * (yDot[j]);
				
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 10:10:20,990 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:12:41,570 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:13:08,555 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 10:13:08,555 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j)
					predictedScaled[j] = (stepSize) * (yDot[j]);
				
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 10:13:08,558 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j)
					predictedScaled[j] = (stepSize) * (yDot[j]);
				
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j)
						correctedScaled[j] = (stepSize) * (yDot[j]);
					
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 10:15:38,535 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:18:16,564 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:20:24,586 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:22:25,113 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:25:44,518 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:25:58,721 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 10:25:58,722 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 10:25:58,724 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else
				after[column] += value;
			
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 10:28:00,451 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:30:01,022 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 10:31:34,252 INFO main - -Found Solution, child variant #230
2019-04-13 10:31:35,938 INFO main - Time Repair Loop (s): 4572.777
2019-04-13 10:31:35,938 INFO main - 
----SUMMARY_EXECUTION---
2019-04-13 10:31:35,938 INFO main - 
Solution details
2019-04-13 10:31:35,942 INFO main - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 230
 
time(sec)= 4572
operation: InsertBeforeOp
location= org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator
line= 263
lineSuspiciousness= 0.5
original statement= for (int j = 0; j < (y0.length); ++j)
	predictedScaled[j] = (stepSize) * (yDot[j]);

fixed statement= setMaxGrowth(10.0)
generation= 57
ingredientScope= PACKAGE
validation=|true|0|2131|[]|
2019-04-13 10:31:35,942 INFO main - 
successful_ing_attempts (1): [5]
2019-04-13 10:31:35,942 INFO main - 
failing_ing_attempts (170): [1, 3, 25, 13, 4, 0, 1, 4, 2, 2, 12, 14, 9, 4, 0, 1, 0, 1, 5, 15, 6, 8, 9, 1, 5, 1, 5, 4, 0, 5, 0, 0, 2, 0, 15, 2, 4, 1, 5, 0, 7, 3, 13, 9, 0, 19, 6, 19, 5, 5, 5, 0, 0, 4, 21, 67, 48, 2, 2, 5, 1, 1, 5, 4, 0, 4, 13, 4, 0, 5, 9, 9, 3, 3, 13, 1, 4, 15, 0, 0, 8, 8, 1, 0, 6, 4, 4, 11, 3, 0, 3, 2, 0, 2, 0, 6, 66, 5, 2, 7, 15, 11, 1, 1, 0, 4, 1, 1, 3, 4, 0, 1, 3, 8, 1, 2, 0, 0, 3, 21, 13, 0, 3, 7, 0, 14, 15, 5, 7, 24, 1, 5, 2, 4, 11, 4, 12, 0, 3, 0, 13, 1, 7, 0, 0, 0, 5, 2, 0, 23, 2, 0, 6, 2, 12, 3, 3, 0, 1, 1, 8, 0, 15, 0, 5, 2, 32, 4, 0, 6]
2019-04-13 10:31:35,942 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 4845.475
[DONE]
