2019-04-13 15:10:59,359 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  global  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/math_75/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-13 15:11:21,954 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_75//bin//default from 230 classes with test cases
2019-04-13 15:11:21,954 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-13 15:11:38,297 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./outputMutation/AstorMain-math_75//bin//default, /home/jan_gerling/astor/./examples/libs/junit-4.4.jar]
2019-04-13 15:15:45,742 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.stat.FrequencyTest#testPcts
2019-04-13 15:15:45,812 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:2135, fails: 1, GZoltar suspicious 17326
2019-04-13 15:15:46,086 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 7 with susp > 0.5, we consider: 7
2019-04-13 15:15:46,272 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_75//src//default, compliance level: 8
2019-04-13 15:18:10,120 INFO main - 
---- Initial suspicious size: 7
2019-04-13 15:18:11,503 INFO main - Total suspicious from FL: 7,  7
2019-04-13 15:18:11,503 INFO main - Total ModPoint created: 7
2019-04-13 15:18:11,547 INFO main - Creating program variant #1, [Variant id: 1, #gens: 7, #ops: 0, parent:-]
2019-04-13 15:18:11,960 INFO main - Total suspicious from FL: 7,  7
2019-04-13 15:18:11,960 INFO main - Total ModPoint created: 7
2019-04-13 15:18:11,960 INFO main - Creating program variant #2, [Variant id: 2, #gens: 7, #ops: 0, parent:-]
2019-04-13 15:18:12,499 INFO main - Total suspicious from FL: 7,  7
2019-04-13 15:18:12,499 INFO main - Total ModPoint created: 7
2019-04-13 15:18:12,499 INFO main - Creating program variant #3, [Variant id: 3, #gens: 7, #ops: 0, parent:-]
2019-04-13 15:58:57,687 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-13 15:58:57,687 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-13 15:58:57,687 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-13 15:58:57,688 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-13 15:58:57,689 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-13 15:58:57,689 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-13 15:58:57,689 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-13 15:58:57,689 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-13 15:58:57,690 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-13 15:58:57,690 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-13 15:58:57,690 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-13 15:58:57,690 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-13 15:58:57,690 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-13 15:58:57,693 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-13 15:58:57,693 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/math_75/
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-13 15:58:57,694 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= global
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-13 15:58:57,700 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-13 15:58:57,701 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-13 15:58:57,701 INFO main - 
----Starting Solution Search
2019-04-13 15:59:33,468 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 15:59:33,468 ERROR main - Undo Error: original: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer) {
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		}
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0) {
			return getSumFreq();
		}
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 15:59:33,578 ERROR main - Undo Error: modified: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer)
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0) {
			return getSumFreq();
		}
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 15:59:46,060 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 15:59:46,061 ERROR main - Undo Error: original: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer) {
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		}
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0) {
			return getSumFreq();
		}
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 15:59:46,120 ERROR main - Undo Error: modified: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer) {
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		}
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0)
			return getSumFreq();
		
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 16:00:25,554 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 16:00:25,555 ERROR main - Undo Error: original: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer)
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0) {
			return getSumFreq();
		}
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 16:00:25,562 ERROR main - Undo Error: modified: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer)
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0)
			return getSumFreq();
		
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 16:00:30,216 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 16:00:30,277 ERROR main - Undo Error: original: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer) {
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		}
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0)
			return getSumFreq();
		
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 16:00:30,281 ERROR main - Undo Error: modified: 
public class Frequency implements java.io.Serializable {
	private static final long serialVersionUID = -3845586908418844111L;

	private final java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long> freqTable;

	public Frequency() {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>();
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public Frequency(java.util.Comparator<?> comparator) {
		freqTable = new java.util.TreeMap<java.lang.Comparable<?>, java.lang.Long>(((java.util.Comparator<? super java.lang.Comparable<?>>) (comparator)));
	}

	@java.lang.Override
	public java.lang.String toString() {
		java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();
		java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();
		outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");
		java.util.Iterator<java.lang.Comparable<?>> iter = freqTable.keySet().iterator();
		while (iter.hasNext()) {
			java.lang.Comparable<?> value = iter.next();
			outBuffer.append(value);
			outBuffer.append('\t');
			outBuffer.append(getCount(value));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getPct(value)));
			outBuffer.append('\t');
			outBuffer.append(nf.format(getCumPct(value)));
			outBuffer.append('\n');
		} 
		return outBuffer.toString();
	}

	@java.lang.Deprecated
	public void addValue(java.lang.Object v) {
		if (v instanceof java.lang.Comparable<?>) {
			addValue(((java.lang.Comparable<?>) (v)));
		}else {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("class ({0}) does not implement Comparable", v.getClass().getName());
		}
	}

	public void addValue(java.lang.Comparable<?> v) {
		java.lang.Comparable<?> obj = v;
		if (v instanceof java.lang.Integer) {
			obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());
		}
		try {
			java.lang.Long count = freqTable.get(obj);
			if (count == null) {
				freqTable.put(obj, java.lang.Long.valueOf(1));
			}else {
				freqTable.put(obj, java.lang.Long.valueOf(((count.longValue()) + 1)));
			}
		} catch (java.lang.ClassCastException ex) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values", v.getClass().getName());
		}
	}

	public void addValue(int v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(java.lang.Integer v) {
		addValue(java.lang.Long.valueOf(v.longValue()));
	}

	public void addValue(long v) {
		addValue(java.lang.Long.valueOf(v));
	}

	public void addValue(char v) {
		addValue(java.lang.Character.valueOf(v));
	}

	public void clear() {
		freqTable.clear();
	}

	public java.util.Iterator<java.lang.Comparable<?>> valuesIterator() {
		return freqTable.keySet().iterator();
	}

	public long getSumFreq() {
		long result = 0;
		java.util.Iterator<java.lang.Long> iterator = freqTable.values().iterator();
		while (iterator.hasNext()) {
			result += iterator.next().longValue();
		} 
		return result;
	}

	@java.lang.Deprecated
	public long getCount(java.lang.Object v) {
		return getCount(((java.lang.Comparable<?>) (v)));
	}

	public long getCount(java.lang.Comparable<?> v) {
		if (v instanceof java.lang.Integer) {
			return getCount(((java.lang.Integer) (v)).longValue());
		}
		long result = 0;
		try {
			java.lang.Long count = freqTable.get(v);
			if (count != null) {
				result = count.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
		}
		return result;
	}

	public long getCount(int v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(long v) {
		return getCount(java.lang.Long.valueOf(v));
	}

	public long getCount(char v) {
		return getCount(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCount(v))) / ((double) (sumFreq));
	}

	public double getPct(int v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(long v) {
		return getPct(java.lang.Long.valueOf(v));
	}

	public double getPct(char v) {
		return getPct(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public long getCumFreq(java.lang.Object v) {
		return getCumFreq(((java.lang.Comparable<?>) (v)));
	}

	@java.lang.SuppressWarnings(value = "unchecked")
	public long getCumFreq(java.lang.Comparable<?> v) {
		if ((getSumFreq()) == 0) {
			return 0;
		}
		if (v instanceof java.lang.Integer)
			return getCumFreq(((java.lang.Integer) (v)).longValue());
		
		java.util.Comparator<java.lang.Comparable<?>> c = ((java.util.Comparator<java.lang.Comparable<?>>) (freqTable.comparator()));
		if (c == null) {
			c = new org.apache.commons.math.stat.Frequency.NaturalComparator();
		}
		long result = 0;
		try {
			java.lang.Long value = freqTable.get(v);
			if (value != null) {
				result = value.longValue();
			}
		} catch (java.lang.ClassCastException ex) {
			return result;
		}
		if ((c.compare(v, freqTable.firstKey())) < 0) {
			return 0;
		}
		if ((c.compare(v, freqTable.lastKey())) >= 0)
			return getSumFreq();
		
		java.util.Iterator<java.lang.Comparable<?>> values = valuesIterator();
		while (values.hasNext()) {
			java.lang.Comparable<?> nextValue = values.next();
			if ((c.compare(v, nextValue)) > 0) {
				result += getCount(nextValue);
			}else {
				return result;
			}
		} 
		return result;
	}

	public long getCumFreq(int v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(long v) {
		return getCumFreq(java.lang.Long.valueOf(v));
	}

	public long getCumFreq(char v) {
		return getCumFreq(java.lang.Character.valueOf(v));
	}

	@java.lang.Deprecated
	public double getCumPct(java.lang.Object v) {
		return getCumPct(((java.lang.Comparable<?>) (v)));
	}

	public double getCumPct(java.lang.Comparable<?> v) {
		final long sumFreq = getSumFreq();
		if (sumFreq == 0) {
			return java.lang.Double.NaN;
		}
		return ((double) (getCumFreq(v))) / ((double) (sumFreq));
	}

	public double getCumPct(int v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(long v) {
		return getCumPct(java.lang.Long.valueOf(v));
	}

	public double getCumPct(char v) {
		return getCumPct(java.lang.Character.valueOf(v));
	}

	private static class NaturalComparator<T extends java.lang.Comparable<T>> implements java.io.Serializable , java.util.Comparator<java.lang.Comparable<T>> {
		private static final long serialVersionUID = -3852193713161395148L;

		@java.lang.SuppressWarnings(value = "unchecked")
		public int compare(java.lang.Comparable<T> o1, java.lang.Comparable<T> o2) {
			return o1.compareTo(((T) (o2)));
		}
	}

	@java.lang.Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = (prime * result) + ((freqTable) == null ? 0 : freqTable.hashCode());
		return result;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object obj) {
		if ((this) == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (!(obj instanceof org.apache.commons.math.stat.Frequency))
			return false;
		
		org.apache.commons.math.stat.Frequency other = ((org.apache.commons.math.stat.Frequency) (obj));
		if ((freqTable) == null) {
			if ((other.freqTable) != null)
				return false;
			
		}else
			if (!(freqTable.equals(other.freqTable)))
				return false;
			
		
		return true;
	}
}
2019-04-13 16:38:04,608 INFO main - Time Repair Loop (s): 2346.907
2019-04-13 16:38:04,618 INFO main - 
----SUMMARY_EXECUTION---
2019-04-13 16:38:04,618 INFO main - 
successful_ing_attempts (0): []
2019-04-13 16:38:04,619 INFO main - 
failing_ing_attempts (600): [16, 8, 5, 0, 1, 0, 8, 8, 2, 5, 22, 0, 2, 1, 11, 5, 12, 0, 7, 0, 9, 12, 2, 0, 6, 3, 4, 14, 0, 8, 10, 16, 0, 7, 0, 7, 0, 8, 2, 0, 6, 0, 7, 19, 0, 1, 7, 4, 0, 0, 1, 44, 8, 7, 6, 0, 0, 6, 31, 6, 19, 3, 0, 4, 6, 17, 1, 5, 1, 0, 0, 0, 1, 8, 1, 4, 16, 4, 0, 7, 0, 0, 11, 0, 15, 6, 1, 11, 6, 32, 0, 7, 0, 0, 3, 0, 5, 1, 1, 29, 1, 16, 0, 20, 11, 16, 3, 5, 2, 45, 5, 25, 0, 15, 4, 3, 7, 2, 1, 0, 6, 2, 0, 8, 8, 17, 0, 10, 0, 39, 5, 1, 3, 0, 3, 6, 2, 5, 42, 6, 22, 39, 3, 2, 0, 0, 8, 31, 11, 1, 0, 5, 0, 6, 2, 4, 2, 12, 25, 0, 0, 3, 3, 17, 10, 7, 4, 3, 3, 9, 3, 19, 5, 0, 10, 3, 8, 7, 5, 0, 19, 15, 0, 5, 4, 5, 5, 8, 0, 12, 3, 4, 8, 19, 0, 0, 18, 7, 0, 10, 8, 0, 0, 0, 0, 6, 0, 1, 6, 46, 13, 22, 0, 7, 13, 6, 0, 16, 6, 1, 12, 5, 8, 2, 8, 1, 0, 1, 4, 8, 29, 0, 11, 0, 3, 0, 4, 19, 13, 1, 18, 5, 0, 0, 11, 29, 8, 6, 0, 2, 2, 6, 8, 0, 1, 0, 25, 26, 0, 0, 1, 4, 3, 21, 1, 2, 4, 0, 4, 4, 4, 0, 2, 0, 8, 1, 3, 7, 2, 13, 8, 1, 3, 16, 35, 0, 16, 0, 5, 0, 3, 8, 0, 3, 11, 0, 10, 1, 0, 0, 13, 12, 14, 5, 1, 4, 10, 0, 7, 4, 5, 0, 6, 1, 10, 0, 3, 5, 0, 3, 0, 0, 3, 1, 3, 12, 6, 0, 0, 20, 29, 6, 1, 0, 9, 8, 4, 10, 0, 0, 1, 0, 7, 30, 9, 1, 4, 3, 0, 0, 1, 0, 0, 1, 18, 9, 1, 12, 3, 9, 0, 6, 4, 0, 6, 4, 12, 6, 0, 36, 7, 1, 7, 6, 0, 4, 29, 23, 6, 0, 1, 2, 0, 0, 3, 11, 0, 47, 36, 8, 13, 2, 6, 0, 7, 0, 14, 7, 2, 3, 2, 5, 38, 6, 0, 0, 4, 1, 21, 17, 0, 1, 9, 0, 11, 3, 8, 24, 24, 7, 2, 13, 3, 26, 0, 4, 0, 17, 13, 0, 12, 0, 0, 21, 0, 1, 3, 0, 0, 50, 0, 0, 0, 4, 6, 28, 11, 6, 0, 0, 5, 18, 5, 1, 8, 6, 13, 22, 18, 2, 10, 3, 6, 10, 7, 10, 2, 5, 0, 2, 7, 0, 0, 2, 8, 13, 1, 6, 0, 0, 0, 3, 10, 8, 13, 2, 13, 0, 0, 9, 1, 1, 2, 5, 13, 0, 0, 0, 0, 10, 0, 0, 13, 1, 4, 2, 0, 11, 4, 10, 1, 0, 0, 30, 0, 11, 12, 0, 1, 0, 37, 0, 1, 5, 0, 0, 1, 31, 0, 0, 0, 4, 0, 0, 2, 0, 3, 10, 1, 0, 16, 9, 0, 9, 9, 7, 12, 11, 11, 0, 7, 0, 10, 0, 5, 7, 2, 0, 16, 0, 14, 10, 2, 10, 5, 0, 6, 14, 2, 1, 11, 13, 25, 6, 3, 7, 28, 0, 17, 0, 6, 4, 19, 9, 0, 1, 4, 12, 6, 5, 13, 6, 12, 0, 46, 0, 0, 0, 5, 33]
2019-04-13 16:38:04,619 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 5225.074
[DONE]
