2019-04-12 10:00:14,145 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  package  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/math_85/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-12 10:00:16,409 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_85//bin//default from 214 classes with test cases
2019-04-12 10:00:16,413 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-12 10:00:18,149 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-math_85//bin//default]
2019-04-12 10:00:39,719 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.distribution.NormalDistributionTest#testMath280
2019-04-12 10:00:39,725 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:1983, fails: 1, GZoltar suspicious 16490
2019-04-12 10:00:39,742 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 24 with susp > 0.5, we consider: 24
2019-04-12 10:00:39,756 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_85//src//default, compliance level: 8
2019-04-12 10:00:54,737 INFO main - 
---- Initial suspicious size: 24
2019-04-12 10:00:54,821 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=203, susp=1.0]
2019-04-12 10:00:54,824 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=204, susp=1.0]
2019-04-12 10:00:54,851 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.distribution.NormalDistributionImpl, methodName=org.apache.commons.math.distribution.NormalDistributionImpl{cumulativeProbability(D)D 0.0, lineNumber=128, susp=0.7071067811865475]
2019-04-12 10:00:54,963 INFO main - Total suspicious from FL: 24,  21
2019-04-12 10:00:54,963 INFO main - Total ModPoint created: 21
2019-04-12 10:00:54,963 INFO main - Creating program variant #1, [Variant id: 1, #gens: 21, #ops: 0, parent:-]
2019-04-12 10:00:54,982 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=203, susp=1.0]
2019-04-12 10:00:54,996 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=204, susp=1.0]
2019-04-12 10:00:55,017 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.distribution.NormalDistributionImpl, methodName=org.apache.commons.math.distribution.NormalDistributionImpl{cumulativeProbability(D)D 0.0, lineNumber=128, susp=0.7071067811865475]
2019-04-12 10:00:55,087 INFO main - Total suspicious from FL: 24,  21
2019-04-12 10:00:55,087 INFO main - Total ModPoint created: 21
2019-04-12 10:00:55,087 INFO main - Creating program variant #2, [Variant id: 2, #gens: 21, #ops: 0, parent:-]
2019-04-12 10:00:55,110 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=203, susp=1.0]
2019-04-12 10:00:55,116 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=204, susp=1.0]
2019-04-12 10:00:55,133 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.distribution.NormalDistributionImpl, methodName=org.apache.commons.math.distribution.NormalDistributionImpl{cumulativeProbability(D)D 0.0, lineNumber=128, susp=0.7071067811865475]
2019-04-12 10:00:55,193 INFO main - Total suspicious from FL: 24,  21
2019-04-12 10:00:55,193 INFO main - Total ModPoint created: 21
2019-04-12 10:00:55,193 INFO main - Creating program variant #3, [Variant id: 3, #gens: 21, #ops: 0, parent:-]
2019-04-12 10:01:11,101 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 10:01:11,103 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-12 10:01:11,104 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/math_85/
2019-04-12 10:01:11,105 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-12 10:01:11,106 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= package
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-12 10:01:11,107 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-12 10:01:11,108 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-12 10:01:11,108 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-12 10:01:11,108 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-12 10:01:11,108 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-12 10:01:11,108 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 10:01:11,108 INFO main - 
----Starting Solution Search
2019-04-12 10:01:12,929 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:01:12,929 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else {
			ret = getMean();
		}
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:01:12,930 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else {
			ret = getMean();
		}
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5)
				ret = (getMean()) + (getStandardDeviation());
			else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:01:28,066 INFO main - -Found Solution, child variant #10
2019-04-12 10:01:28,272 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:01:28,273 ERROR main - Undo Error: original: 
public class UnivariateRealSolverUtils {
	private UnivariateRealSolverUtils() {
		super();
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver();
		solver.setAbsoluteAccuracy(absoluteAccuracy);
		return solver.solve(f, x0, x1);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		if (function == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
		if (maximumIterations <= 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
		}
		if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
		}
		double a = initial;
		double b = initial;
		double fa;
		double fb;
		int numIterations = 0;
		do {
			a = java.lang.Math.max((a - 1.0), lowerBound);
			b = java.lang.Math.min((b + 1.0), upperBound);
			fa = function.value(a);
			fb = function.value(b);
			numIterations++;
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound)) );
		if ((fa * fb) >= 0.0) {
			throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
		}
		return new double[]{ a , b };
	}

	public static double midpoint(double a, double b) {
		return (a + b) * 0.5;
	}

	private static void setup(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
	}

	private static class LazyHolder {
		private static final org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory FACTORY = org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance();
	}
}
2019-04-12 10:01:28,275 ERROR main - Undo Error: modified: 
public class UnivariateRealSolverUtils {
	private UnivariateRealSolverUtils() {
		super();
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver();
		solver.setAbsoluteAccuracy(absoluteAccuracy);
		return solver.solve(f, x0, x1);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		if (function == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
		if (maximumIterations <= 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
		}
		if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
		}
		double a = initial;
		double b = initial;
		double fa;
		double fb;
		int numIterations = 0;
		do {
			a = java.lang.Math.max((a - 1.0), lowerBound);
			b = java.lang.Math.min((b + 1.0), upperBound);
			fa = function.value(a);
			fb = function.value(b);
			numIterations++;
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound)) );
		if ((fa * fb) >= 0.0)
			throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
		
		return new double[]{ a , b };
	}

	public static double midpoint(double a, double b) {
		return (a + b) * 0.5;
	}

	private static void setup(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
	}

	private static class LazyHolder {
		private static final org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory FACTORY = org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance();
	}
}
2019-04-12 10:01:28,275 INFO main - Time Repair Loop (s): 17.167
2019-04-12 10:01:28,276 INFO main - 
----SUMMARY_EXECUTION---
2019-04-12 10:01:28,276 INFO main - 
Solution details
2019-04-12 10:01:28,276 INFO main - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 10
 
time(sec)= 17
operation: RemoveOp
location= org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
line= 199
lineSuspiciousness= 1
original statement= throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb)
fixed statement= 
generation= 2
ingredientScope= -
validation=|true|0|1983|[]|
2019-04-12 10:01:28,276 INFO main - 
successful_ing_attempts (1): [0]
2019-04-12 10:01:28,276 INFO main - 
failing_ing_attempts (5): [5, 1, 7, 1, 2]
2019-04-12 10:01:28,276 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 74.099
[DONE]
