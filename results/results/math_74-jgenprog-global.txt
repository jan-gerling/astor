2019-04-13 10:31:40,078 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  global  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/math_74/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-13 10:31:56,974 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_74//bin//default from 230 classes with test cases
2019-04-13 10:31:56,975 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-13 10:32:09,363 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-math_74//bin//default]
2019-04-13 10:34:37,619 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial
2019-04-13 10:34:37,656 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:2131, fails: 1, GZoltar suspicious 17279
2019-04-13 10:34:37,895 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 84 with susp > 0.5, we consider: 84
2019-04-13 10:34:38,076 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_74//src//default, compliance level: 8
2019-04-13 10:36:19,956 INFO main - 
---- Initial suspicious size: 84
2019-04-13 10:36:21,062 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=299, susp=0.5773502691896258]
2019-04-13 10:36:21,511 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{start(IIIIII)V 0.0, lineNumber=401, susp=0.5]
2019-04-13 10:36:21,900 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{visit(IID)V 0.0, lineNumber=411, susp=0.5]
2019-04-13 10:36:26,064 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=307, susp=0.5]
2019-04-13 10:36:26,071 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=314, susp=0.5]
2019-04-13 10:36:26,352 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=327, susp=0.5]
2019-04-13 10:36:26,835 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=354, susp=0.5]
2019-04-13 10:36:26,836 INFO main - Total suspicious from FL: 84,  77
2019-04-13 10:36:26,836 INFO main - Total ModPoint created: 77
2019-04-13 10:36:26,836 INFO main - Creating program variant #1, [Variant id: 1, #gens: 77, #ops: 0, parent:-]
2019-04-13 10:36:27,183 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=299, susp=0.5773502691896258]
2019-04-13 10:36:27,539 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{start(IIIIII)V 0.0, lineNumber=401, susp=0.5]
2019-04-13 10:36:27,901 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{visit(IID)V 0.0, lineNumber=411, susp=0.5]
2019-04-13 10:36:31,711 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=307, susp=0.5]
2019-04-13 10:36:31,713 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=314, susp=0.5]
2019-04-13 10:36:32,030 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=327, susp=0.5]
2019-04-13 10:36:32,324 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=354, susp=0.5]
2019-04-13 10:36:32,324 INFO main - Total suspicious from FL: 84,  77
2019-04-13 10:36:32,324 INFO main - Total ModPoint created: 77
2019-04-13 10:36:32,406 INFO main - Creating program variant #2, [Variant id: 2, #gens: 77, #ops: 0, parent:-]
2019-04-13 10:36:32,728 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=299, susp=0.5773502691896258]
2019-04-13 10:36:32,991 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{start(IIIIII)V 0.0, lineNumber=401, susp=0.5]
2019-04-13 10:36:33,348 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector{visit(IID)V 0.0, lineNumber=411, susp=0.5]
2019-04-13 10:36:36,953 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=307, susp=0.5]
2019-04-13 10:36:36,955 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=314, susp=0.5]
2019-04-13 10:36:37,228 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=327, susp=0.5]
2019-04-13 10:36:37,627 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, methodName=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator{integrate(Lorg/apache/commons/math/ode/FirstOrderDifferentialEquations;D[DD[D)D 0.0, lineNumber=354, susp=0.5]
2019-04-13 10:36:37,630 INFO main - Total suspicious from FL: 84,  77
2019-04-13 10:36:37,637 INFO main - Total ModPoint created: 77
2019-04-13 10:36:37,638 INFO main - Creating program variant #3, [Variant id: 3, #gens: 77, #ops: 0, parent:-]
2019-04-13 11:09:43,502 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-13 11:09:43,502 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-13 11:09:43,503 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-13 11:09:43,503 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-13 11:09:43,503 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-13 11:09:43,504 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-13 11:09:43,505 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-13 11:09:43,506 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-13 11:09:43,511 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-13 11:09:43,511 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/math_74/
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-13 11:09:43,512 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= global
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-13 11:09:43,513 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-13 11:09:43,513 INFO main - 
----Starting Solution Search
2019-04-13 11:12:08,428 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:14:16,618 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:14:16,624 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 11:14:16,624 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0) {
				after[column] -= value;
			}else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:14:16,627 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:16:18,139 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:19:04,470 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:21:15,811 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:23:16,928 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:23:38,245 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 11:23:38,245 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else {
				after[column] += value;
			}
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:23:38,248 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else
				after[column] += value;
			
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:26:07,575 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:28:15,887 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:30:34,232 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:32:35,135 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:35:49,639 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:37:58,271 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:38:43,922 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 11:38:43,922 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j) {
					predictedScaled[j] = (stepSize) * (yDot[j]);
				}
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else
				after[column] += value;
			
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:38:43,925 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j)
					predictedScaled[j] = (stepSize) * (yDot[j]);
				
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else
				after[column] += value;
			
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:42:22,747 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:44:46,142 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:46:46,919 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:48:47,707 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:51:37,320 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:51:38,234 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 11:51:38,235 ERROR main - Undo Error: original: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j)
					predictedScaled[j] = (stepSize) * (yDot[j]);
				
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j) {
						correctedScaled[j] = (stepSize) * (yDot[j]);
					}
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else
				after[column] += value;
			
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:51:38,302 ERROR main - Undo Error: modified: 
public class AdamsMoultonIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator {
	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
	}

	public AdamsMoultonIntegrator(final int nSteps, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) throws java.lang.IllegalArgumentException {
		super("Adams-Moulton", nSteps, (nSteps + 1), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
	}

	@java.lang.Override
	public double integrate(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException {
		final int n = y0.length;
		sanityChecks(equations, t0, y0, t, y);
		setEquations(equations);
		resetEvaluations();
		final boolean forward = t > t0;
		if (y != y0) {
			java.lang.System.arraycopy(y0, 0, y, 0, n);
		}
		final double[] yDot = new double[y0.length];
		final double[] yTmp = new double[y0.length];
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolator = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolator.reinitialize(y, forward);
		final org.apache.commons.math.ode.sampling.NordsieckStepInterpolator interpolatorTmp = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator();
		interpolatorTmp.reinitialize(yTmp, forward);
		for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
			handler.reset();
		}
		org.apache.commons.math.ode.events.CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
		start(t0, y, t);
		interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
		interpolator.storeTime(stepStart);
		double hNew = stepSize;
		interpolator.rescale(hNew);
		boolean lastStep = false;
		while (!lastStep) {
			interpolator.shift();
			double error = 0;
			for (boolean loop = true; loop;) {
				stepSize = hNew;
				final double stepEnd = (stepStart) + (stepSize);
				interpolator.setInterpolatedTime(stepEnd);
				java.lang.System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
				computeDerivatives(stepEnd, yTmp, yDot);
				final double[] predictedScaled = new double[y0.length];
				for (int j = 0; j < (y0.length); ++j)
					predictedScaled[j] = (stepSize) * (yDot[j]);
				
				final org.apache.commons.math.linear.Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
				updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
				error = nordsieckTmp.walkInOptimizedOrder(new org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator.Corrector(y, predictedScaled, yTmp));
				if (error <= 1.0) {
					computeDerivatives(stepEnd, yTmp, yDot);
					final double[] correctedScaled = new double[y0.length];
					for (int j = 0; j < (y0.length); ++j)
						correctedScaled[j] = (stepSize) * (yDot[j]);
					
					updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
					interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
					interpolatorTmp.storeTime(stepStart);
					interpolatorTmp.shift();
					interpolatorTmp.storeTime(stepEnd);
					if (manager.evaluateStep(interpolatorTmp)) {
						final double dt = (manager.getEventTime()) - (stepStart);
						if ((java.lang.Math.abs(dt)) <= (java.lang.Math.ulp(stepStart))) {
							loop = false;
						}else {
							hNew = dt;
							interpolator.rescale(hNew);
						}
					}else {
						scaled = correctedScaled;
						nordsieck = nordsieckTmp;
						interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
						loop = false;
					}
				}else {
					final double factor = computeStepGrowShrinkFactor(error);
					hNew = filterStep(((stepSize) * factor), forward, false);
					interpolator.rescale(hNew);
				}
			}
			final double nextStep = (stepStart) + (stepSize);
			java.lang.System.arraycopy(yTmp, 0, y, 0, n);
			interpolator.storeTime(nextStep);
			manager.stepAccepted(nextStep, y);
			lastStep = manager.stop();
			for (org.apache.commons.math.ode.sampling.StepHandler handler : stepHandlers) {
				interpolator.setInterpolatedTime(nextStep);
				handler.handleStep(interpolator, lastStep);
			}
			stepStart = nextStep;
			if ((!lastStep) && (manager.reset(stepStart, y))) {
				start(stepStart, y, t);
				interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
			}
			if (!lastStep) {
				stepSize = filterStep(stepSize, forward, true);
				final double factor = computeStepGrowShrinkFactor(error);
				final double scaledH = (stepSize) * factor;
				final double nextT = (stepStart) + scaledH;
				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t;
				hNew = filterStep(scaledH, forward, nextIsLast);
				interpolator.rescale(hNew);
			}
		} 
		final double stopTime = stepStart;
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Double.NaN;
		return stopTime;
	}

	private class Corrector implements org.apache.commons.math.linear.RealMatrixPreservingVisitor {
		private final double[] previous;

		private final double[] scaled;

		private final double[] before;

		private final double[] after;

		public Corrector(final double[] previous, final double[] scaled, final double[] state) {
			this.previous = previous;
			this.scaled = scaled;
			this.after = state;
			this.before = state.clone();
		}

		public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {
			java.util.Arrays.fill(after, 0.0);
		}

		public void visit(int row, int column, double value) throws org.apache.commons.math.linear.MatrixVisitorException {
			if ((row & 1) == 0)
				after[column] -= value;
			else
				after[column] += value;
			
		}

		public double end() {
			double error = 0;
			for (int i = 0; i < (after.length); ++i) {
				after[i] += (previous[i]) + (scaled[i]);
				final double yScale = java.lang.Math.max(java.lang.Math.abs(previous[i]), java.lang.Math.abs(after[i]));
				final double tol = ((vecAbsoluteTolerance) == null) ? (scalAbsoluteTolerance) + ((scalRelativeTolerance) * yScale) : (vecAbsoluteTolerance[i]) + ((vecRelativeTolerance[i]) * yScale);
				final double ratio = ((after[i]) - (before[i])) / tol;
				error += ratio * ratio;
			}
			return java.lang.Math.sqrt((error / (after.length)));
		}
	}
}
2019-04-13 11:53:40,046 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:55:42,579 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 11:58:01,111 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:01:14,236 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:04:14,075 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:08:45,282 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:11:19,543 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:26:41,050 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:34:17,182 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:36:39,672 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:39:09,287 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:42:19,182 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:45:50,883 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:48:08,834 ERROR main - Error: the model was not the same from the original after this generation
2019-04-13 12:48:08,835 ERROR main - Undo Error: original: 
public abstract class AdaptiveStepsizeIntegrator extends org.apache.commons.math.ode.AbstractIntegrator {
	protected final double scalAbsoluteTolerance;

	protected final double scalRelativeTolerance;

	protected final double[] vecAbsoluteTolerance;

	protected final double[] vecRelativeTolerance;

	private double initialStep;

	private final double minStep;

	private final double maxStep;

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
		super(name);
		this.minStep = java.lang.Math.abs(minStep);
		this.maxStep = java.lang.Math.abs(maxStep);
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = scalAbsoluteTolerance;
		this.scalRelativeTolerance = scalRelativeTolerance;
		this.vecAbsoluteTolerance = null;
		this.vecRelativeTolerance = null;
		resetInternalState();
	}

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
		super(name);
		this.minStep = minStep;
		this.maxStep = maxStep;
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = 0;
		this.scalRelativeTolerance = 0;
		this.vecAbsoluteTolerance = vecAbsoluteTolerance.clone();
		this.vecRelativeTolerance = vecRelativeTolerance.clone();
		resetInternalState();
	}

	public void setInitialStepSize(final double initialStepSize) {
		if ((initialStepSize < (minStep)) || (initialStepSize > (maxStep))) {
			initialStep = -1.0;
		}else {
			initialStep = initialStepSize;
		}
	}

	@java.lang.Override
	protected void sanityChecks(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.IntegratorException {
		super.sanityChecks(equations, t0, y0, t, y);
		if (((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " absolute tolerance vector has dimension {1}"), y0.length, vecAbsoluteTolerance.length);
		}
		if (((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " relative tolerance vector has dimension {1}"), y0.length, vecRelativeTolerance.length);
		}
	}

	public double initializeStep(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final boolean forward, final int order, final double[] scale, final double t0, final double[] y0, final double[] yDot0, final double[] y1, final double[] yDot1) throws org.apache.commons.math.ode.DerivativeException {
		if ((initialStep) > 0) {
			return forward ? initialStep : -(initialStep);
		}
		double ratio;
		double yOnScale2 = 0;
		double yDotOnScale2 = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = (y0[j]) / (scale[j]);
			yOnScale2 += ratio * ratio;
			ratio = (yDot0[j]) / (scale[j]);
			yDotOnScale2 += ratio * ratio;
		}
		double h = ((yOnScale2 < 1.0E-10) || (yDotOnScale2 < 1.0E-10)) ? 1.0E-6 : 0.01 * (java.lang.Math.sqrt((yOnScale2 / yDotOnScale2)));
		if (!forward) {
			h = -h;
		}
		for (int j = 0; j < (y0.length); ++j) {
			y1[j] = (y0[j]) + (h * (yDot0[j]));
		}
		computeDerivatives((t0 + h), y1, yDot1);
		double yDDotOnScale = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = ((yDot1[j]) - (yDot0[j])) / (scale[j]);
			yDDotOnScale += ratio * ratio;
		}
		yDDotOnScale = (java.lang.Math.sqrt(yDDotOnScale)) / h;
		final double maxInv2 = java.lang.Math.max(java.lang.Math.sqrt(yDotOnScale2), yDDotOnScale);
		final double h1 = (maxInv2 < 1.0E-15) ? java.lang.Math.max(1.0E-6, (0.001 * (java.lang.Math.abs(h)))) : java.lang.Math.pow((0.01 / maxInv2), (1.0 / order));
		h = java.lang.Math.min((100.0 * (java.lang.Math.abs(h))), h1);
		h = java.lang.Math.max(h, (1.0E-12 * (java.lang.Math.abs(t0))));
		if (h < (getMinStep())) {
			h = getMinStep();
		}
		if (h > (getMaxStep())) {
			h = getMaxStep();
		}
		if (!forward) {
			h = -h;
		}
		return h;
	}

	protected double filterStep(final double h, final boolean forward, final boolean acceptSmall) throws org.apache.commons.math.ode.IntegratorException {
		double filteredH = h;
		if ((java.lang.Math.abs(h)) < (minStep)) {
			if (acceptSmall) {
				filteredH = (forward) ? minStep : -(minStep);
			}else {
				throw new org.apache.commons.math.ode.IntegratorException("minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}", minStep, java.lang.Math.abs(h));
			}
		}
		if (filteredH > (maxStep)) {
			filteredH = maxStep;
		}else
			if (filteredH < (-(maxStep))) {
				filteredH = -(maxStep);
			}
		
		return filteredH;
	}

	public abstract double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t, double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException;

	@java.lang.Override
	public double getCurrentStepStart() {
		return stepStart;
	}

	protected void resetInternalState() {
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Math.sqrt(((minStep) * (maxStep)));
	}

	public double getMinStep() {
		return minStep;
	}

	public double getMaxStep() {
		return maxStep;
	}
}
2019-04-13 12:48:08,836 ERROR main - Undo Error: modified: 
public abstract class AdaptiveStepsizeIntegrator extends org.apache.commons.math.ode.AbstractIntegrator {
	protected final double scalAbsoluteTolerance;

	protected final double scalRelativeTolerance;

	protected final double[] vecAbsoluteTolerance;

	protected final double[] vecRelativeTolerance;

	private double initialStep;

	private final double minStep;

	private final double maxStep;

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
		super(name);
		this.minStep = java.lang.Math.abs(minStep);
		this.maxStep = java.lang.Math.abs(maxStep);
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = scalAbsoluteTolerance;
		this.scalRelativeTolerance = scalRelativeTolerance;
		this.vecAbsoluteTolerance = null;
		this.vecRelativeTolerance = null;
		resetInternalState();
	}

	public AdaptiveStepsizeIntegrator(final java.lang.String name, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
		super(name);
		this.minStep = minStep;
		this.maxStep = maxStep;
		this.initialStep = -1.0;
		this.scalAbsoluteTolerance = 0;
		this.scalRelativeTolerance = 0;
		this.vecAbsoluteTolerance = vecAbsoluteTolerance.clone();
		this.vecRelativeTolerance = vecRelativeTolerance.clone();
		resetInternalState();
	}

	public void setInitialStepSize(final double initialStepSize) {
		if ((initialStepSize < (minStep)) || (initialStepSize > (maxStep))) {
			initialStep = -1.0;
		}else {
			initialStep = initialStepSize;
		}
	}

	@java.lang.Override
	protected void sanityChecks(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws org.apache.commons.math.ode.IntegratorException {
		super.sanityChecks(equations, t0, y0, t, y);
		if (((vecAbsoluteTolerance) != null) && ((vecAbsoluteTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " absolute tolerance vector has dimension {1}"), y0.length, vecAbsoluteTolerance.length);
		}
		if (((vecRelativeTolerance) != null) && ((vecRelativeTolerance.length) != (y0.length))) {
			throw new org.apache.commons.math.ode.IntegratorException(("dimensions mismatch: state vector has dimension {0}," + " relative tolerance vector has dimension {1}"), y0.length, vecRelativeTolerance.length);
		}
	}

	public double initializeStep(final org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, final boolean forward, final int order, final double[] scale, final double t0, final double[] y0, final double[] yDot0, final double[] y1, final double[] yDot1) throws org.apache.commons.math.ode.DerivativeException {
		if ((initialStep) > 0) {
			return forward ? initialStep : -(initialStep);
		}
		double ratio;
		double yOnScale2 = 0;
		double yDotOnScale2 = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = (y0[j]) / (scale[j]);
			yOnScale2 += ratio * ratio;
			ratio = (yDot0[j]) / (scale[j]);
			yDotOnScale2 += ratio * ratio;
		}
		double h = ((yOnScale2 < 1.0E-10) || (yDotOnScale2 < 1.0E-10)) ? 1.0E-6 : 0.01 * (java.lang.Math.sqrt((yOnScale2 / yDotOnScale2)));
		if (!forward) {
			h = -h;
		}
		for (int j = 0; j < (y0.length); ++j) {
			y1[j] = (y0[j]) + (h * (yDot0[j]));
		}
		computeDerivatives((t0 + h), y1, yDot1);
		double yDDotOnScale = 0;
		for (int j = 0; j < (y0.length); ++j) {
			ratio = ((yDot1[j]) - (yDot0[j])) / (scale[j]);
			yDDotOnScale += ratio * ratio;
		}
		yDDotOnScale = (java.lang.Math.sqrt(yDDotOnScale)) / h;
		final double maxInv2 = java.lang.Math.max(java.lang.Math.sqrt(yDotOnScale2), yDDotOnScale);
		final double h1 = (maxInv2 < 1.0E-15) ? java.lang.Math.max(1.0E-6, (0.001 * (java.lang.Math.abs(h)))) : java.lang.Math.pow((0.01 / maxInv2), (1.0 / order));
		h = java.lang.Math.min((100.0 * (java.lang.Math.abs(h))), h1);
		h = java.lang.Math.max(h, (1.0E-12 * (java.lang.Math.abs(t0))));
		if (h < (getMinStep())) {
			h = getMinStep();
		}
		if (h > (getMaxStep())) {
			h = getMaxStep();
		}
		if (!forward) {
			h = -h;
		}
		return h;
	}

	protected double filterStep(final double h, final boolean forward, final boolean acceptSmall) throws org.apache.commons.math.ode.IntegratorException {
		double filteredH = h;
		if ((java.lang.Math.abs(h)) < (minStep)) {
			if (acceptSmall) {
				filteredH = (forward) ? minStep : -(minStep);
			}else {
				throw new org.apache.commons.math.ode.IntegratorException("minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}", minStep, java.lang.Math.abs(h));
			}
		}
		if (filteredH > (maxStep))
			filteredH = maxStep;
		else
			if (filteredH < (-(maxStep))) {
				filteredH = -(maxStep);
			}
		
		return filteredH;
	}

	public abstract double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations equations, double t0, double[] y0, double t, double[] y) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException;

	@java.lang.Override
	public double getCurrentStepStart() {
		return stepStart;
	}

	protected void resetInternalState() {
		stepStart = java.lang.Double.NaN;
		stepSize = java.lang.Math.sqrt(((minStep) * (maxStep)));
	}

	public double getMinStep() {
		return minStep;
	}

	public double getMaxStep() {
		return maxStep;
	}
}
2019-04-13 12:50:11,703 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-13 12:56:50,248 INFO main - 
 No more time for operating
2019-04-13 12:56:50,252 INFO main - Time Repair Loop (s): 6426.739
2019-04-13 12:56:50,253 INFO main - 
----SUMMARY_EXECUTION---
2019-04-13 12:56:50,305 INFO main - 
successful_ing_attempts (0): []
2019-04-13 12:56:50,305 INFO main - 
failing_ing_attempts (201): [4, 5, 0, 11, 0, 0, 9, 0, 1, 5, 106, 1, 0, 3, 18, 0, 7, 0, 22, 2, 12, 22, 0, 0, 10, 25, 0, 3, 21, 0, 0, 13, 27, 5, 80, 7, 5, 5, 13, 6, 11, 2, 1, 8, 3, 19, 17, 6, 18, 6, 3, 0, 2, 7, 7, 1, 3, 6, 10, 20, 0, 8, 1, 2, 4, 7, 7, 0, 0, 0, 4, 2, 0, 4, 76, 3, 1, 0, 5, 2, 0, 5, 0, 58, 0, 0, 4, 0, 2, 2, 12, 2, 2, 8, 2, 5, 14, 9, 1, 7, 2, 0, 3, 1, 12, 0, 0, 3, 5, 12, 3, 7, 5, 0, 6, 2, 6, 0, 2, 11, 0, 18, 17, 2, 10, 5, 13, 1, 6, 0, 196, 7, 63, 8, 12, 2, 1, 5, 5, 2, 3, 6, 4, 1, 18, 2, 31, 0, 4, 0, 3, 0, 7, 2, 61, 0, 0, 2, 14, 13, 0, 38, 3, 5, 19, 0, 3, 0, 10, 5, 4, 23, 2, 10, 2, 1, 96, 7, 0, 0, 25, 17, 73, 12, 0, 1, 0, 0, 10, 6, 32, 1, 6, 11, 0, 1, 0, 3, 0, 8, 4]
2019-04-13 12:56:50,305 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 8710.069
[DONE]
