2019-04-14 13:47:08,907 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin  -javacompliancelevel  8  -mode  jgenprog  -scope  package  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/lang_27/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-14 13:47:09,463 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-lang_27//bin//default from 83 classes with test cases
2019-04-14 13:47:09,463 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-14 13:47:10,120 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-lang_27//bin//default]
2019-04-14 13:47:14,691 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.math.NumberUtilsTest#testCreateNumber
2019-04-14 13:47:14,694 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitialize
2019-04-14 13:47:14,695 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUnchecked
2019-04-14 13:47:14,695 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.ConcurrentUtilsTest#testInitializeUncheckedEx
2019-04-14 13:47:14,695 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireMultipleThreads
2019-04-14 13:47:14,695 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testGetAverageCallsPerPeriod
2019-04-14 13:47:14,695 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testInit
2019-04-14 13:47:14,696 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownSharedExecutorTask
2019-04-14 13:47:14,696 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownMultipleTimes
2019-04-14 13:47:14,696 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireNoLimit
2019-04-14 13:47:14,696 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testShutdownSharedExecutorNoTask
2019-04-14 13:47:14,696 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testAcquireLimit
2019-04-14 13:47:14,696 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.lang3.concurrent.TimedSemaphoreTest#testGetAvailablePermits
2019-04-14 13:47:14,698 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:1630, fails: 13, GZoltar suspicious 7671
2019-04-14 13:47:14,734 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 1000 with susp > 0.5, we consider: 1000
2019-04-14 13:47:14,744 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-lang_27//src//default, compliance level: 8
2019-04-14 13:47:18,955 INFO main - 
---- Initial suspicious size: 1000
2019-04-14 13:47:19,064 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=512, susp=0.2773500981126146]
2019-04-14 13:47:19,070 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=531, susp=0.2773500981126146]
2019-04-14 13:47:19,072 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=542, susp=0.2773500981126146]
2019-04-14 13:47:19,075 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=585, susp=0.2773500981126146]
2019-04-14 13:47:19,222 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=565, susp=0.19611613513818404]
2019-04-14 13:47:19,228 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=570, susp=0.19611613513818404]
2019-04-14 13:47:19,380 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=507, susp=0.16012815380508713]
2019-04-14 13:47:19,383 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=509, susp=0.16012815380508713]
2019-04-14 13:47:19,545 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{serialize(Ljava/io/Serializable;Ljava/io/OutputStream;)V 0.0, lineNumber=120, susp=0.0]
2019-04-14 13:47:19,545 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{serialize(Ljava/io/Serializable;Ljava/io/OutputStream;)V 0.0, lineNumber=122, susp=0.0]
2019-04-14 13:47:19,552 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{deserialize(Ljava/io/InputStream;)Ljava/lang/Object; 0.0, lineNumber=176, susp=0.0]
2019-04-14 13:47:19,569 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=342, susp=0.0]
2019-04-14 13:47:19,578 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=225, susp=0.0]
2019-04-14 13:47:19,580 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=226, susp=0.0]
2019-04-14 13:47:19,580 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=227, susp=0.0]
2019-04-14 13:47:19,587 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=356, susp=0.0]
2019-04-14 13:47:19,592 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=348, susp=0.0]
2019-04-14 13:47:19,608 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toFloat(Ljava/lang/String;F)F 0.0, lineNumber=234, susp=0.0]
2019-04-14 13:47:19,629 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toLong(Ljava/lang/String;J)J 0.0, lineNumber=182, susp=0.0]
2019-04-14 13:47:19,636 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toInt(Ljava/lang/String;I)I 0.0, lineNumber=133, susp=0.0]
2019-04-14 13:47:19,657 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toByte(Ljava/lang/String;B)B 0.0, lineNumber=336, susp=0.0]
2019-04-14 13:47:19,799 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=518, susp=0.0]
2019-04-14 13:47:19,801 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=545, susp=0.0]
2019-04-14 13:47:19,803 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=550, susp=0.0]
2019-04-14 13:47:20,076 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toDouble(Ljava/lang/String;D)D 0.0, lineNumber=286, susp=0.0]
2019-04-14 13:47:20,089 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toShort(Ljava/lang/String;S)S 0.0, lineNumber=385, susp=0.0]
2019-04-14 13:47:20,140 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.RandomStringUtils, methodName=org.apache.commons.lang3.RandomStringUtils{random(IIIZZ[CLjava/util/Random;)Ljava/lang/String; 0.0, lineNumber=283, susp=0.0]
2019-04-14 13:47:20,146 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.RandomStringUtils, methodName=org.apache.commons.lang3.RandomStringUtils{random(IIIZZ[CLjava/util/Random;)Ljava/lang/String; 0.0, lineNumber=253, susp=0.0]
2019-04-14 13:47:20,393 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=185, susp=0.0]
2019-04-14 13:47:20,395 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=186, susp=0.0]
2019-04-14 13:47:20,396 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=187, susp=0.0]
2019-04-14 13:47:20,399 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=195, susp=0.0]
2019-04-14 13:47:20,401 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=200, susp=0.0]
2019-04-14 13:47:20,403 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=201, susp=0.0]
2019-04-14 13:47:20,416 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{register(Ljava/lang/Object;)V 0.0, lineNumber=529, susp=0.0]
2019-04-14 13:47:20,419 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{register(Ljava/lang/Object;)V 0.0, lineNumber=531, susp=0.0]
2019-04-14 13:47:20,430 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{unregister(Ljava/lang/Object;)V 0.0, lineNumber=555, susp=0.0]
2019-04-14 13:47:20,431 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{unregister(Ljava/lang/Object;)V 0.0, lineNumber=557, susp=0.0]
2019-04-14 13:47:20,583 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.text.WordUtils, methodName=org.apache.commons.lang3.text.WordUtils{wrap(Ljava/lang/String;ILjava/lang/String;Z)Ljava/lang/String; 0.0, lineNumber=139, susp=0.0]
2019-04-14 13:47:20,683 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{addAbbreviation(Ljava/lang/String;Ljava/lang/String;)V 0.0, lineNumber=118, susp=0.0]
2019-04-14 13:47:20,850 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getClass(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class; 0.0, lineNumber=761, susp=0.0]
2019-04-14 13:47:20,858 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getClass(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class; 0.0, lineNumber=768, susp=0.0]
2019-04-14 13:47:20,905 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getAllSuperclasses(Ljava/lang/Class;)Ljava/util/List; 0.0, lineNumber=295, susp=0.0]
2019-04-14 13:47:20,950 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getCanonicalName(Ljava/lang/String;)Ljava/lang/String; 0.0, lineNumber=1052, susp=0.0]
2019-04-14 13:47:20,952 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getCanonicalName(Ljava/lang/String;)Ljava/lang/String; 0.0, lineNumber=1053, susp=0.0]
2019-04-14 13:47:20,969 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=586, susp=0.0]
2019-04-14 13:47:20,971 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=587, susp=0.0]
2019-04-14 13:47:20,977 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=591, susp=0.0]
2019-04-14 13:47:20,995 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=604, susp=0.0]
2019-04-14 13:47:20,997 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=605, susp=0.0]
2019-04-14 13:47:20,999 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=606, susp=0.0]
2019-04-14 13:47:21,005 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=610, susp=0.0]
2019-04-14 13:47:21,007 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=611, susp=0.0]
2019-04-14 13:47:21,009 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=612, susp=0.0]
2019-04-14 13:47:21,015 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=616, susp=0.0]
2019-04-14 13:47:21,017 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=617, susp=0.0]
2019-04-14 13:47:21,019 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=618, susp=0.0]
2019-04-14 13:47:21,021 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=619, susp=0.0]
2019-04-14 13:47:21,105 INFO main - Total suspicious from FL: 1000,  943
2019-04-14 13:47:21,105 INFO main - Total ModPoint created: 943
2019-04-14 13:47:21,105 INFO main - Creating program variant #1, [Variant id: 1, #gens: 943, #ops: 0, parent:-]
2019-04-14 13:47:21,162 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=512, susp=0.2773500981126146]
2019-04-14 13:47:21,166 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=531, susp=0.2773500981126146]
2019-04-14 13:47:21,167 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=542, susp=0.2773500981126146]
2019-04-14 13:47:21,169 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=585, susp=0.2773500981126146]
2019-04-14 13:47:21,314 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=565, susp=0.19611613513818404]
2019-04-14 13:47:21,320 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=570, susp=0.19611613513818404]
2019-04-14 13:47:21,428 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=507, susp=0.16012815380508713]
2019-04-14 13:47:21,433 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=509, susp=0.16012815380508713]
2019-04-14 13:47:21,575 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{serialize(Ljava/io/Serializable;Ljava/io/OutputStream;)V 0.0, lineNumber=120, susp=0.0]
2019-04-14 13:47:21,576 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{serialize(Ljava/io/Serializable;Ljava/io/OutputStream;)V 0.0, lineNumber=122, susp=0.0]
2019-04-14 13:47:21,582 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{deserialize(Ljava/io/InputStream;)Ljava/lang/Object; 0.0, lineNumber=176, susp=0.0]
2019-04-14 13:47:21,599 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=342, susp=0.0]
2019-04-14 13:47:21,610 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=225, susp=0.0]
2019-04-14 13:47:21,611 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=226, susp=0.0]
2019-04-14 13:47:21,611 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=227, susp=0.0]
2019-04-14 13:47:21,617 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=356, susp=0.0]
2019-04-14 13:47:21,622 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=348, susp=0.0]
2019-04-14 13:47:21,639 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toFloat(Ljava/lang/String;F)F 0.0, lineNumber=234, susp=0.0]
2019-04-14 13:47:21,666 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toLong(Ljava/lang/String;J)J 0.0, lineNumber=182, susp=0.0]
2019-04-14 13:47:21,674 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toInt(Ljava/lang/String;I)I 0.0, lineNumber=133, susp=0.0]
2019-04-14 13:47:21,699 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toByte(Ljava/lang/String;B)B 0.0, lineNumber=336, susp=0.0]
2019-04-14 13:47:21,871 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=518, susp=0.0]
2019-04-14 13:47:21,874 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=545, susp=0.0]
2019-04-14 13:47:21,877 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=550, susp=0.0]
2019-04-14 13:47:22,158 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toDouble(Ljava/lang/String;D)D 0.0, lineNumber=286, susp=0.0]
2019-04-14 13:47:22,171 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toShort(Ljava/lang/String;S)S 0.0, lineNumber=385, susp=0.0]
2019-04-14 13:47:22,215 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.RandomStringUtils, methodName=org.apache.commons.lang3.RandomStringUtils{random(IIIZZ[CLjava/util/Random;)Ljava/lang/String; 0.0, lineNumber=283, susp=0.0]
2019-04-14 13:47:22,220 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.RandomStringUtils, methodName=org.apache.commons.lang3.RandomStringUtils{random(IIIZZ[CLjava/util/Random;)Ljava/lang/String; 0.0, lineNumber=253, susp=0.0]
2019-04-14 13:47:22,372 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=185, susp=0.0]
2019-04-14 13:47:22,373 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=186, susp=0.0]
2019-04-14 13:47:22,375 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=187, susp=0.0]
2019-04-14 13:47:22,378 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=195, susp=0.0]
2019-04-14 13:47:22,380 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=200, susp=0.0]
2019-04-14 13:47:22,380 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=201, susp=0.0]
2019-04-14 13:47:22,392 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{register(Ljava/lang/Object;)V 0.0, lineNumber=529, susp=0.0]
2019-04-14 13:47:22,394 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{register(Ljava/lang/Object;)V 0.0, lineNumber=531, susp=0.0]
2019-04-14 13:47:22,404 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{unregister(Ljava/lang/Object;)V 0.0, lineNumber=555, susp=0.0]
2019-04-14 13:47:22,405 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{unregister(Ljava/lang/Object;)V 0.0, lineNumber=557, susp=0.0]
2019-04-14 13:47:22,531 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.text.WordUtils, methodName=org.apache.commons.lang3.text.WordUtils{wrap(Ljava/lang/String;ILjava/lang/String;Z)Ljava/lang/String; 0.0, lineNumber=139, susp=0.0]
2019-04-14 13:47:22,615 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{addAbbreviation(Ljava/lang/String;Ljava/lang/String;)V 0.0, lineNumber=118, susp=0.0]
2019-04-14 13:47:22,757 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getClass(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class; 0.0, lineNumber=761, susp=0.0]
2019-04-14 13:47:22,764 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getClass(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class; 0.0, lineNumber=768, susp=0.0]
2019-04-14 13:47:22,805 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getAllSuperclasses(Ljava/lang/Class;)Ljava/util/List; 0.0, lineNumber=295, susp=0.0]
2019-04-14 13:47:22,845 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getCanonicalName(Ljava/lang/String;)Ljava/lang/String; 0.0, lineNumber=1052, susp=0.0]
2019-04-14 13:47:22,847 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getCanonicalName(Ljava/lang/String;)Ljava/lang/String; 0.0, lineNumber=1053, susp=0.0]
2019-04-14 13:47:22,863 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=586, susp=0.0]
2019-04-14 13:47:22,865 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=587, susp=0.0]
2019-04-14 13:47:22,870 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=591, susp=0.0]
2019-04-14 13:47:22,885 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=604, susp=0.0]
2019-04-14 13:47:22,887 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=605, susp=0.0]
2019-04-14 13:47:22,889 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=606, susp=0.0]
2019-04-14 13:47:22,894 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=610, susp=0.0]
2019-04-14 13:47:22,897 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=611, susp=0.0]
2019-04-14 13:47:22,899 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=612, susp=0.0]
2019-04-14 13:47:22,905 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=616, susp=0.0]
2019-04-14 13:47:22,907 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=617, susp=0.0]
2019-04-14 13:47:22,908 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=618, susp=0.0]
2019-04-14 13:47:22,910 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=619, susp=0.0]
2019-04-14 13:47:22,988 INFO main - Total suspicious from FL: 1000,  943
2019-04-14 13:47:22,988 INFO main - Total ModPoint created: 943
2019-04-14 13:47:22,988 INFO main - Creating program variant #2, [Variant id: 2, #gens: 943, #ops: 0, parent:-]
2019-04-14 13:47:23,034 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=512, susp=0.2773500981126146]
2019-04-14 13:47:23,037 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=531, susp=0.2773500981126146]
2019-04-14 13:47:23,038 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=542, susp=0.2773500981126146]
2019-04-14 13:47:23,040 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=585, susp=0.2773500981126146]
2019-04-14 13:47:23,156 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=565, susp=0.19611613513818404]
2019-04-14 13:47:23,159 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=570, susp=0.19611613513818404]
2019-04-14 13:47:23,239 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=507, susp=0.16012815380508713]
2019-04-14 13:47:23,241 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=509, susp=0.16012815380508713]
2019-04-14 13:47:23,350 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{serialize(Ljava/io/Serializable;Ljava/io/OutputStream;)V 0.0, lineNumber=120, susp=0.0]
2019-04-14 13:47:23,350 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{serialize(Ljava/io/Serializable;Ljava/io/OutputStream;)V 0.0, lineNumber=122, susp=0.0]
2019-04-14 13:47:23,354 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.SerializationUtils, methodName=org.apache.commons.lang3.SerializationUtils{deserialize(Ljava/io/InputStream;)Ljava/lang/Object; 0.0, lineNumber=176, susp=0.0]
2019-04-14 13:47:23,365 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=342, susp=0.0]
2019-04-14 13:47:23,372 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=225, susp=0.0]
2019-04-14 13:47:23,373 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=226, susp=0.0]
2019-04-14 13:47:23,373 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{identityToString(Ljava/lang/StringBuffer;Ljava/lang/Object;)V 0.0, lineNumber=227, susp=0.0]
2019-04-14 13:47:23,377 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=356, susp=0.0]
2019-04-14 13:47:23,380 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ObjectUtils, methodName=org.apache.commons.lang3.ObjectUtils{clone(Ljava/lang/Object;)Ljava/lang/Object; 0.0, lineNumber=348, susp=0.0]
2019-04-14 13:47:23,392 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toFloat(Ljava/lang/String;F)F 0.0, lineNumber=234, susp=0.0]
2019-04-14 13:47:23,409 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toLong(Ljava/lang/String;J)J 0.0, lineNumber=182, susp=0.0]
2019-04-14 13:47:23,415 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toInt(Ljava/lang/String;I)I 0.0, lineNumber=133, susp=0.0]
2019-04-14 13:47:23,432 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toByte(Ljava/lang/String;B)B 0.0, lineNumber=336, susp=0.0]
2019-04-14 13:47:23,548 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=518, susp=0.0]
2019-04-14 13:47:23,550 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=545, susp=0.0]
2019-04-14 13:47:23,552 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{createNumber(Ljava/lang/String;)Ljava/lang/Number; 0.0, lineNumber=550, susp=0.0]
2019-04-14 13:47:23,777 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toDouble(Ljava/lang/String;D)D 0.0, lineNumber=286, susp=0.0]
2019-04-14 13:47:23,790 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.math.NumberUtils, methodName=org.apache.commons.lang3.math.NumberUtils{toShort(Ljava/lang/String;S)S 0.0, lineNumber=385, susp=0.0]
2019-04-14 13:47:23,831 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.RandomStringUtils, methodName=org.apache.commons.lang3.RandomStringUtils{random(IIIZZ[CLjava/util/Random;)Ljava/lang/String; 0.0, lineNumber=283, susp=0.0]
2019-04-14 13:47:23,836 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.RandomStringUtils, methodName=org.apache.commons.lang3.RandomStringUtils{random(IIIZZ[CLjava/util/Random;)Ljava/lang/String; 0.0, lineNumber=253, susp=0.0]
2019-04-14 13:47:23,987 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=185, susp=0.0]
2019-04-14 13:47:23,989 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=186, susp=0.0]
2019-04-14 13:47:23,990 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=187, susp=0.0]
2019-04-14 13:47:23,993 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=195, susp=0.0]
2019-04-14 13:47:23,995 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=200, susp=0.0]
2019-04-14 13:47:23,996 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{reflectionAppend(Ljava/lang/Object;Ljava/lang/Class;Lorg/apache/commons/lang3/builder/HashCodeBuilder;Z[Ljava/lang/String;)V 0.0, lineNumber=201, susp=0.0]
2019-04-14 13:47:24,008 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{register(Ljava/lang/Object;)V 0.0, lineNumber=529, susp=0.0]
2019-04-14 13:47:24,010 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{register(Ljava/lang/Object;)V 0.0, lineNumber=531, susp=0.0]
2019-04-14 13:47:24,019 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{unregister(Ljava/lang/Object;)V 0.0, lineNumber=555, susp=0.0]
2019-04-14 13:47:24,019 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.builder.HashCodeBuilder, methodName=org.apache.commons.lang3.builder.HashCodeBuilder{unregister(Ljava/lang/Object;)V 0.0, lineNumber=557, susp=0.0]
2019-04-14 13:47:24,148 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.text.WordUtils, methodName=org.apache.commons.lang3.text.WordUtils{wrap(Ljava/lang/String;ILjava/lang/String;Z)Ljava/lang/String; 0.0, lineNumber=139, susp=0.0]
2019-04-14 13:47:24,233 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{addAbbreviation(Ljava/lang/String;Ljava/lang/String;)V 0.0, lineNumber=118, susp=0.0]
2019-04-14 13:47:24,382 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getClass(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class; 0.0, lineNumber=761, susp=0.0]
2019-04-14 13:47:24,390 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getClass(Ljava/lang/ClassLoader;Ljava/lang/String;Z)Ljava/lang/Class; 0.0, lineNumber=768, susp=0.0]
2019-04-14 13:47:24,428 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getAllSuperclasses(Ljava/lang/Class;)Ljava/util/List; 0.0, lineNumber=295, susp=0.0]
2019-04-14 13:47:24,465 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getCanonicalName(Ljava/lang/String;)Ljava/lang/String; 0.0, lineNumber=1052, susp=0.0]
2019-04-14 13:47:24,466 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{getCanonicalName(Ljava/lang/String;)Ljava/lang/String; 0.0, lineNumber=1053, susp=0.0]
2019-04-14 13:47:24,482 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=586, susp=0.0]
2019-04-14 13:47:24,484 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=587, susp=0.0]
2019-04-14 13:47:24,491 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=591, susp=0.0]
2019-04-14 13:47:24,512 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=604, susp=0.0]
2019-04-14 13:47:24,515 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=605, susp=0.0]
2019-04-14 13:47:24,517 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=606, susp=0.0]
2019-04-14 13:47:24,525 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=610, susp=0.0]
2019-04-14 13:47:24,527 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=611, susp=0.0]
2019-04-14 13:47:24,530 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=612, susp=0.0]
2019-04-14 13:47:24,538 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=616, susp=0.0]
2019-04-14 13:47:24,541 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=617, susp=0.0]
2019-04-14 13:47:24,543 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=618, susp=0.0]
2019-04-14 13:47:24,545 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.lang3.ClassUtils, methodName=org.apache.commons.lang3.ClassUtils{isAssignable(Ljava/lang/Class;Ljava/lang/Class;Z)Z 0.0, lineNumber=619, susp=0.0]
2019-04-14 13:47:24,649 INFO main - Total suspicious from FL: 1000,  943
2019-04-14 13:47:24,650 INFO main - Total ModPoint created: 943
2019-04-14 13:47:24,650 INFO main - Creating program variant #3, [Variant id: 3, #gens: 943, #ops: 0, parent:-]
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-14 13:47:55,925 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/lang_27/
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= package
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-14 13:47:55,926 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-14 13:47:55,927 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-14 13:47:55,927 INFO main - 
----Starting Solution Search
2019-04-14 13:48:35,469 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:48:35,469 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0') {
				return false;
			}
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:48:35,472 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:48:49,022 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:48:49,022 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0') {
				return false;
			}
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:48:49,025 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0') {
				return false;
			}
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:49:15,949 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:49:15,949 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try {
			return java.lang.System.getProperty(property);
		} catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:49:15,951 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:49:29,264 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:49:29,264 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0') {
				return false;
			}
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:49:29,267 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:49:56,437 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:49:56,438 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try {
			return java.lang.System.getProperty(property);
		} catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:49:56,440 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try {
			return java.lang.System.getProperty(property);
		} catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:50:07,910 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:50:07,910 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:07,913 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:47,172 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:50:47,173 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:47,176 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:48,680 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:50:48,681 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try {
			return java.lang.System.getProperty(property);
		} catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:50:48,683 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:50:51,738 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:50:51,738 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:51,741 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:58,263 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:50:58,263 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:50:58,266 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:00,505 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:00,505 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:51:00,508 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:51:09,385 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:09,385 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:09,388 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:11,453 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:11,453 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:11,456 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:14,538 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:14,539 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1)) {
				mant = str.substring(0, expPos);
			}else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:14,543 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:14,880 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:14,881 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:14,883 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:21,952 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:21,952 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:51:21,954 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:51:23,632 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:23,632 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:23,635 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:26,953 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:26,953 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:26,955 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:32,703 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:32,703 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try {
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						} catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:32,709 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:44,650 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:44,650 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros)))) {
						return d;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:44,653 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:48,490 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:48,490 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:48,493 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:55,304 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:55,304 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:55,307 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:56,672 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:51:56,672 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:51:56,675 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:01,724 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:01,725 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:01,727 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:04,091 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:04,091 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x"))) {
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		}
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:04,094 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:05,217 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:05,217 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try {
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:05,219 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:05,902 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:05,902 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:05,904 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:06,853 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:06,853 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else {
				exp = null;
			}
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:06,859 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:10,226 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:10,226 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:10,228 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:11,970 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:11,970 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9')) {
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				}
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:11,974 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:52:27,796 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:27,797 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
						return f;
					}
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:27,799 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:49,188 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:52:49,188 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else {
				dec = str.substring((decPos + 1));
			}
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:52:49,190 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:03,634 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:03,635 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:03,637 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:13,996 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:13,996 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:13,999 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:16,243 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:16,243 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:16,245 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:21,145 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:21,146 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:21,148 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:30,716 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:30,716 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:30,719 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:39,004 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:39,004 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:39,006 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:41,634 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:41,634 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:41,637 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:45,713 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:45,714 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2) {
			intVersion += (javaVersions[1]) * 10;
		}
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:45,716 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:46,029 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:46,029 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			}else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:46,032 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:49,668 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:49,668 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null) {
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		}
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:49,672 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0) {
				ints[(j++)] = java.lang.Integer.parseInt(s);
			}
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try {
			return java.lang.Float.parseFloat(builder.toString());
		} catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1) {
			intVersion = (javaVersions[0]) * 100;
		}
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:53:50,020 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:50,020 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1))) {
				exp = str.substring((expPos + 1), str.length());
			}else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:50,022 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:53:52,810 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:53:52,810 ERROR main - Undo Error: original: 
public class StringUtils {
	public static final java.lang.String EMPTY = "";

	public static final int INDEX_NOT_FOUND = -1;

	private static final int PAD_LIMIT = 8192;

	public StringUtils() {
		super();
	}

	public static boolean isEmpty(java.lang.CharSequence cs) {
		return (cs == null) || ((cs.length()) == 0);
	}

	public static boolean isNotEmpty(java.lang.CharSequence cs) {
		return !(org.apache.commons.lang3.StringUtils.isEmpty(cs));
	}

	public static boolean isBlank(java.lang.CharSequence cs) {
		int strLen;
		if ((cs == null) || ((strLen = cs.length()) == 0)) {
			return true;
		}
		for (int i = 0; i < strLen; i++) {
			if ((java.lang.Character.isWhitespace(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNotBlank(java.lang.CharSequence cs) {
		return !(org.apache.commons.lang3.StringUtils.isBlank(cs));
	}

	public static java.lang.String trim(java.lang.String str) {
		return str == null ? null : str.trim();
	}

	public static java.lang.String trimToNull(java.lang.String str) {
		java.lang.String ts = org.apache.commons.lang3.StringUtils.trim(str);
		return org.apache.commons.lang3.StringUtils.isEmpty(ts) ? null : ts;
	}

	public static java.lang.String trimToEmpty(java.lang.String str) {
		return str == null ? org.apache.commons.lang3.StringUtils.EMPTY : str.trim();
	}

	public static java.lang.String strip(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.strip(str, null);
	}

	public static java.lang.String stripToNull(java.lang.String str) {
		if (str == null) {
			return null;
		}
		str = org.apache.commons.lang3.StringUtils.strip(str, null);
		return (str.length()) == 0 ? null : str;
	}

	public static java.lang.String stripToEmpty(java.lang.String str) {
		return str == null ? org.apache.commons.lang3.StringUtils.EMPTY : org.apache.commons.lang3.StringUtils.strip(str, null);
	}

	public static java.lang.String strip(java.lang.String str, java.lang.String stripChars) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		str = org.apache.commons.lang3.StringUtils.stripStart(str, stripChars);
		return org.apache.commons.lang3.StringUtils.stripEnd(str, stripChars);
	}

	public static java.lang.String stripStart(java.lang.String str, java.lang.String stripChars) {
		int strLen;
		if ((str == null) || ((strLen = str.length()) == 0)) {
			return str;
		}
		int start = 0;
		if (stripChars == null) {
			while ((start != strLen) && (java.lang.Character.isWhitespace(str.charAt(start)))) {
				start++;
			} 
		}else
			if ((stripChars.length()) == 0) {
				return str;
			}else {
				while ((start != strLen) && ((stripChars.indexOf(str.charAt(start))) != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND))) {
					start++;
				} 
			}
		
		return str.substring(start);
	}

	public static java.lang.String stripEnd(java.lang.String str, java.lang.String stripChars) {
		int end;
		if ((str == null) || ((end = str.length()) == 0)) {
			return str;
		}
		if (stripChars == null) {
			while ((end != 0) && (java.lang.Character.isWhitespace(str.charAt((end - 1))))) {
				end--;
			} 
		}else
			if ((stripChars.length()) == 0) {
				return str;
			}else {
				while ((end != 0) && ((stripChars.indexOf(str.charAt((end - 1)))) != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND))) {
					end--;
				} 
			}
		
		return str.substring(0, end);
	}

	public static java.lang.String[] stripAll(java.lang.String[] strs) {
		return org.apache.commons.lang3.StringUtils.stripAll(strs, null);
	}

	public static java.lang.String[] stripAll(java.lang.String[] strs, java.lang.String stripChars) {
		int strsLen;
		if ((strs == null) || ((strsLen = strs.length) == 0)) {
			return strs;
		}
		java.lang.String[] newArr = new java.lang.String[strsLen];
		for (int i = 0; i < strsLen; i++) {
			newArr[i] = org.apache.commons.lang3.StringUtils.strip(strs[i], stripChars);
		}
		return newArr;
	}

	public static java.lang.String stripAccents(java.lang.String input) {
		if (input == null) {
			return null;
		}
		if (org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(1.6F)) {
			try {
				java.lang.Class<?> normalizerFormClass = org.apache.commons.lang3.ClassUtils.getClass("java.text.Normalizer$Form", false);
				java.lang.Class<?> normalizerClass = org.apache.commons.lang3.ClassUtils.getClass("java.text.Normalizer", false);
				java.lang.reflect.Method method = normalizerClass.getMethod("normalize", java.lang.CharSequence.class, normalizerFormClass);
				java.lang.reflect.Field nfd = normalizerFormClass.getField("NFD");
				java.lang.String decomposed = ((java.lang.String) (method.invoke(null, input, nfd.get(null))));
				java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
				return accentPattern.matcher(decomposed).replaceAll("");
			} catch (java.lang.ClassNotFoundException cnfe) {
				throw new java.lang.RuntimeException("ClassNotFoundException occurred during 1.6 backcompat code", cnfe);
			} catch (java.lang.NoSuchMethodException nsme) {
				throw new java.lang.RuntimeException("NoSuchMethodException occurred during 1.6 backcompat code", nsme);
			} catch (java.lang.NoSuchFieldException nsfe) {
				throw new java.lang.RuntimeException("NoSuchFieldException occurred during 1.6 backcompat code", nsfe);
			} catch (java.lang.IllegalAccessException iae) {
				throw new java.lang.RuntimeException("IllegalAccessException occurred during 1.6 backcompat code", iae);
			} catch (java.lang.IllegalArgumentException iae) {
				throw new java.lang.RuntimeException("IllegalArgumentException occurred during 1.6 backcompat code", iae);
			} catch (java.lang.reflect.InvocationTargetException ite) {
				throw new java.lang.RuntimeException("InvocationTargetException occurred during 1.6 backcompat code", ite);
			} catch (java.lang.SecurityException se) {
				throw new java.lang.RuntimeException("SecurityException occurred during 1.6 backcompat code", se);
			}
		}else {
			throw new java.lang.UnsupportedOperationException("The stripAccents(String) method is not supported until Java 1.6");
		}
	}

	public static boolean equals(java.lang.CharSequence cs1, java.lang.CharSequence cs2) {
		return cs1 == null ? cs2 == null : cs1.equals(cs2);
	}

	public static boolean equalsIgnoreCase(java.lang.String str1, java.lang.String str2) {
		return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);
	}

	public static int indexOf(java.lang.String str, int searchChar) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchChar);
	}

	public static int indexOf(java.lang.String str, int searchChar, int startPos) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchChar, startPos);
	}

	public static int indexOf(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchStr);
	}

	public static int indexOf(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchStr, startPos);
	}

	public static int ordinalIndexOf(java.lang.String str, java.lang.String searchStr, int ordinal) {
		return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, false);
	}

	private static int ordinalIndexOf(java.lang.String str, java.lang.String searchStr, int ordinal, boolean lastIndex) {
		if (((str == null) || (searchStr == null)) || (ordinal <= 0)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((searchStr.length()) == 0) {
			return lastIndex ? str.length() : 0;
		}
		int found = 0;
		int index = (lastIndex) ? str.length() : org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		do {
			if (lastIndex) {
				index = str.lastIndexOf(searchStr, (index - 1));
			}else {
				index = str.indexOf(searchStr, (index + 1));
			}
			if (index < 0) {
				return index;
			}
			found++;
		} while (found < ordinal );
		return index;
	}

	public static int indexOfIgnoreCase(java.lang.String str, java.lang.String searchStr) {
		return org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(str, searchStr, 0);
	}

	public static int indexOfIgnoreCase(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if (startPos < 0) {
			startPos = 0;
		}
		int endLimit = ((str.length()) - (searchStr.length())) + 1;
		if (startPos > endLimit) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((searchStr.length()) == 0) {
			return startPos;
		}
		for (int i = startPos; i < endLimit; i++) {
			if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
				return i;
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int lastIndexOf(java.lang.String str, int searchChar) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchChar);
	}

	public static int lastIndexOf(java.lang.String str, int searchChar, int startPos) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchChar, startPos);
	}

	public static int lastIndexOf(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchStr);
	}

	public static int lastOrdinalIndexOf(java.lang.String str, java.lang.String searchStr, int ordinal) {
		return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, true);
	}

	public static int lastIndexOf(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchStr, startPos);
	}

	public static int lastIndexOfIgnoreCase(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(str, searchStr, str.length());
	}

	public static int lastIndexOfIgnoreCase(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if (startPos > ((str.length()) - (searchStr.length()))) {
			startPos = (str.length()) - (searchStr.length());
		}
		if (startPos < 0) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((searchStr.length()) == 0) {
			return startPos;
		}
		for (int i = startPos; i >= 0; i--) {
			if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
				return i;
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static boolean contains(java.lang.String str, int searchChar) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		return (str.indexOf(searchChar)) >= 0;
	}

	public static boolean contains(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return false;
		}
		return (str.indexOf(searchStr)) >= 0;
	}

	public static boolean containsIgnoreCase(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return false;
		}
		int len = searchStr.length();
		int max = (str.length()) - len;
		for (int i = 0; i <= max; i++) {
			if (str.regionMatches(true, i, searchStr, 0, len)) {
				return true;
			}
		}
		return false;
	}

	public static boolean containsWhitespace(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		int strLen = str.length();
		for (int i = 0; i < strLen; i++) {
			if (java.lang.Character.isWhitespace(str.charAt(i))) {
				return true;
			}
		}
		return false;
	}

	public static int indexOfAny(java.lang.CharSequence cs, char[] searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int csLen = cs.length();
		int csLast = csLen - 1;
		int searchLen = searchChars.length;
		int searchLast = searchLen - 1;
		for (int i = 0; i < csLen; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLen; j++) {
				if ((searchChars[j]) == ch) {
					if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {
						if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {
							return i;
						}
					}else {
						return i;
					}
				}
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int indexOfAny(java.lang.CharSequence cs, java.lang.String searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return org.apache.commons.lang3.StringUtils.indexOfAny(cs, searchChars.toCharArray());
	}

	public static boolean containsAny(java.lang.String cs, char[] searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {
			return false;
		}
		int csLength = cs.length();
		int searchLength = searchChars.length;
		int csLast = csLength - 1;
		int searchLast = searchLength - 1;
		for (int i = 0; i < csLength; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLength; j++) {
				if ((searchChars[j]) == ch) {
					if (java.lang.Character.isHighSurrogate(ch)) {
						if (j == searchLast) {
							return true;
						}
						if ((i < csLast) && ((searchChars[(j + 1)]) == (cs.charAt((i + 1))))) {
							return true;
						}
					}else {
						return true;
					}
				}
			}
		}
		return false;
	}

	public static boolean containsAny(java.lang.String cs, java.lang.String searchChars) {
		if (searchChars == null) {
			return false;
		}
		return org.apache.commons.lang3.StringUtils.containsAny(cs, searchChars.toCharArray());
	}

	public static int indexOfAnyBut(java.lang.CharSequence cs, char[] searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int csLen = cs.length();
		int csLast = csLen - 1;
		int searchLen = searchChars.length;
		int searchLast = searchLen - 1;
		outer : for (int i = 0; i < csLen; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLen; j++) {
				if ((searchChars[j]) == ch) {
					if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {
						if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {
							continue outer;
						}
					}else {
						continue outer;
					}
				}
			}
			return i;
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int indexOfAnyBut(java.lang.String str, java.lang.String searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int strLen = str.length();
		for (int i = 0; i < strLen; i++) {
			char ch = str.charAt(i);
			boolean chFound = (searchChars.indexOf(ch)) >= 0;
			if (((i + 1) < strLen) && (java.lang.Character.isHighSurrogate(ch))) {
				char ch2 = str.charAt((i + 1));
				if (chFound && ((searchChars.indexOf(ch2)) < 0)) {
					return i;
				}
			}else {
				if (!chFound) {
					return i;
				}
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static boolean containsOnly(java.lang.CharSequence cs, char[] valid) {
		if ((valid == null) || (cs == null)) {
			return false;
		}
		if ((cs.length()) == 0) {
			return true;
		}
		if ((valid.length) == 0) {
			return false;
		}
		return (org.apache.commons.lang3.StringUtils.indexOfAnyBut(cs, valid)) == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND);
	}

	public static boolean containsOnly(java.lang.CharSequence cs, java.lang.String validChars) {
		if ((cs == null) || (validChars == null)) {
			return false;
		}
		return org.apache.commons.lang3.StringUtils.containsOnly(cs, validChars.toCharArray());
	}

	public static boolean containsNone(java.lang.CharSequence cs, char[] searchChars) {
		if ((cs == null) || (searchChars == null)) {
			return true;
		}
		int csLen = cs.length();
		int csLast = csLen - 1;
		int searchLen = searchChars.length;
		int searchLast = searchLen - 1;
		for (int i = 0; i < csLen; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLen; j++) {
				if ((searchChars[j]) == ch) {
					if (java.lang.Character.isHighSurrogate(ch)) {
						if (j == searchLast) {
							return false;
						}
						if ((i < csLast) && ((searchChars[(j + 1)]) == (cs.charAt((i + 1))))) {
							return false;
						}
					}else {
						return false;
					}
				}
			}
		}
		return true;
	}

	public static boolean containsNone(java.lang.CharSequence cs, java.lang.String invalidChars) {
		if ((cs == null) || (invalidChars == null)) {
			return true;
		}
		return org.apache.commons.lang3.StringUtils.containsNone(cs, invalidChars.toCharArray());
	}

	public static int indexOfAny(java.lang.String str, java.lang.String[] searchStrs) {
		if ((str == null) || (searchStrs == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int sz = searchStrs.length;
		int ret = java.lang.Integer.MAX_VALUE;
		int tmp = 0;
		for (int i = 0; i < sz; i++) {
			java.lang.String search = searchStrs[i];
			if (search == null) {
				continue;
			}
			tmp = str.indexOf(search);
			if (tmp == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
				continue;
			}
			if (tmp < ret) {
				ret = tmp;
			}
		}
		return ret == (java.lang.Integer.MAX_VALUE) ? org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND : ret;
	}

	public static int lastIndexOfAny(java.lang.String str, java.lang.String[] searchStrs) {
		if ((str == null) || (searchStrs == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int sz = searchStrs.length;
		int ret = org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		int tmp = 0;
		for (int i = 0; i < sz; i++) {
			java.lang.String search = searchStrs[i];
			if (search == null) {
				continue;
			}
			tmp = str.lastIndexOf(search);
			if (tmp > ret) {
				ret = tmp;
			}
		}
		return ret;
	}

	public static java.lang.String substring(java.lang.String str, int start) {
		if (str == null) {
			return null;
		}
		if (start < 0) {
			start = (str.length()) + start;
		}
		if (start < 0) {
			start = 0;
		}
		if (start > (str.length())) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str.substring(start);
	}

	public static java.lang.String substring(java.lang.String str, int start, int end) {
		if (str == null) {
			return null;
		}
		if (end < 0) {
			end = (str.length()) + end;
		}
		if (start < 0) {
			start = (str.length()) + start;
		}
		if (end > (str.length())) {
			end = str.length();
		}
		if (start > end) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if (start < 0) {
			start = 0;
		}
		if (end < 0) {
			end = 0;
		}
		return str.substring(start, end);
	}

	public static java.lang.String left(java.lang.String str, int len) {
		if (str == null) {
			return null;
		}
		if (len < 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if ((str.length()) <= len) {
			return str;
		}
		return str.substring(0, len);
	}

	public static java.lang.String right(java.lang.String str, int len) {
		if (str == null) {
			return null;
		}
		if (len < 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if ((str.length()) <= len) {
			return str;
		}
		return str.substring(((str.length()) - len));
	}

	public static java.lang.String mid(java.lang.String str, int pos, int len) {
		if (str == null) {
			return null;
		}
		if ((len < 0) || (pos > (str.length()))) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if (pos < 0) {
			pos = 0;
		}
		if ((str.length()) <= (pos + len)) {
			return str.substring(pos);
		}
		return str.substring(pos, (pos + len));
	}

	public static java.lang.String substringBefore(java.lang.String str, java.lang.String separator) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {
			return str;
		}
		if ((separator.length()) == 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int pos = str.indexOf(separator);
		if (pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return str;
		}
		return str.substring(0, pos);
	}

	public static java.lang.String substringAfter(java.lang.String str, java.lang.String separator) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		if (separator == null) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int pos = str.indexOf(separator);
		if (pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str.substring((pos + (separator.length())));
	}

	public static java.lang.String substringBeforeLast(java.lang.String str, java.lang.String separator) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(separator))) {
			return str;
		}
		int pos = str.lastIndexOf(separator);
		if (pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return str;
		}
		return str.substring(0, pos);
	}

	public static java.lang.String substringAfterLast(java.lang.String str, java.lang.String separator) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(separator)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int pos = str.lastIndexOf(separator);
		if ((pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) || (pos == ((str.length()) - (separator.length())))) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str.substring((pos + (separator.length())));
	}

	public static java.lang.String substringBetween(java.lang.String str, java.lang.String tag) {
		return org.apache.commons.lang3.StringUtils.substringBetween(str, tag, tag);
	}

	public static java.lang.String substringBetween(java.lang.String str, java.lang.String open, java.lang.String close) {
		if (((str == null) || (open == null)) || (close == null)) {
			return null;
		}
		int start = str.indexOf(open);
		if (start != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			int end = str.indexOf(close, (start + (open.length())));
			if (end != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
				return str.substring((start + (open.length())), end);
			}
		}
		return null;
	}

	public static java.lang.String[] substringsBetween(java.lang.String str, java.lang.String open, java.lang.String close) {
		if (((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(open))) || (org.apache.commons.lang3.StringUtils.isEmpty(close))) {
			return null;
		}
		int strLen = str.length();
		if (strLen == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		int closeLen = close.length();
		int openLen = open.length();
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int pos = 0;
		while (pos < (strLen - closeLen)) {
			int start = str.indexOf(open, pos);
			if (start < 0) {
				break;
			}
			start += openLen;
			int end = str.indexOf(close, start);
			if (end < 0) {
				break;
			}
			list.add(str.substring(start, end));
			pos = end + closeLen;
		} 
		if (list.isEmpty()) {
			return null;
		}
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String[] split(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.split(str, null, (-1));
	}

	public static java.lang.String[] split(java.lang.String str, char separatorChar) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChar, false);
	}

	public static java.lang.String[] split(java.lang.String str, java.lang.String separatorChars) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, (-1), false);
	}

	public static java.lang.String[] split(java.lang.String str, java.lang.String separatorChars, int max) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, false);
	}

	public static java.lang.String[] splitByWholeSeparator(java.lang.String str, java.lang.String separator) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), false);
	}

	public static java.lang.String[] splitByWholeSeparator(java.lang.String str, java.lang.String separator, int max) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, max, false);
	}

	public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String str, java.lang.String separator) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), true);
	}

	public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String str, java.lang.String separator, int max) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, max, true);
	}

	private static java.lang.String[] splitByWholeSeparatorWorker(java.lang.String str, java.lang.String separator, int max, boolean preserveAllTokens) {
		if (str == null) {
			return null;
		}
		int len = str.length();
		if (len == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		if ((separator == null) || (org.apache.commons.lang3.StringUtils.EMPTY.equals(separator))) {
			return org.apache.commons.lang3.StringUtils.splitWorker(str, null, max, preserveAllTokens);
		}
		int separatorLength = separator.length();
		java.util.ArrayList<java.lang.String> substrings = new java.util.ArrayList<java.lang.String>();
		int numberOfSubstrings = 0;
		int beg = 0;
		int end = 0;
		while (end < len) {
			end = str.indexOf(separator, beg);
			if (end > (-1)) {
				if (end > beg) {
					numberOfSubstrings += 1;
					if (numberOfSubstrings == max) {
						end = len;
						substrings.add(str.substring(beg));
					}else {
						substrings.add(str.substring(beg, end));
						beg = end + separatorLength;
					}
				}else {
					if (preserveAllTokens) {
						numberOfSubstrings += 1;
						if (numberOfSubstrings == max) {
							end = len;
							substrings.add(str.substring(beg));
						}else {
							substrings.add(org.apache.commons.lang3.StringUtils.EMPTY);
						}
					}
					beg = end + separatorLength;
				}
			}else {
				substrings.add(str.substring(beg));
				end = len;
			}
		} 
		return substrings.toArray(new java.lang.String[substrings.size()]);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, null, (-1), true);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str, char separatorChar) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChar, true);
	}

	private static java.lang.String[] splitWorker(java.lang.String str, char separatorChar, boolean preserveAllTokens) {
		if (str == null) {
			return null;
		}
		int len = str.length();
		if (len == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int i = 0;
		int start = 0;
		boolean match = false;
		boolean lastMatch = false;
		while (i < len) {
			if ((str.charAt(i)) == separatorChar) {
				if (match || preserveAllTokens) {
					list.add(str.substring(start, i));
					match = false;
					lastMatch = true;
				}
				start = ++i;
				continue;
			}
			lastMatch = false;
			match = true;
			i++;
		} 
		if (match || (preserveAllTokens && lastMatch)) {
			list.add(str.substring(start, i));
		}
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str, java.lang.String separatorChars) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, (-1), true);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str, java.lang.String separatorChars, int max) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, true);
	}

	private static java.lang.String[] splitWorker(java.lang.String str, java.lang.String separatorChars, int max, boolean preserveAllTokens) {
		if (str == null) {
			return null;
		}
		int len = str.length();
		if (len == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int sizePlus1 = 1;
		int i = 0;
		int start = 0;
		boolean match = false;
		boolean lastMatch = false;
		if (separatorChars == null) {
			while (i < len) {
				if (java.lang.Character.isWhitespace(str.charAt(i))) {
					if (match || preserveAllTokens) {
						lastMatch = true;
						if ((sizePlus1++) == max) {
							i = len;
							lastMatch = false;
						}
						list.add(str.substring(start, i));
						match = false;
					}
					start = ++i;
					continue;
				}
				lastMatch = false;
				match = true;
				i++;
			} 
		}else
			if ((separatorChars.length()) == 1) {
				char sep = separatorChars.charAt(0);
				while (i < len) {
					if ((str.charAt(i)) == sep) {
						if (match || preserveAllTokens) {
							lastMatch = true;
							if ((sizePlus1++) == max) {
								i = len;
								lastMatch = false;
							}
							list.add(str.substring(start, i));
							match = false;
						}
						start = ++i;
						continue;
					}
					lastMatch = false;
					match = true;
					i++;
				} 
			}else {
				while (i < len) {
					if ((separatorChars.indexOf(str.charAt(i))) >= 0) {
						if (match || preserveAllTokens) {
							lastMatch = true;
							if ((sizePlus1++) == max) {
								i = len;
								lastMatch = false;
							}
							list.add(str.substring(start, i));
							match = false;
						}
						start = ++i;
						continue;
					}
					lastMatch = false;
					match = true;
					i++;
				} 
			}
		
		if (match || (preserveAllTokens && lastMatch)) {
			list.add(str.substring(start, i));
		}
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String[] splitByCharacterType(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, false);
	}

	public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, true);
	}

	private static java.lang.String[] splitByCharacterType(java.lang.String str, boolean camelCase) {
		if (str == null) {
			return null;
		}
		if ((str.length()) == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		char[] c = str.toCharArray();
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int tokenStart = 0;
		int currentType = java.lang.Character.getType(c[tokenStart]);
		for (int pos = tokenStart + 1; pos < (c.length); pos++) {
			int type = java.lang.Character.getType(c[pos]);
			if (type == currentType) {
				continue;
			}
			if ((camelCase && (type == (java.lang.Character.LOWERCASE_LETTER))) && (currentType == (java.lang.Character.UPPERCASE_LETTER))) {
				int newTokenStart = pos - 1;
				if (newTokenStart != tokenStart) {
					list.add(new java.lang.String(c, tokenStart, (newTokenStart - tokenStart)));
					tokenStart = newTokenStart;
				}
			}else {
				list.add(new java.lang.String(c, tokenStart, (pos - tokenStart)));
				tokenStart = pos;
			}
			currentType = type;
		}
		list.add(new java.lang.String(c, tokenStart, ((c.length) - tokenStart)));
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String concat(java.lang.Object... elements) {
		return org.apache.commons.lang3.StringUtils.join(elements, null);
	}

	public static java.lang.String concatWith(java.lang.String separator, java.lang.Object... elements) {
		return org.apache.commons.lang3.StringUtils.join(elements, separator);
	}

	public static java.lang.String join(java.lang.Object[] array) {
		return org.apache.commons.lang3.StringUtils.join(array, null);
	}

	public static java.lang.String join(java.lang.Object[] array, char separator) {
		if (array == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.length);
	}

	public static java.lang.String join(java.lang.Object[] array, char separator, int startIndex, int endIndex) {
		if (array == null) {
			return null;
		}
		int bufSize = endIndex - startIndex;
		if (bufSize <= 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		bufSize *= ((array[startIndex]) == null ? 16 : array[startIndex].toString().length()) + 1;
		java.lang.StringBuilder buf = new java.lang.StringBuilder(bufSize);
		for (int i = startIndex; i < endIndex; i++) {
			if (i > startIndex) {
				buf.append(separator);
			}
			if ((array[i]) != null) {
				buf.append(array[i]);
			}
		}
		return buf.toString();
	}

	public static java.lang.String join(java.lang.Object[] array, java.lang.String separator) {
		if (array == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.length);
	}

	public static java.lang.String join(java.lang.Object[] array, java.lang.String separator, int startIndex, int endIndex) {
		if (array == null) {
			return null;
		}
		if (separator == null) {
			separator = org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int bufSize = endIndex - startIndex;
		if (bufSize <= 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		bufSize *= ((array[startIndex]) == null ? 16 : array[startIndex].toString().length()) + (separator.length());
		java.lang.StringBuilder buf = new java.lang.StringBuilder(bufSize);
		for (int i = startIndex; i < endIndex; i++) {
			if (i > startIndex) {
				buf.append(separator);
			}
			if ((array[i]) != null) {
				buf.append(array[i]);
			}
		}
		return buf.toString();
	}

	public static java.lang.String join(java.util.Iterator<?> iterator, char separator) {
		if (iterator == null) {
			return null;
		}
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		java.lang.Object first = iterator.next();
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.ObjectUtils.toString(first);
		}
		java.lang.StringBuilder buf = new java.lang.StringBuilder(256);
		if (first != null) {
			buf.append(first);
		}
		while (iterator.hasNext()) {
			buf.append(separator);
			java.lang.Object obj = iterator.next();
			if (obj != null) {
				buf.append(obj);
			}
		} 
		return buf.toString();
	}

	public static java.lang.String join(java.util.Iterator<?> iterator, java.lang.String separator) {
		if (iterator == null) {
			return null;
		}
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		java.lang.Object first = iterator.next();
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.ObjectUtils.toString(first);
		}
		java.lang.StringBuilder buf = new java.lang.StringBuilder(256);
		if (first != null) {
			buf.append(first);
		}
		while (iterator.hasNext()) {
			if (separator != null) {
				buf.append(separator);
			}
			java.lang.Object obj = iterator.next();
			if (obj != null) {
				buf.append(obj);
			}
		} 
		return buf.toString();
	}

	public static java.lang.String join(java.lang.Iterable<?> iterable, char separator) {
		if (iterable == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(iterable.iterator(), separator);
	}

	public static java.lang.String join(java.lang.Iterable<?> iterable, java.lang.String separator) {
		if (iterable == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(iterable.iterator(), separator);
	}

	public static java.lang.String deleteWhitespace(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		int sz = str.length();
		char[] chs = new char[sz];
		int count = 0;
		for (int i = 0; i < sz; i++) {
			if (!(java.lang.Character.isWhitespace(str.charAt(i)))) {
				chs[(count++)] = str.charAt(i);
			}
		}
		if (count == sz) {
			return str;
		}
		return new java.lang.String(chs, 0, count);
	}

	public static java.lang.String removeStart(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (str.startsWith(remove)) {
			return str.substring(remove.length());
		}
		return str;
	}

	public static java.lang.String removeStartIgnoreCase(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(str, remove)) {
			return str.substring(remove.length());
		}
		return str;
	}

	public static java.lang.String removeEnd(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (str.endsWith(remove)) {
			return str.substring(0, ((str.length()) - (remove.length())));
		}
		return str;
	}

	public static java.lang.String removeEndIgnoreCase(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(str, remove)) {
			return str.substring(0, ((str.length()) - (remove.length())));
		}
		return str;
	}

	public static java.lang.String remove(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		return org.apache.commons.lang3.StringUtils.replace(str, remove, org.apache.commons.lang3.StringUtils.EMPTY, (-1));
	}

	public static java.lang.String remove(java.lang.String str, char remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || ((str.indexOf(remove)) == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND))) {
			return str;
		}
		char[] chars = str.toCharArray();
		int pos = 0;
		for (int i = 0; i < (chars.length); i++) {
			if ((chars[i]) != remove) {
				chars[(pos++)] = chars[i];
			}
		}
		return new java.lang.String(chars, 0, pos);
	}

	public static java.lang.String replaceOnce(java.lang.String text, java.lang.String searchString, java.lang.String replacement) {
		return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, 1);
	}

	public static java.lang.String replace(java.lang.String text, java.lang.String searchString, java.lang.String replacement) {
		return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, (-1));
	}

	public static java.lang.String replace(java.lang.String text, java.lang.String searchString, java.lang.String replacement, int max) {
		if ((((org.apache.commons.lang3.StringUtils.isEmpty(text)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchString))) || (replacement == null)) || (max == 0)) {
			return text;
		}
		int start = 0;
		int end = text.indexOf(searchString, start);
		if (end == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return text;
		}
		int replLength = searchString.length();
		int increase = (replacement.length()) - replLength;
		increase = (increase < 0) ? 0 : increase;
		increase *= (max < 0) ? 16 : max > 64 ? 64 : max;
		java.lang.StringBuilder buf = new java.lang.StringBuilder(((text.length()) + increase));
		while (end != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			buf.append(text.substring(start, end)).append(replacement);
			start = end + replLength;
			if ((--max) == 0) {
				break;
			}
			end = text.indexOf(searchString, start);
		} 
		buf.append(text.substring(start));
		return buf.toString();
	}

	public static java.lang.String replaceEach(java.lang.String text, java.lang.String[] searchList, java.lang.String[] replacementList) {
		return org.apache.commons.lang3.StringUtils.replaceEach(text, searchList, replacementList, false, 0);
	}

	public static java.lang.String replaceEachRepeatedly(java.lang.String text, java.lang.String[] searchList, java.lang.String[] replacementList) {
		int timeToLive = (searchList == null) ? 0 : searchList.length;
		return org.apache.commons.lang3.StringUtils.replaceEach(text, searchList, replacementList, true, timeToLive);
	}

	private static java.lang.String replaceEach(java.lang.String text, java.lang.String[] searchList, java.lang.String[] replacementList, boolean repeat, int timeToLive) {
		if ((((((text == null) || ((text.length()) == 0)) || (searchList == null)) || ((searchList.length) == 0)) || (replacementList == null)) || ((replacementList.length) == 0)) {
			return text;
		}
		if (timeToLive < 0) {
			throw new java.lang.IllegalStateException(((("TimeToLive of " + timeToLive) + " is less than 0: ") + text));
		}
		int searchLength = searchList.length;
		int replacementLength = replacementList.length;
		if (searchLength != replacementLength) {
			throw new java.lang.IllegalArgumentException(((("Search and Replace array lengths don't match: " + searchLength) + " vs ") + replacementLength));
		}
		boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
		int textIndex = -1;
		int replaceIndex = -1;
		int tempIndex = -1;
		for (int i = 0; i < searchLength; i++) {
			if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || ((searchList[i].length()) == 0)) || ((replacementList[i]) == null)) {
				continue;
			}
			tempIndex = text.indexOf(searchList[i]);
			if (tempIndex == (-1)) {
				noMoreMatchesForReplIndex[i] = true;
			}else {
				if ((textIndex == (-1)) || (tempIndex < textIndex)) {
					textIndex = tempIndex;
					replaceIndex = i;
				}
			}
		}
		if (textIndex == (-1)) {
			return text;
		}
		int start = 0;
		int increase = 0;
		for (int i = 0; i < (searchList.length); i++) {
			if (((searchList[i]) == null) || ((replacementList[i]) == null)) {
				continue;
			}
			int greater = (replacementList[i].length()) - (searchList[i].length());
			if (greater > 0) {
				increase += 3 * greater;
			}
		}
		increase = java.lang.Math.min(increase, ((text.length()) / 5));
		java.lang.StringBuilder buf = new java.lang.StringBuilder(((text.length()) + increase));
		while (textIndex != (-1)) {
			for (int i = start; i < textIndex; i++) {
				buf.append(text.charAt(i));
			}
			buf.append(replacementList[replaceIndex]);
			start = textIndex + (searchList[replaceIndex].length());
			textIndex = -1;
			replaceIndex = -1;
			tempIndex = -1;
			for (int i = 0; i < searchLength; i++) {
				if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || ((searchList[i].length()) == 0)) || ((replacementList[i]) == null)) {
					continue;
				}
				tempIndex = text.indexOf(searchList[i], start);
				if (tempIndex == (-1)) {
					noMoreMatchesForReplIndex[i] = true;
				}else {
					if ((textIndex == (-1)) || (tempIndex < textIndex)) {
						textIndex = tempIndex;
						replaceIndex = i;
					}
				}
			}
		} 
		int textLength = text.length();
		for (int i = start; i < textLength; i++) {
			buf.append(text.charAt(i));
		}
		java.lang.String result = buf.toString();
		if (!repeat) {
			return result;
		}
		return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));
	}

	public static java.lang.String replaceChars(java.lang.String str, char searchChar, char replaceChar) {
		if (str == null) {
			return null;
		}
		return str.replace(searchChar, replaceChar);
	}

	public static java.lang.String replaceChars(java.lang.String str, java.lang.String searchChars, java.lang.String replaceChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {
			return str;
		}
		if (replaceChars == null) {
			replaceChars = org.apache.commons.lang3.StringUtils.EMPTY;
		}
		boolean modified = false;
		int replaceCharsLength = replaceChars.length();
		int strLength = str.length();
		java.lang.StringBuilder buf = new java.lang.StringBuilder(strLength);
		for (int i = 0; i < strLength; i++) {
			char ch = str.charAt(i);
			int index = searchChars.indexOf(ch);
			if (index >= 0) {
				modified = true;
				if (index < replaceCharsLength) {
					buf.append(replaceChars.charAt(index));
				}
			}else {
				buf.append(ch);
			}
		}
		if (modified) {
			return buf.toString();
		}
		return str;
	}

	public static java.lang.String overlay(java.lang.String str, java.lang.String overlay, int start, int end) {
		if (str == null) {
			return null;
		}
		if (overlay == null) {
			overlay = org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int len = str.length();
		if (start < 0) {
			start = 0;
		}
		if (start > len) {
			start = len;
		}
		if (end < 0) {
			end = 0;
		}
		if (end > len) {
			end = len;
		}
		if (start > end) {
			int temp = start;
			start = end;
			end = temp;
		}
		return new java.lang.StringBuilder(((((len + start) - end) + (overlay.length())) + 1)).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();
	}

	public static java.lang.String chomp(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		if ((str.length()) == 1) {
			char ch = str.charAt(0);
			if ((ch == (org.apache.commons.lang3.CharUtils.CR)) || (ch == (org.apache.commons.lang3.CharUtils.LF))) {
				return org.apache.commons.lang3.StringUtils.EMPTY;
			}
			return str;
		}
		int lastIdx = (str.length()) - 1;
		char last = str.charAt(lastIdx);
		if (last == (org.apache.commons.lang3.CharUtils.LF)) {
			if ((str.charAt((lastIdx - 1))) == (org.apache.commons.lang3.CharUtils.CR)) {
				lastIdx--;
			}
		}else
			if (last != (org.apache.commons.lang3.CharUtils.CR)) {
				lastIdx++;
			}
		
		return str.substring(0, lastIdx);
	}

	public static java.lang.String chomp(java.lang.String str, java.lang.String separator) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {
			return str;
		}
		if (str.endsWith(separator)) {
			return str.substring(0, ((str.length()) - (separator.length())));
		}
		return str;
	}

	public static java.lang.String chop(java.lang.String str) {
		if (str == null) {
			return null;
		}
		int strLen = str.length();
		if (strLen < 2) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int lastIdx = strLen - 1;
		java.lang.String ret = str.substring(0, lastIdx);
		char last = str.charAt(lastIdx);
		if (last == (org.apache.commons.lang3.CharUtils.LF)) {
			if ((ret.charAt((lastIdx - 1))) == (org.apache.commons.lang3.CharUtils.CR)) {
				return ret.substring(0, (lastIdx - 1));
			}
		}
		return ret;
	}

	public static java.lang.String repeat(java.lang.String str, int repeat) {
		if (str == null) {
			return null;
		}
		if (repeat <= 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int inputLength = str.length();
		if ((repeat == 1) || (inputLength == 0)) {
			return str;
		}
		if ((inputLength == 1) && (repeat <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))) {
			return org.apache.commons.lang3.StringUtils.padding(repeat, str.charAt(0));
		}
		int outputLength = inputLength * repeat;
		switch (inputLength) {
			case 1 :
				char ch = str.charAt(0);
				char[] output1 = new char[outputLength];
				for (int i = repeat - 1; i >= 0; i--) {
					output1[i] = ch;
				}
				return new java.lang.String(output1);
			case 2 :
				char ch0 = str.charAt(0);
				char ch1 = str.charAt(1);
				char[] output2 = new char[outputLength];
				for (int i = (repeat * 2) - 2; i >= 0; i-- , i--) {
					output2[i] = ch0;
					output2[(i + 1)] = ch1;
				}
				return new java.lang.String(output2);
			default :
				java.lang.StringBuilder buf = new java.lang.StringBuilder(outputLength);
				for (int i = 0; i < repeat; i++) {
					buf.append(str);
				}
				return buf.toString();
		}
	}

	public static java.lang.String repeat(java.lang.String str, java.lang.String separator, int repeat) {
		if ((str == null) || (separator == null)) {
			return org.apache.commons.lang3.StringUtils.repeat(str, repeat);
		}else {
			java.lang.String result = org.apache.commons.lang3.StringUtils.repeat((str + separator), repeat);
			return org.apache.commons.lang3.StringUtils.removeEnd(result, separator);
		}
	}

	private static java.lang.String padding(int repeat, char padChar) throws java.lang.IndexOutOfBoundsException {
		if (repeat < 0) {
			throw new java.lang.IndexOutOfBoundsException(("Cannot pad a negative amount: " + repeat));
		}
		final char[] buf = new char[repeat];
		for (int i = 0; i < (buf.length); i++) {
			buf[i] = padChar;
		}
		return new java.lang.String(buf);
	}

	public static java.lang.String rightPad(java.lang.String str, int size) {
		return org.apache.commons.lang3.StringUtils.rightPad(str, size, ' ');
	}

	public static java.lang.String rightPad(java.lang.String str, int size, char padChar) {
		if (str == null) {
			return null;
		}
		int pads = size - (str.length());
		if (pads <= 0) {
			return str;
		}
		if (pads > (org.apache.commons.lang3.StringUtils.PAD_LIMIT)) {
			return org.apache.commons.lang3.StringUtils.rightPad(str, size, java.lang.String.valueOf(padChar));
		}
		return str.concat(org.apache.commons.lang3.StringUtils.padding(pads, padChar));
	}

	public static java.lang.String rightPad(java.lang.String str, int size, java.lang.String padStr) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {
			padStr = " ";
		}
		int padLen = padStr.length();
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))) {
			return org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr.charAt(0));
		}
		if (pads == padLen) {
			return str.concat(padStr);
		}else
			if (pads < padLen) {
				return str.concat(padStr.substring(0, pads));
			}else {
				char[] padding = new char[pads];
				char[] padChars = padStr.toCharArray();
				for (int i = 0; i < pads; i++) {
					padding[i] = padChars[(i % padLen)];
				}
				return str.concat(new java.lang.String(padding));
			}
		
	}

	public static java.lang.String leftPad(java.lang.String str, int size) {
		return org.apache.commons.lang3.StringUtils.leftPad(str, size, ' ');
	}

	public static java.lang.String leftPad(java.lang.String str, int size, char padChar) {
		if (str == null) {
			return null;
		}
		int pads = size - (str.length());
		if (pads <= 0) {
			return str;
		}
		if (pads > (org.apache.commons.lang3.StringUtils.PAD_LIMIT)) {
			return org.apache.commons.lang3.StringUtils.leftPad(str, size, java.lang.String.valueOf(padChar));
		}
		return org.apache.commons.lang3.StringUtils.padding(pads, padChar).concat(str);
	}

	public static java.lang.String leftPad(java.lang.String str, int size, java.lang.String padStr) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {
			padStr = " ";
		}
		int padLen = padStr.length();
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))) {
			return org.apache.commons.lang3.StringUtils.leftPad(str, size, padStr.charAt(0));
		}
		if (pads == padLen) {
			return padStr.concat(str);
		}else
			if (pads < padLen) {
				return padStr.substring(0, pads).concat(str);
			}else {
				char[] padding = new char[pads];
				char[] padChars = padStr.toCharArray();
				for (int i = 0; i < pads; i++) {
					padding[i] = padChars[(i % padLen)];
				}
				return new java.lang.String(padding).concat(str);
			}
		
	}

	@java.lang.Deprecated
	public static int length(java.lang.CharSequence cs) {
		return org.apache.commons.lang3.CharSequenceUtils.length(cs);
	}

	public static java.lang.String center(java.lang.String str, int size) {
		return org.apache.commons.lang3.StringUtils.center(str, size, ' ');
	}

	public static java.lang.String center(java.lang.String str, int size, char padChar) {
		if ((str == null) || (size <= 0)) {
			return str;
		}
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padChar);
		str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padChar);
		return str;
	}

	public static java.lang.String center(java.lang.String str, int size, java.lang.String padStr) {
		if ((str == null) || (size <= 0)) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {
			padStr = " ";
		}
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padStr);
		str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr);
		return str;
	}

	public static java.lang.String upperCase(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return str.toUpperCase();
	}

	public static java.lang.String upperCase(java.lang.String str, java.util.Locale locale) {
		if (str == null) {
			return null;
		}
		return str.toUpperCase(locale);
	}

	public static java.lang.String lowerCase(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return str.toLowerCase();
	}

	public static java.lang.String lowerCase(java.lang.String str, java.util.Locale locale) {
		if (str == null) {
			return null;
		}
		return str.toLowerCase(locale);
	}

	public static java.lang.String capitalize(java.lang.CharSequence cs) {
		if (cs == null) {
			return null;
		}
		int strLen;
		if ((strLen = cs.length()) == 0) {
			return cs.toString();
		}
		return new java.lang.StringBuilder(strLen).append(java.lang.Character.toTitleCase(cs.charAt(0))).append(org.apache.commons.lang3.CharSequenceUtils.subSequence(cs, 1)).toString();
	}

	public static java.lang.String uncapitalize(java.lang.CharSequence cs) {
		if (cs == null) {
			return null;
		}
		int strLen;
		if ((strLen = cs.length()) == 0) {
			return cs.toString();
		}
		return new java.lang.StringBuilder(strLen).append(java.lang.Character.toLowerCase(cs.charAt(0))).append(org.apache.commons.lang3.CharSequenceUtils.subSequence(cs, 1)).toString();
	}

	public static java.lang.String swapCase(java.lang.String str) {
		int strLen;
		if ((str == null) || ((strLen = str.length()) == 0)) {
			return str;
		}
		java.lang.StringBuilder buffer = new java.lang.StringBuilder(strLen);
		char ch = 0;
		for (int i = 0; i < strLen; i++) {
			ch = str.charAt(i);
			if (java.lang.Character.isUpperCase(ch)) {
				ch = java.lang.Character.toLowerCase(ch);
			}else
				if (java.lang.Character.isTitleCase(ch)) {
					ch = java.lang.Character.toLowerCase(ch);
				}else
					if (java.lang.Character.isLowerCase(ch)) {
						ch = java.lang.Character.toUpperCase(ch);
					}
				
			
			buffer.append(ch);
		}
		return buffer.toString();
	}

	public static int countMatches(java.lang.String str, java.lang.String sub) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(sub))) {
			return 0;
		}
		int count = 0;
		int idx = 0;
		while ((idx = str.indexOf(sub, idx)) != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			count++;
			idx += sub.length();
		} 
		return count;
	}

	public static boolean isAlpha(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isLetter(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAlphaSpace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if (((java.lang.Character.isLetter(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAlphanumeric(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isLetterOrDigit(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAlphanumericSpace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if (((java.lang.Character.isLetterOrDigit(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAsciiPrintable(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((org.apache.commons.lang3.CharUtils.isAsciiPrintable(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumeric(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isDigit(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumericSpace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if (((java.lang.Character.isDigit(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {
				return false;
			}
		}
		return true;
	}

	public static boolean isWhitespace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isWhitespace(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAllLowerCase(java.lang.CharSequence cs) {
		if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isLowerCase(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAllUpperCase(java.lang.CharSequence cs) {
		if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isUpperCase(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static java.lang.String defaultString(java.lang.String str) {
		return str == null ? org.apache.commons.lang3.StringUtils.EMPTY : str;
	}

	public static java.lang.String defaultString(java.lang.String str, java.lang.String defaultStr) {
		return str == null ? defaultStr : str;
	}

	public static <T extends java.lang.CharSequence> T defaultIfEmpty(T str, T defaultStr) {
		return org.apache.commons.lang3.StringUtils.isEmpty(str) ? defaultStr : str;
	}

	public static java.lang.String reverse(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.lang.StringBuilder(str).reverse().toString();
	}

	public static java.lang.String reverseDelimited(java.lang.String str, char separatorChar) {
		if (str == null) {
			return null;
		}
		java.lang.String[] strs = org.apache.commons.lang3.StringUtils.split(str, separatorChar);
		org.apache.commons.lang3.ArrayUtils.reverse(strs);
		return org.apache.commons.lang3.StringUtils.join(strs, separatorChar);
	}

	public static java.lang.String abbreviate(java.lang.String str, int maxWidth) {
		return org.apache.commons.lang3.StringUtils.abbreviate(str, 0, maxWidth);
	}

	public static java.lang.String abbreviate(java.lang.String str, int offset, int maxWidth) {
		if (str == null) {
			return null;
		}
		if (maxWidth < 4) {
			throw new java.lang.IllegalArgumentException("Minimum abbreviation width is 4");
		}
		if ((str.length()) <= maxWidth) {
			return str;
		}
		if (offset > (str.length())) {
			offset = str.length();
		}
		if (((str.length()) - offset) < (maxWidth - 3)) {
			offset = (str.length()) - (maxWidth - 3);
		}
		final java.lang.String abrevMarker = "...";
		if (offset <= 4) {
			return (str.substring(0, (maxWidth - 3))) + abrevMarker;
		}
		if (maxWidth < 7) {
			throw new java.lang.IllegalArgumentException("Minimum abbreviation width with offset is 7");
		}
		if ((offset + (maxWidth - 3)) < (str.length())) {
			return abrevMarker + (org.apache.commons.lang3.StringUtils.abbreviate(str.substring(offset), (maxWidth - 3)));
		}
		return abrevMarker + (str.substring(((str.length()) - (maxWidth - 3))));
	}

	public static java.lang.String abbreviateMiddle(java.lang.String str, java.lang.String middle, int length) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(middle))) {
			return str;
		}
		if ((length >= (str.length())) || (length < ((middle.length()) + 2))) {
			return str;
		}
		int targetSting = length - (middle.length());
		int startOffset = (targetSting / 2) + (targetSting % 2);
		int endOffset = (str.length()) - (targetSting / 2);
		java.lang.StringBuilder builder = new java.lang.StringBuilder(length);
		builder.append(str.substring(0, startOffset));
		builder.append(middle);
		builder.append(str.substring(endOffset));
		return builder.toString();
	}

	public static java.lang.String difference(java.lang.String str1, java.lang.String str2) {
		if (str1 == null) {
			return str2;
		}
		if (str2 == null) {
			return str1;
		}
		int at = org.apache.commons.lang3.StringUtils.indexOfDifference(str1, str2);
		if (at == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str2.substring(at);
	}

	public static int indexOfDifference(java.lang.CharSequence cs1, java.lang.CharSequence cs2) {
		if (cs1 == cs2) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((cs1 == null) || (cs2 == null)) {
			return 0;
		}
		int i;
		for (i = 0; (i < (cs1.length())) && (i < (cs2.length())); ++i) {
			if ((cs1.charAt(i)) != (cs2.charAt(i))) {
				break;
			}
		}
		if ((i < (cs2.length())) || (i < (cs1.length()))) {
			return i;
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int indexOfDifference(java.lang.CharSequence... css) {
		if ((css == null) || ((css.length) <= 1)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		boolean anyStringNull = false;
		boolean allStringsNull = true;
		int arrayLen = css.length;
		int shortestStrLen = java.lang.Integer.MAX_VALUE;
		int longestStrLen = 0;
		for (int i = 0; i < arrayLen; i++) {
			if ((css[i]) == null) {
				anyStringNull = true;
				shortestStrLen = 0;
			}else {
				allStringsNull = false;
				shortestStrLen = java.lang.Math.min(css[i].length(), shortestStrLen);
				longestStrLen = java.lang.Math.max(css[i].length(), longestStrLen);
			}
		}
		if (allStringsNull || ((longestStrLen == 0) && (!anyStringNull))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if (shortestStrLen == 0) {
			return 0;
		}
		int firstDiff = -1;
		for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
			char comparisonChar = css[0].charAt(stringPos);
			for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
				if ((css[arrayPos].charAt(stringPos)) != comparisonChar) {
					firstDiff = stringPos;
					break;
				}
			}
			if (firstDiff != (-1)) {
				break;
			}
		}
		if ((firstDiff == (-1)) && (shortestStrLen != longestStrLen)) {
			return shortestStrLen;
		}
		return firstDiff;
	}

	public static java.lang.String getCommonPrefix(java.lang.String... strs) {
		if ((strs == null) || ((strs.length) == 0)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int smallestIndexOfDiff = org.apache.commons.lang3.StringUtils.indexOfDifference(strs);
		if (smallestIndexOfDiff == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			if ((strs[0]) == null) {
				return org.apache.commons.lang3.StringUtils.EMPTY;
			}
			return strs[0];
		}else
			if (smallestIndexOfDiff == 0) {
				return org.apache.commons.lang3.StringUtils.EMPTY;
			}else {
				return strs[0].substring(0, smallestIndexOfDiff);
			}
		
	}

	public static int getLevenshteinDistance(java.lang.CharSequence s, java.lang.CharSequence t) {
		if ((s == null) || (t == null)) {
			throw new java.lang.IllegalArgumentException("Strings must not be null");
		}
		int n = s.length();
		int m = t.length();
		if (n == 0) {
			return m;
		}else
			if (m == 0) {
				return n;
			}
		
		if (n > m) {
			java.lang.CharSequence tmp = s;
			s = t;
			t = tmp;
			n = m;
			m = t.length();
		}
		int[] p = new int[n + 1];
		int[] d = new int[n + 1];
		int[] _d;
		int i;
		int j;
		char t_j;
		int cost;
		for (i = 0; i <= n; i++) {
			p[i] = i;
		}
		for (j = 1; j <= m; j++) {
			t_j = t.charAt((j - 1));
			d[0] = j;
			for (i = 1; i <= n; i++) {
				cost = ((s.charAt((i - 1))) == t_j) ? 0 : 1;
				d[i] = java.lang.Math.min(java.lang.Math.min(((d[(i - 1)]) + 1), ((p[i]) + 1)), ((p[(i - 1)]) + cost));
			}
			_d = p;
			p = d;
			d = _d;
		}
		return p[n];
	}

	public static boolean startsWith(java.lang.String str, java.lang.String prefix) {
		return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, false);
	}

	public static boolean startsWithIgnoreCase(java.lang.String str, java.lang.String prefix) {
		return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, true);
	}

	private static boolean startsWith(java.lang.String str, java.lang.String prefix, boolean ignoreCase) {
		if ((str == null) || (prefix == null)) {
			return (str == null) && (prefix == null);
		}
		if ((prefix.length()) > (str.length())) {
			return false;
		}
		return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());
	}

	public static boolean startsWithAny(java.lang.String string, java.lang.String... searchStrings) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(string)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchStrings))) {
			return false;
		}
		for (int i = 0; i < (searchStrings.length); i++) {
			java.lang.String searchString = searchStrings[i];
			if (org.apache.commons.lang3.StringUtils.startsWith(string, searchString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean endsWith(java.lang.String str, java.lang.String suffix) {
		return org.apache.commons.lang3.StringUtils.endsWith(str, suffix, false);
	}

	public static boolean endsWithIgnoreCase(java.lang.String str, java.lang.String suffix) {
		return org.apache.commons.lang3.StringUtils.endsWith(str, suffix, true);
	}

	private static boolean endsWith(java.lang.String str, java.lang.String suffix, boolean ignoreCase) {
		if ((str == null) || (suffix == null)) {
			return (str == null) && (suffix == null);
		}
		if ((suffix.length()) > (str.length())) {
			return false;
		}
		int strOffset = (str.length()) - (suffix.length());
		return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());
	}
}
2019-04-14 13:53:52,838 ERROR main - Undo Error: modified: 
public class StringUtils {
	public static final java.lang.String EMPTY = "";

	public static final int INDEX_NOT_FOUND = -1;

	private static final int PAD_LIMIT = 8192;

	public StringUtils() {
		super();
	}

	public static boolean isEmpty(java.lang.CharSequence cs) {
		return (cs == null) || ((cs.length()) == 0);
	}

	public static boolean isNotEmpty(java.lang.CharSequence cs) {
		return !(org.apache.commons.lang3.StringUtils.isEmpty(cs));
	}

	public static boolean isBlank(java.lang.CharSequence cs) {
		int strLen;
		if ((cs == null) || ((strLen = cs.length()) == 0)) {
			return true;
		}
		for (int i = 0; i < strLen; i++) {
			if ((java.lang.Character.isWhitespace(cs.charAt(i))) == false)
				return false;
			
		}
		return true;
	}

	public static boolean isNotBlank(java.lang.CharSequence cs) {
		return !(org.apache.commons.lang3.StringUtils.isBlank(cs));
	}

	public static java.lang.String trim(java.lang.String str) {
		return str == null ? null : str.trim();
	}

	public static java.lang.String trimToNull(java.lang.String str) {
		java.lang.String ts = org.apache.commons.lang3.StringUtils.trim(str);
		return org.apache.commons.lang3.StringUtils.isEmpty(ts) ? null : ts;
	}

	public static java.lang.String trimToEmpty(java.lang.String str) {
		return str == null ? org.apache.commons.lang3.StringUtils.EMPTY : str.trim();
	}

	public static java.lang.String strip(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.strip(str, null);
	}

	public static java.lang.String stripToNull(java.lang.String str) {
		if (str == null) {
			return null;
		}
		str = org.apache.commons.lang3.StringUtils.strip(str, null);
		return (str.length()) == 0 ? null : str;
	}

	public static java.lang.String stripToEmpty(java.lang.String str) {
		return str == null ? org.apache.commons.lang3.StringUtils.EMPTY : org.apache.commons.lang3.StringUtils.strip(str, null);
	}

	public static java.lang.String strip(java.lang.String str, java.lang.String stripChars) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		str = org.apache.commons.lang3.StringUtils.stripStart(str, stripChars);
		return org.apache.commons.lang3.StringUtils.stripEnd(str, stripChars);
	}

	public static java.lang.String stripStart(java.lang.String str, java.lang.String stripChars) {
		int strLen;
		if ((str == null) || ((strLen = str.length()) == 0)) {
			return str;
		}
		int start = 0;
		if (stripChars == null) {
			while ((start != strLen) && (java.lang.Character.isWhitespace(str.charAt(start)))) {
				start++;
			} 
		}else
			if ((stripChars.length()) == 0) {
				return str;
			}else {
				while ((start != strLen) && ((stripChars.indexOf(str.charAt(start))) != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND))) {
					start++;
				} 
			}
		
		return str.substring(start);
	}

	public static java.lang.String stripEnd(java.lang.String str, java.lang.String stripChars) {
		int end;
		if ((str == null) || ((end = str.length()) == 0)) {
			return str;
		}
		if (stripChars == null) {
			while ((end != 0) && (java.lang.Character.isWhitespace(str.charAt((end - 1))))) {
				end--;
			} 
		}else
			if ((stripChars.length()) == 0) {
				return str;
			}else {
				while ((end != 0) && ((stripChars.indexOf(str.charAt((end - 1)))) != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND))) {
					end--;
				} 
			}
		
		return str.substring(0, end);
	}

	public static java.lang.String[] stripAll(java.lang.String[] strs) {
		return org.apache.commons.lang3.StringUtils.stripAll(strs, null);
	}

	public static java.lang.String[] stripAll(java.lang.String[] strs, java.lang.String stripChars) {
		int strsLen;
		if ((strs == null) || ((strsLen = strs.length) == 0)) {
			return strs;
		}
		java.lang.String[] newArr = new java.lang.String[strsLen];
		for (int i = 0; i < strsLen; i++) {
			newArr[i] = org.apache.commons.lang3.StringUtils.strip(strs[i], stripChars);
		}
		return newArr;
	}

	public static java.lang.String stripAccents(java.lang.String input) {
		if (input == null) {
			return null;
		}
		if (org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(1.6F)) {
			try {
				java.lang.Class<?> normalizerFormClass = org.apache.commons.lang3.ClassUtils.getClass("java.text.Normalizer$Form", false);
				java.lang.Class<?> normalizerClass = org.apache.commons.lang3.ClassUtils.getClass("java.text.Normalizer", false);
				java.lang.reflect.Method method = normalizerClass.getMethod("normalize", java.lang.CharSequence.class, normalizerFormClass);
				java.lang.reflect.Field nfd = normalizerFormClass.getField("NFD");
				java.lang.String decomposed = ((java.lang.String) (method.invoke(null, input, nfd.get(null))));
				java.util.regex.Pattern accentPattern = java.util.regex.Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
				return accentPattern.matcher(decomposed).replaceAll("");
			} catch (java.lang.ClassNotFoundException cnfe) {
				throw new java.lang.RuntimeException("ClassNotFoundException occurred during 1.6 backcompat code", cnfe);
			} catch (java.lang.NoSuchMethodException nsme) {
				throw new java.lang.RuntimeException("NoSuchMethodException occurred during 1.6 backcompat code", nsme);
			} catch (java.lang.NoSuchFieldException nsfe) {
				throw new java.lang.RuntimeException("NoSuchFieldException occurred during 1.6 backcompat code", nsfe);
			} catch (java.lang.IllegalAccessException iae) {
				throw new java.lang.RuntimeException("IllegalAccessException occurred during 1.6 backcompat code", iae);
			} catch (java.lang.IllegalArgumentException iae) {
				throw new java.lang.RuntimeException("IllegalArgumentException occurred during 1.6 backcompat code", iae);
			} catch (java.lang.reflect.InvocationTargetException ite) {
				throw new java.lang.RuntimeException("InvocationTargetException occurred during 1.6 backcompat code", ite);
			} catch (java.lang.SecurityException se) {
				throw new java.lang.RuntimeException("SecurityException occurred during 1.6 backcompat code", se);
			}
		}else {
			throw new java.lang.UnsupportedOperationException("The stripAccents(String) method is not supported until Java 1.6");
		}
	}

	public static boolean equals(java.lang.CharSequence cs1, java.lang.CharSequence cs2) {
		return cs1 == null ? cs2 == null : cs1.equals(cs2);
	}

	public static boolean equalsIgnoreCase(java.lang.String str1, java.lang.String str2) {
		return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);
	}

	public static int indexOf(java.lang.String str, int searchChar) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchChar);
	}

	public static int indexOf(java.lang.String str, int searchChar, int startPos) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchChar, startPos);
	}

	public static int indexOf(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchStr);
	}

	public static int indexOf(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.indexOf(searchStr, startPos);
	}

	public static int ordinalIndexOf(java.lang.String str, java.lang.String searchStr, int ordinal) {
		return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, false);
	}

	private static int ordinalIndexOf(java.lang.String str, java.lang.String searchStr, int ordinal, boolean lastIndex) {
		if (((str == null) || (searchStr == null)) || (ordinal <= 0)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((searchStr.length()) == 0) {
			return lastIndex ? str.length() : 0;
		}
		int found = 0;
		int index = (lastIndex) ? str.length() : org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		do {
			if (lastIndex) {
				index = str.lastIndexOf(searchStr, (index - 1));
			}else {
				index = str.indexOf(searchStr, (index + 1));
			}
			if (index < 0) {
				return index;
			}
			found++;
		} while (found < ordinal );
		return index;
	}

	public static int indexOfIgnoreCase(java.lang.String str, java.lang.String searchStr) {
		return org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(str, searchStr, 0);
	}

	public static int indexOfIgnoreCase(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if (startPos < 0) {
			startPos = 0;
		}
		int endLimit = ((str.length()) - (searchStr.length())) + 1;
		if (startPos > endLimit) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((searchStr.length()) == 0) {
			return startPos;
		}
		for (int i = startPos; i < endLimit; i++) {
			if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
				return i;
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int lastIndexOf(java.lang.String str, int searchChar) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchChar);
	}

	public static int lastIndexOf(java.lang.String str, int searchChar, int startPos) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchChar, startPos);
	}

	public static int lastIndexOf(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchStr);
	}

	public static int lastOrdinalIndexOf(java.lang.String str, java.lang.String searchStr, int ordinal) {
		return org.apache.commons.lang3.StringUtils.ordinalIndexOf(str, searchStr, ordinal, true);
	}

	public static int lastIndexOf(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return str.lastIndexOf(searchStr, startPos);
	}

	public static int lastIndexOfIgnoreCase(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(str, searchStr, str.length());
	}

	public static int lastIndexOfIgnoreCase(java.lang.String str, java.lang.String searchStr, int startPos) {
		if ((str == null) || (searchStr == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if (startPos > ((str.length()) - (searchStr.length()))) {
			startPos = (str.length()) - (searchStr.length());
		}
		if (startPos < 0) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((searchStr.length()) == 0) {
			return startPos;
		}
		for (int i = startPos; i >= 0; i--) {
			if (str.regionMatches(true, i, searchStr, 0, searchStr.length())) {
				return i;
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static boolean contains(java.lang.String str, int searchChar) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		return (str.indexOf(searchChar)) >= 0;
	}

	public static boolean contains(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return false;
		}
		return (str.indexOf(searchStr)) >= 0;
	}

	public static boolean containsIgnoreCase(java.lang.String str, java.lang.String searchStr) {
		if ((str == null) || (searchStr == null)) {
			return false;
		}
		int len = searchStr.length();
		int max = (str.length()) - len;
		for (int i = 0; i <= max; i++) {
			if (str.regionMatches(true, i, searchStr, 0, len)) {
				return true;
			}
		}
		return false;
	}

	public static boolean containsWhitespace(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		int strLen = str.length();
		for (int i = 0; i < strLen; i++) {
			if (java.lang.Character.isWhitespace(str.charAt(i))) {
				return true;
			}
		}
		return false;
	}

	public static int indexOfAny(java.lang.CharSequence cs, char[] searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int csLen = cs.length();
		int csLast = csLen - 1;
		int searchLen = searchChars.length;
		int searchLast = searchLen - 1;
		for (int i = 0; i < csLen; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLen; j++) {
				if ((searchChars[j]) == ch) {
					if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {
						if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {
							return i;
						}
					}else {
						return i;
					}
				}
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int indexOfAny(java.lang.CharSequence cs, java.lang.String searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		return org.apache.commons.lang3.StringUtils.indexOfAny(cs, searchChars.toCharArray());
	}

	public static boolean containsAny(java.lang.String cs, char[] searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {
			return false;
		}
		int csLength = cs.length();
		int searchLength = searchChars.length;
		int csLast = csLength - 1;
		int searchLast = searchLength - 1;
		for (int i = 0; i < csLength; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLength; j++) {
				if ((searchChars[j]) == ch) {
					if (java.lang.Character.isHighSurrogate(ch)) {
						if (j == searchLast) {
							return true;
						}
						if ((i < csLast) && ((searchChars[(j + 1)]) == (cs.charAt((i + 1))))) {
							return true;
						}
					}else {
						return true;
					}
				}
			}
		}
		return false;
	}

	public static boolean containsAny(java.lang.String cs, java.lang.String searchChars) {
		if (searchChars == null) {
			return false;
		}
		return org.apache.commons.lang3.StringUtils.containsAny(cs, searchChars.toCharArray());
	}

	public static int indexOfAnyBut(java.lang.CharSequence cs, char[] searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(cs)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int csLen = cs.length();
		int csLast = csLen - 1;
		int searchLen = searchChars.length;
		int searchLast = searchLen - 1;
		outer : for (int i = 0; i < csLen; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLen; j++) {
				if ((searchChars[j]) == ch) {
					if (((i < csLast) && (j < searchLast)) && (java.lang.Character.isHighSurrogate(ch))) {
						if ((searchChars[(j + 1)]) == (cs.charAt((i + 1)))) {
							continue outer;
						}
					}else {
						continue outer;
					}
				}
			}
			return i;
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int indexOfAnyBut(java.lang.String str, java.lang.String searchChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int strLen = str.length();
		for (int i = 0; i < strLen; i++) {
			char ch = str.charAt(i);
			boolean chFound = (searchChars.indexOf(ch)) >= 0;
			if (((i + 1) < strLen) && (java.lang.Character.isHighSurrogate(ch))) {
				char ch2 = str.charAt((i + 1));
				if (chFound && ((searchChars.indexOf(ch2)) < 0)) {
					return i;
				}
			}else {
				if (!chFound) {
					return i;
				}
			}
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static boolean containsOnly(java.lang.CharSequence cs, char[] valid) {
		if ((valid == null) || (cs == null)) {
			return false;
		}
		if ((cs.length()) == 0) {
			return true;
		}
		if ((valid.length) == 0) {
			return false;
		}
		return (org.apache.commons.lang3.StringUtils.indexOfAnyBut(cs, valid)) == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND);
	}

	public static boolean containsOnly(java.lang.CharSequence cs, java.lang.String validChars) {
		if ((cs == null) || (validChars == null)) {
			return false;
		}
		return org.apache.commons.lang3.StringUtils.containsOnly(cs, validChars.toCharArray());
	}

	public static boolean containsNone(java.lang.CharSequence cs, char[] searchChars) {
		if ((cs == null) || (searchChars == null)) {
			return true;
		}
		int csLen = cs.length();
		int csLast = csLen - 1;
		int searchLen = searchChars.length;
		int searchLast = searchLen - 1;
		for (int i = 0; i < csLen; i++) {
			char ch = cs.charAt(i);
			for (int j = 0; j < searchLen; j++) {
				if ((searchChars[j]) == ch) {
					if (java.lang.Character.isHighSurrogate(ch)) {
						if (j == searchLast) {
							return false;
						}
						if ((i < csLast) && ((searchChars[(j + 1)]) == (cs.charAt((i + 1))))) {
							return false;
						}
					}else {
						return false;
					}
				}
			}
		}
		return true;
	}

	public static boolean containsNone(java.lang.CharSequence cs, java.lang.String invalidChars) {
		if ((cs == null) || (invalidChars == null)) {
			return true;
		}
		return org.apache.commons.lang3.StringUtils.containsNone(cs, invalidChars.toCharArray());
	}

	public static int indexOfAny(java.lang.String str, java.lang.String[] searchStrs) {
		if ((str == null) || (searchStrs == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int sz = searchStrs.length;
		int ret = java.lang.Integer.MAX_VALUE;
		int tmp = 0;
		for (int i = 0; i < sz; i++) {
			java.lang.String search = searchStrs[i];
			if (search == null) {
				continue;
			}
			tmp = str.indexOf(search);
			if (tmp == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
				continue;
			}
			if (tmp < ret) {
				ret = tmp;
			}
		}
		return ret == (java.lang.Integer.MAX_VALUE) ? org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND : ret;
	}

	public static int lastIndexOfAny(java.lang.String str, java.lang.String[] searchStrs) {
		if ((str == null) || (searchStrs == null)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		int sz = searchStrs.length;
		int ret = org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		int tmp = 0;
		for (int i = 0; i < sz; i++) {
			java.lang.String search = searchStrs[i];
			if (search == null) {
				continue;
			}
			tmp = str.lastIndexOf(search);
			if (tmp > ret) {
				ret = tmp;
			}
		}
		return ret;
	}

	public static java.lang.String substring(java.lang.String str, int start) {
		if (str == null) {
			return null;
		}
		if (start < 0) {
			start = (str.length()) + start;
		}
		if (start < 0) {
			start = 0;
		}
		if (start > (str.length())) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str.substring(start);
	}

	public static java.lang.String substring(java.lang.String str, int start, int end) {
		if (str == null) {
			return null;
		}
		if (end < 0) {
			end = (str.length()) + end;
		}
		if (start < 0) {
			start = (str.length()) + start;
		}
		if (end > (str.length())) {
			end = str.length();
		}
		if (start > end) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if (start < 0) {
			start = 0;
		}
		if (end < 0) {
			end = 0;
		}
		return str.substring(start, end);
	}

	public static java.lang.String left(java.lang.String str, int len) {
		if (str == null) {
			return null;
		}
		if (len < 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if ((str.length()) <= len) {
			return str;
		}
		return str.substring(0, len);
	}

	public static java.lang.String right(java.lang.String str, int len) {
		if (str == null) {
			return null;
		}
		if (len < 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if ((str.length()) <= len) {
			return str;
		}
		return str.substring(((str.length()) - len));
	}

	public static java.lang.String mid(java.lang.String str, int pos, int len) {
		if (str == null) {
			return null;
		}
		if ((len < 0) || (pos > (str.length()))) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		if (pos < 0) {
			pos = 0;
		}
		if ((str.length()) <= (pos + len)) {
			return str.substring(pos);
		}
		return str.substring(pos, (pos + len));
	}

	public static java.lang.String substringBefore(java.lang.String str, java.lang.String separator) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {
			return str;
		}
		if ((separator.length()) == 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int pos = str.indexOf(separator);
		if (pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return str;
		}
		return str.substring(0, pos);
	}

	public static java.lang.String substringAfter(java.lang.String str, java.lang.String separator) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		if (separator == null) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int pos = str.indexOf(separator);
		if (pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str.substring((pos + (separator.length())));
	}

	public static java.lang.String substringBeforeLast(java.lang.String str, java.lang.String separator) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(separator))) {
			return str;
		}
		int pos = str.lastIndexOf(separator);
		if (pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return str;
		}
		return str.substring(0, pos);
	}

	public static java.lang.String substringAfterLast(java.lang.String str, java.lang.String separator) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(separator)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int pos = str.lastIndexOf(separator);
		if ((pos == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) || (pos == ((str.length()) - (separator.length())))) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str.substring((pos + (separator.length())));
	}

	public static java.lang.String substringBetween(java.lang.String str, java.lang.String tag) {
		return org.apache.commons.lang3.StringUtils.substringBetween(str, tag, tag);
	}

	public static java.lang.String substringBetween(java.lang.String str, java.lang.String open, java.lang.String close) {
		if (((str == null) || (open == null)) || (close == null)) {
			return null;
		}
		int start = str.indexOf(open);
		if (start != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			int end = str.indexOf(close, (start + (open.length())));
			if (end != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
				return str.substring((start + (open.length())), end);
			}
		}
		return null;
	}

	public static java.lang.String[] substringsBetween(java.lang.String str, java.lang.String open, java.lang.String close) {
		if (((str == null) || (org.apache.commons.lang3.StringUtils.isEmpty(open))) || (org.apache.commons.lang3.StringUtils.isEmpty(close))) {
			return null;
		}
		int strLen = str.length();
		if (strLen == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		int closeLen = close.length();
		int openLen = open.length();
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int pos = 0;
		while (pos < (strLen - closeLen)) {
			int start = str.indexOf(open, pos);
			if (start < 0) {
				break;
			}
			start += openLen;
			int end = str.indexOf(close, start);
			if (end < 0) {
				break;
			}
			list.add(str.substring(start, end));
			pos = end + closeLen;
		} 
		if (list.isEmpty()) {
			return null;
		}
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String[] split(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.split(str, null, (-1));
	}

	public static java.lang.String[] split(java.lang.String str, char separatorChar) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChar, false);
	}

	public static java.lang.String[] split(java.lang.String str, java.lang.String separatorChars) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, (-1), false);
	}

	public static java.lang.String[] split(java.lang.String str, java.lang.String separatorChars, int max) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, false);
	}

	public static java.lang.String[] splitByWholeSeparator(java.lang.String str, java.lang.String separator) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), false);
	}

	public static java.lang.String[] splitByWholeSeparator(java.lang.String str, java.lang.String separator, int max) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, max, false);
	}

	public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String str, java.lang.String separator) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, (-1), true);
	}

	public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String str, java.lang.String separator, int max) {
		return org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(str, separator, max, true);
	}

	private static java.lang.String[] splitByWholeSeparatorWorker(java.lang.String str, java.lang.String separator, int max, boolean preserveAllTokens) {
		if (str == null) {
			return null;
		}
		int len = str.length();
		if (len == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		if ((separator == null) || (org.apache.commons.lang3.StringUtils.EMPTY.equals(separator))) {
			return org.apache.commons.lang3.StringUtils.splitWorker(str, null, max, preserveAllTokens);
		}
		int separatorLength = separator.length();
		java.util.ArrayList<java.lang.String> substrings = new java.util.ArrayList<java.lang.String>();
		int numberOfSubstrings = 0;
		int beg = 0;
		int end = 0;
		while (end < len) {
			end = str.indexOf(separator, beg);
			if (end > (-1)) {
				if (end > beg) {
					numberOfSubstrings += 1;
					if (numberOfSubstrings == max) {
						end = len;
						substrings.add(str.substring(beg));
					}else {
						substrings.add(str.substring(beg, end));
						beg = end + separatorLength;
					}
				}else {
					if (preserveAllTokens) {
						numberOfSubstrings += 1;
						if (numberOfSubstrings == max) {
							end = len;
							substrings.add(str.substring(beg));
						}else {
							substrings.add(org.apache.commons.lang3.StringUtils.EMPTY);
						}
					}
					beg = end + separatorLength;
				}
			}else {
				substrings.add(str.substring(beg));
				end = len;
			}
		} 
		return substrings.toArray(new java.lang.String[substrings.size()]);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, null, (-1), true);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str, char separatorChar) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChar, true);
	}

	private static java.lang.String[] splitWorker(java.lang.String str, char separatorChar, boolean preserveAllTokens) {
		if (str == null) {
			return null;
		}
		int len = str.length();
		if (len == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int i = 0;
		int start = 0;
		boolean match = false;
		boolean lastMatch = false;
		while (i < len) {
			if ((str.charAt(i)) == separatorChar) {
				if (match || preserveAllTokens) {
					list.add(str.substring(start, i));
					match = false;
					lastMatch = true;
				}
				start = ++i;
				continue;
			}
			lastMatch = false;
			match = true;
			i++;
		} 
		if (match || (preserveAllTokens && lastMatch)) {
			list.add(str.substring(start, i));
		}
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str, java.lang.String separatorChars) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, (-1), true);
	}

	public static java.lang.String[] splitPreserveAllTokens(java.lang.String str, java.lang.String separatorChars, int max) {
		return org.apache.commons.lang3.StringUtils.splitWorker(str, separatorChars, max, true);
	}

	private static java.lang.String[] splitWorker(java.lang.String str, java.lang.String separatorChars, int max, boolean preserveAllTokens) {
		if (str == null) {
			return null;
		}
		int len = str.length();
		if (len == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int sizePlus1 = 1;
		int i = 0;
		int start = 0;
		boolean match = false;
		boolean lastMatch = false;
		if (separatorChars == null) {
			while (i < len) {
				if (java.lang.Character.isWhitespace(str.charAt(i))) {
					if (match || preserveAllTokens) {
						lastMatch = true;
						if ((sizePlus1++) == max) {
							i = len;
							lastMatch = false;
						}
						list.add(str.substring(start, i));
						match = false;
					}
					start = ++i;
					continue;
				}
				lastMatch = false;
				match = true;
				i++;
			} 
		}else
			if ((separatorChars.length()) == 1) {
				char sep = separatorChars.charAt(0);
				while (i < len) {
					if ((str.charAt(i)) == sep) {
						if (match || preserveAllTokens) {
							lastMatch = true;
							if ((sizePlus1++) == max) {
								i = len;
								lastMatch = false;
							}
							list.add(str.substring(start, i));
							match = false;
						}
						start = ++i;
						continue;
					}
					lastMatch = false;
					match = true;
					i++;
				} 
			}else {
				while (i < len) {
					if ((separatorChars.indexOf(str.charAt(i))) >= 0) {
						if (match || preserveAllTokens) {
							lastMatch = true;
							if ((sizePlus1++) == max) {
								i = len;
								lastMatch = false;
							}
							list.add(str.substring(start, i));
							match = false;
						}
						start = ++i;
						continue;
					}
					lastMatch = false;
					match = true;
					i++;
				} 
			}
		
		if (match || (preserveAllTokens && lastMatch)) {
			list.add(str.substring(start, i));
		}
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String[] splitByCharacterType(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, false);
	}

	public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String str) {
		return org.apache.commons.lang3.StringUtils.splitByCharacterType(str, true);
	}

	private static java.lang.String[] splitByCharacterType(java.lang.String str, boolean camelCase) {
		if (str == null) {
			return null;
		}
		if ((str.length()) == 0) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
		}
		char[] c = str.toCharArray();
		java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>();
		int tokenStart = 0;
		int currentType = java.lang.Character.getType(c[tokenStart]);
		for (int pos = tokenStart + 1; pos < (c.length); pos++) {
			int type = java.lang.Character.getType(c[pos]);
			if (type == currentType) {
				continue;
			}
			if ((camelCase && (type == (java.lang.Character.LOWERCASE_LETTER))) && (currentType == (java.lang.Character.UPPERCASE_LETTER))) {
				int newTokenStart = pos - 1;
				if (newTokenStart != tokenStart) {
					list.add(new java.lang.String(c, tokenStart, (newTokenStart - tokenStart)));
					tokenStart = newTokenStart;
				}
			}else {
				list.add(new java.lang.String(c, tokenStart, (pos - tokenStart)));
				tokenStart = pos;
			}
			currentType = type;
		}
		list.add(new java.lang.String(c, tokenStart, ((c.length) - tokenStart)));
		return list.toArray(new java.lang.String[list.size()]);
	}

	public static java.lang.String concat(java.lang.Object... elements) {
		return org.apache.commons.lang3.StringUtils.join(elements, null);
	}

	public static java.lang.String concatWith(java.lang.String separator, java.lang.Object... elements) {
		return org.apache.commons.lang3.StringUtils.join(elements, separator);
	}

	public static java.lang.String join(java.lang.Object[] array) {
		return org.apache.commons.lang3.StringUtils.join(array, null);
	}

	public static java.lang.String join(java.lang.Object[] array, char separator) {
		if (array == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.length);
	}

	public static java.lang.String join(java.lang.Object[] array, char separator, int startIndex, int endIndex) {
		if (array == null) {
			return null;
		}
		int bufSize = endIndex - startIndex;
		if (bufSize <= 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		bufSize *= ((array[startIndex]) == null ? 16 : array[startIndex].toString().length()) + 1;
		java.lang.StringBuilder buf = new java.lang.StringBuilder(bufSize);
		for (int i = startIndex; i < endIndex; i++) {
			if (i > startIndex) {
				buf.append(separator);
			}
			if ((array[i]) != null) {
				buf.append(array[i]);
			}
		}
		return buf.toString();
	}

	public static java.lang.String join(java.lang.Object[] array, java.lang.String separator) {
		if (array == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(array, separator, 0, array.length);
	}

	public static java.lang.String join(java.lang.Object[] array, java.lang.String separator, int startIndex, int endIndex) {
		if (array == null) {
			return null;
		}
		if (separator == null) {
			separator = org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int bufSize = endIndex - startIndex;
		if (bufSize <= 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		bufSize *= ((array[startIndex]) == null ? 16 : array[startIndex].toString().length()) + (separator.length());
		java.lang.StringBuilder buf = new java.lang.StringBuilder(bufSize);
		for (int i = startIndex; i < endIndex; i++) {
			if (i > startIndex) {
				buf.append(separator);
			}
			if ((array[i]) != null) {
				buf.append(array[i]);
			}
		}
		return buf.toString();
	}

	public static java.lang.String join(java.util.Iterator<?> iterator, char separator) {
		if (iterator == null) {
			return null;
		}
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		java.lang.Object first = iterator.next();
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.ObjectUtils.toString(first);
		}
		java.lang.StringBuilder buf = new java.lang.StringBuilder(256);
		if (first != null) {
			buf.append(first);
		}
		while (iterator.hasNext()) {
			buf.append(separator);
			java.lang.Object obj = iterator.next();
			if (obj != null) {
				buf.append(obj);
			}
		} 
		return buf.toString();
	}

	public static java.lang.String join(java.util.Iterator<?> iterator, java.lang.String separator) {
		if (iterator == null) {
			return null;
		}
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		java.lang.Object first = iterator.next();
		if (!(iterator.hasNext())) {
			return org.apache.commons.lang3.ObjectUtils.toString(first);
		}
		java.lang.StringBuilder buf = new java.lang.StringBuilder(256);
		if (first != null) {
			buf.append(first);
		}
		while (iterator.hasNext()) {
			if (separator != null) {
				buf.append(separator);
			}
			java.lang.Object obj = iterator.next();
			if (obj != null) {
				buf.append(obj);
			}
		} 
		return buf.toString();
	}

	public static java.lang.String join(java.lang.Iterable<?> iterable, char separator) {
		if (iterable == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(iterable.iterator(), separator);
	}

	public static java.lang.String join(java.lang.Iterable<?> iterable, java.lang.String separator) {
		if (iterable == null) {
			return null;
		}
		return org.apache.commons.lang3.StringUtils.join(iterable.iterator(), separator);
	}

	public static java.lang.String deleteWhitespace(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		int sz = str.length();
		char[] chs = new char[sz];
		int count = 0;
		for (int i = 0; i < sz; i++) {
			if (!(java.lang.Character.isWhitespace(str.charAt(i)))) {
				chs[(count++)] = str.charAt(i);
			}
		}
		if (count == sz) {
			return str;
		}
		return new java.lang.String(chs, 0, count);
	}

	public static java.lang.String removeStart(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (str.startsWith(remove)) {
			return str.substring(remove.length());
		}
		return str;
	}

	public static java.lang.String removeStartIgnoreCase(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(str, remove)) {
			return str.substring(remove.length());
		}
		return str;
	}

	public static java.lang.String removeEnd(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (str.endsWith(remove)) {
			return str.substring(0, ((str.length()) - (remove.length())));
		}
		return str;
	}

	public static java.lang.String removeEndIgnoreCase(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(str, remove)) {
			return str.substring(0, ((str.length()) - (remove.length())));
		}
		return str;
	}

	public static java.lang.String remove(java.lang.String str, java.lang.String remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(remove))) {
			return str;
		}
		return org.apache.commons.lang3.StringUtils.replace(str, remove, org.apache.commons.lang3.StringUtils.EMPTY, (-1));
	}

	public static java.lang.String remove(java.lang.String str, char remove) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || ((str.indexOf(remove)) == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND))) {
			return str;
		}
		char[] chars = str.toCharArray();
		int pos = 0;
		for (int i = 0; i < (chars.length); i++) {
			if ((chars[i]) != remove) {
				chars[(pos++)] = chars[i];
			}
		}
		return new java.lang.String(chars, 0, pos);
	}

	public static java.lang.String replaceOnce(java.lang.String text, java.lang.String searchString, java.lang.String replacement) {
		return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, 1);
	}

	public static java.lang.String replace(java.lang.String text, java.lang.String searchString, java.lang.String replacement) {
		return org.apache.commons.lang3.StringUtils.replace(text, searchString, replacement, (-1));
	}

	public static java.lang.String replace(java.lang.String text, java.lang.String searchString, java.lang.String replacement, int max) {
		if ((((org.apache.commons.lang3.StringUtils.isEmpty(text)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchString))) || (replacement == null)) || (max == 0)) {
			return text;
		}
		int start = 0;
		int end = text.indexOf(searchString, start);
		if (end == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return text;
		}
		int replLength = searchString.length();
		int increase = (replacement.length()) - replLength;
		increase = (increase < 0) ? 0 : increase;
		increase *= (max < 0) ? 16 : max > 64 ? 64 : max;
		java.lang.StringBuilder buf = new java.lang.StringBuilder(((text.length()) + increase));
		while (end != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			buf.append(text.substring(start, end)).append(replacement);
			start = end + replLength;
			if ((--max) == 0) {
				break;
			}
			end = text.indexOf(searchString, start);
		} 
		buf.append(text.substring(start));
		return buf.toString();
	}

	public static java.lang.String replaceEach(java.lang.String text, java.lang.String[] searchList, java.lang.String[] replacementList) {
		return org.apache.commons.lang3.StringUtils.replaceEach(text, searchList, replacementList, false, 0);
	}

	public static java.lang.String replaceEachRepeatedly(java.lang.String text, java.lang.String[] searchList, java.lang.String[] replacementList) {
		int timeToLive = (searchList == null) ? 0 : searchList.length;
		return org.apache.commons.lang3.StringUtils.replaceEach(text, searchList, replacementList, true, timeToLive);
	}

	private static java.lang.String replaceEach(java.lang.String text, java.lang.String[] searchList, java.lang.String[] replacementList, boolean repeat, int timeToLive) {
		if ((((((text == null) || ((text.length()) == 0)) || (searchList == null)) || ((searchList.length) == 0)) || (replacementList == null)) || ((replacementList.length) == 0)) {
			return text;
		}
		if (timeToLive < 0) {
			throw new java.lang.IllegalStateException(((("TimeToLive of " + timeToLive) + " is less than 0: ") + text));
		}
		int searchLength = searchList.length;
		int replacementLength = replacementList.length;
		if (searchLength != replacementLength) {
			throw new java.lang.IllegalArgumentException(((("Search and Replace array lengths don't match: " + searchLength) + " vs ") + replacementLength));
		}
		boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];
		int textIndex = -1;
		int replaceIndex = -1;
		int tempIndex = -1;
		for (int i = 0; i < searchLength; i++) {
			if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || ((searchList[i].length()) == 0)) || ((replacementList[i]) == null)) {
				continue;
			}
			tempIndex = text.indexOf(searchList[i]);
			if (tempIndex == (-1)) {
				noMoreMatchesForReplIndex[i] = true;
			}else {
				if ((textIndex == (-1)) || (tempIndex < textIndex)) {
					textIndex = tempIndex;
					replaceIndex = i;
				}
			}
		}
		if (textIndex == (-1)) {
			return text;
		}
		int start = 0;
		int increase = 0;
		for (int i = 0; i < (searchList.length); i++) {
			if (((searchList[i]) == null) || ((replacementList[i]) == null)) {
				continue;
			}
			int greater = (replacementList[i].length()) - (searchList[i].length());
			if (greater > 0) {
				increase += 3 * greater;
			}
		}
		increase = java.lang.Math.min(increase, ((text.length()) / 5));
		java.lang.StringBuilder buf = new java.lang.StringBuilder(((text.length()) + increase));
		while (textIndex != (-1)) {
			for (int i = start; i < textIndex; i++) {
				buf.append(text.charAt(i));
			}
			buf.append(replacementList[replaceIndex]);
			start = textIndex + (searchList[replaceIndex].length());
			textIndex = -1;
			replaceIndex = -1;
			tempIndex = -1;
			for (int i = 0; i < searchLength; i++) {
				if ((((noMoreMatchesForReplIndex[i]) || ((searchList[i]) == null)) || ((searchList[i].length()) == 0)) || ((replacementList[i]) == null)) {
					continue;
				}
				tempIndex = text.indexOf(searchList[i], start);
				if (tempIndex == (-1)) {
					noMoreMatchesForReplIndex[i] = true;
				}else {
					if ((textIndex == (-1)) || (tempIndex < textIndex)) {
						textIndex = tempIndex;
						replaceIndex = i;
					}
				}
			}
		} 
		int textLength = text.length();
		for (int i = start; i < textLength; i++) {
			buf.append(text.charAt(i));
		}
		java.lang.String result = buf.toString();
		if (!repeat) {
			return result;
		}
		return org.apache.commons.lang3.StringUtils.replaceEach(result, searchList, replacementList, repeat, (timeToLive - 1));
	}

	public static java.lang.String replaceChars(java.lang.String str, char searchChar, char replaceChar) {
		if (str == null) {
			return null;
		}
		return str.replace(searchChar, replaceChar);
	}

	public static java.lang.String replaceChars(java.lang.String str, java.lang.String searchChars, java.lang.String replaceChars) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(searchChars))) {
			return str;
		}
		if (replaceChars == null) {
			replaceChars = org.apache.commons.lang3.StringUtils.EMPTY;
		}
		boolean modified = false;
		int replaceCharsLength = replaceChars.length();
		int strLength = str.length();
		java.lang.StringBuilder buf = new java.lang.StringBuilder(strLength);
		for (int i = 0; i < strLength; i++) {
			char ch = str.charAt(i);
			int index = searchChars.indexOf(ch);
			if (index >= 0) {
				modified = true;
				if (index < replaceCharsLength) {
					buf.append(replaceChars.charAt(index));
				}
			}else {
				buf.append(ch);
			}
		}
		if (modified) {
			return buf.toString();
		}
		return str;
	}

	public static java.lang.String overlay(java.lang.String str, java.lang.String overlay, int start, int end) {
		if (str == null) {
			return null;
		}
		if (overlay == null) {
			overlay = org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int len = str.length();
		if (start < 0) {
			start = 0;
		}
		if (start > len) {
			start = len;
		}
		if (end < 0) {
			end = 0;
		}
		if (end > len) {
			end = len;
		}
		if (start > end) {
			int temp = start;
			start = end;
			end = temp;
		}
		return new java.lang.StringBuilder(((((len + start) - end) + (overlay.length())) + 1)).append(str.substring(0, start)).append(overlay).append(str.substring(end)).toString();
	}

	public static java.lang.String chomp(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return str;
		}
		if ((str.length()) == 1) {
			char ch = str.charAt(0);
			if ((ch == (org.apache.commons.lang3.CharUtils.CR)) || (ch == (org.apache.commons.lang3.CharUtils.LF))) {
				return org.apache.commons.lang3.StringUtils.EMPTY;
			}
			return str;
		}
		int lastIdx = (str.length()) - 1;
		char last = str.charAt(lastIdx);
		if (last == (org.apache.commons.lang3.CharUtils.LF)) {
			if ((str.charAt((lastIdx - 1))) == (org.apache.commons.lang3.CharUtils.CR)) {
				lastIdx--;
			}
		}else
			if (last != (org.apache.commons.lang3.CharUtils.CR)) {
				lastIdx++;
			}
		
		return str.substring(0, lastIdx);
	}

	public static java.lang.String chomp(java.lang.String str, java.lang.String separator) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (separator == null)) {
			return str;
		}
		if (str.endsWith(separator)) {
			return str.substring(0, ((str.length()) - (separator.length())));
		}
		return str;
	}

	public static java.lang.String chop(java.lang.String str) {
		if (str == null) {
			return null;
		}
		int strLen = str.length();
		if (strLen < 2) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int lastIdx = strLen - 1;
		java.lang.String ret = str.substring(0, lastIdx);
		char last = str.charAt(lastIdx);
		if (last == (org.apache.commons.lang3.CharUtils.LF)) {
			if ((ret.charAt((lastIdx - 1))) == (org.apache.commons.lang3.CharUtils.CR)) {
				return ret.substring(0, (lastIdx - 1));
			}
		}
		return ret;
	}

	public static java.lang.String repeat(java.lang.String str, int repeat) {
		if (str == null) {
			return null;
		}
		if (repeat <= 0) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int inputLength = str.length();
		if ((repeat == 1) || (inputLength == 0)) {
			return str;
		}
		if ((inputLength == 1) && (repeat <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))) {
			return org.apache.commons.lang3.StringUtils.padding(repeat, str.charAt(0));
		}
		int outputLength = inputLength * repeat;
		switch (inputLength) {
			case 1 :
				char ch = str.charAt(0);
				char[] output1 = new char[outputLength];
				for (int i = repeat - 1; i >= 0; i--) {
					output1[i] = ch;
				}
				return new java.lang.String(output1);
			case 2 :
				char ch0 = str.charAt(0);
				char ch1 = str.charAt(1);
				char[] output2 = new char[outputLength];
				for (int i = (repeat * 2) - 2; i >= 0; i-- , i--) {
					output2[i] = ch0;
					output2[(i + 1)] = ch1;
				}
				return new java.lang.String(output2);
			default :
				java.lang.StringBuilder buf = new java.lang.StringBuilder(outputLength);
				for (int i = 0; i < repeat; i++) {
					buf.append(str);
				}
				return buf.toString();
		}
	}

	public static java.lang.String repeat(java.lang.String str, java.lang.String separator, int repeat) {
		if ((str == null) || (separator == null)) {
			return org.apache.commons.lang3.StringUtils.repeat(str, repeat);
		}else {
			java.lang.String result = org.apache.commons.lang3.StringUtils.repeat((str + separator), repeat);
			return org.apache.commons.lang3.StringUtils.removeEnd(result, separator);
		}
	}

	private static java.lang.String padding(int repeat, char padChar) throws java.lang.IndexOutOfBoundsException {
		if (repeat < 0) {
			throw new java.lang.IndexOutOfBoundsException(("Cannot pad a negative amount: " + repeat));
		}
		final char[] buf = new char[repeat];
		for (int i = 0; i < (buf.length); i++) {
			buf[i] = padChar;
		}
		return new java.lang.String(buf);
	}

	public static java.lang.String rightPad(java.lang.String str, int size) {
		return org.apache.commons.lang3.StringUtils.rightPad(str, size, ' ');
	}

	public static java.lang.String rightPad(java.lang.String str, int size, char padChar) {
		if (str == null) {
			return null;
		}
		int pads = size - (str.length());
		if (pads <= 0) {
			return str;
		}
		if (pads > (org.apache.commons.lang3.StringUtils.PAD_LIMIT)) {
			return org.apache.commons.lang3.StringUtils.rightPad(str, size, java.lang.String.valueOf(padChar));
		}
		return str.concat(org.apache.commons.lang3.StringUtils.padding(pads, padChar));
	}

	public static java.lang.String rightPad(java.lang.String str, int size, java.lang.String padStr) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {
			padStr = " ";
		}
		int padLen = padStr.length();
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))) {
			return org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr.charAt(0));
		}
		if (pads == padLen) {
			return str.concat(padStr);
		}else
			if (pads < padLen) {
				return str.concat(padStr.substring(0, pads));
			}else {
				char[] padding = new char[pads];
				char[] padChars = padStr.toCharArray();
				for (int i = 0; i < pads; i++) {
					padding[i] = padChars[(i % padLen)];
				}
				return str.concat(new java.lang.String(padding));
			}
		
	}

	public static java.lang.String leftPad(java.lang.String str, int size) {
		return org.apache.commons.lang3.StringUtils.leftPad(str, size, ' ');
	}

	public static java.lang.String leftPad(java.lang.String str, int size, char padChar) {
		if (str == null) {
			return null;
		}
		int pads = size - (str.length());
		if (pads <= 0) {
			return str;
		}
		if (pads > (org.apache.commons.lang3.StringUtils.PAD_LIMIT)) {
			return org.apache.commons.lang3.StringUtils.leftPad(str, size, java.lang.String.valueOf(padChar));
		}
		return org.apache.commons.lang3.StringUtils.padding(pads, padChar).concat(str);
	}

	public static java.lang.String leftPad(java.lang.String str, int size, java.lang.String padStr) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {
			padStr = " ";
		}
		int padLen = padStr.length();
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		if ((padLen == 1) && (pads <= (org.apache.commons.lang3.StringUtils.PAD_LIMIT))) {
			return org.apache.commons.lang3.StringUtils.leftPad(str, size, padStr.charAt(0));
		}
		if (pads == padLen) {
			return padStr.concat(str);
		}else
			if (pads < padLen) {
				return padStr.substring(0, pads).concat(str);
			}else {
				char[] padding = new char[pads];
				char[] padChars = padStr.toCharArray();
				for (int i = 0; i < pads; i++) {
					padding[i] = padChars[(i % padLen)];
				}
				return new java.lang.String(padding).concat(str);
			}
		
	}

	@java.lang.Deprecated
	public static int length(java.lang.CharSequence cs) {
		return org.apache.commons.lang3.CharSequenceUtils.length(cs);
	}

	public static java.lang.String center(java.lang.String str, int size) {
		return org.apache.commons.lang3.StringUtils.center(str, size, ' ');
	}

	public static java.lang.String center(java.lang.String str, int size, char padChar) {
		if ((str == null) || (size <= 0)) {
			return str;
		}
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padChar);
		str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padChar);
		return str;
	}

	public static java.lang.String center(java.lang.String str, int size, java.lang.String padStr) {
		if ((str == null) || (size <= 0)) {
			return str;
		}
		if (org.apache.commons.lang3.StringUtils.isEmpty(padStr)) {
			padStr = " ";
		}
		int strLen = str.length();
		int pads = size - strLen;
		if (pads <= 0) {
			return str;
		}
		str = org.apache.commons.lang3.StringUtils.leftPad(str, (strLen + (pads / 2)), padStr);
		str = org.apache.commons.lang3.StringUtils.rightPad(str, size, padStr);
		return str;
	}

	public static java.lang.String upperCase(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return str.toUpperCase();
	}

	public static java.lang.String upperCase(java.lang.String str, java.util.Locale locale) {
		if (str == null) {
			return null;
		}
		return str.toUpperCase(locale);
	}

	public static java.lang.String lowerCase(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return str.toLowerCase();
	}

	public static java.lang.String lowerCase(java.lang.String str, java.util.Locale locale) {
		if (str == null) {
			return null;
		}
		return str.toLowerCase(locale);
	}

	public static java.lang.String capitalize(java.lang.CharSequence cs) {
		if (cs == null) {
			return null;
		}
		int strLen;
		if ((strLen = cs.length()) == 0) {
			return cs.toString();
		}
		return new java.lang.StringBuilder(strLen).append(java.lang.Character.toTitleCase(cs.charAt(0))).append(org.apache.commons.lang3.CharSequenceUtils.subSequence(cs, 1)).toString();
	}

	public static java.lang.String uncapitalize(java.lang.CharSequence cs) {
		if (cs == null) {
			return null;
		}
		int strLen;
		if ((strLen = cs.length()) == 0) {
			return cs.toString();
		}
		return new java.lang.StringBuilder(strLen).append(java.lang.Character.toLowerCase(cs.charAt(0))).append(org.apache.commons.lang3.CharSequenceUtils.subSequence(cs, 1)).toString();
	}

	public static java.lang.String swapCase(java.lang.String str) {
		int strLen;
		if ((str == null) || ((strLen = str.length()) == 0)) {
			return str;
		}
		java.lang.StringBuilder buffer = new java.lang.StringBuilder(strLen);
		char ch = 0;
		for (int i = 0; i < strLen; i++) {
			ch = str.charAt(i);
			if (java.lang.Character.isUpperCase(ch)) {
				ch = java.lang.Character.toLowerCase(ch);
			}else
				if (java.lang.Character.isTitleCase(ch)) {
					ch = java.lang.Character.toLowerCase(ch);
				}else
					if (java.lang.Character.isLowerCase(ch)) {
						ch = java.lang.Character.toUpperCase(ch);
					}
				
			
			buffer.append(ch);
		}
		return buffer.toString();
	}

	public static int countMatches(java.lang.String str, java.lang.String sub) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(sub))) {
			return 0;
		}
		int count = 0;
		int idx = 0;
		while ((idx = str.indexOf(sub, idx)) != (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			count++;
			idx += sub.length();
		} 
		return count;
	}

	public static boolean isAlpha(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isLetter(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAlphaSpace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if (((java.lang.Character.isLetter(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAlphanumeric(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isLetterOrDigit(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAlphanumericSpace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if (((java.lang.Character.isLetterOrDigit(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAsciiPrintable(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((org.apache.commons.lang3.CharUtils.isAsciiPrintable(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumeric(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isDigit(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumericSpace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if (((java.lang.Character.isDigit(cs.charAt(i))) == false) && ((cs.charAt(i)) != ' ')) {
				return false;
			}
		}
		return true;
	}

	public static boolean isWhitespace(java.lang.CharSequence cs) {
		if (cs == null) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isWhitespace(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAllLowerCase(java.lang.CharSequence cs) {
		if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isLowerCase(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static boolean isAllUpperCase(java.lang.CharSequence cs) {
		if ((cs == null) || (org.apache.commons.lang3.StringUtils.isEmpty(cs))) {
			return false;
		}
		int sz = cs.length();
		for (int i = 0; i < sz; i++) {
			if ((java.lang.Character.isUpperCase(cs.charAt(i))) == false) {
				return false;
			}
		}
		return true;
	}

	public static java.lang.String defaultString(java.lang.String str) {
		return str == null ? org.apache.commons.lang3.StringUtils.EMPTY : str;
	}

	public static java.lang.String defaultString(java.lang.String str, java.lang.String defaultStr) {
		return str == null ? defaultStr : str;
	}

	public static <T extends java.lang.CharSequence> T defaultIfEmpty(T str, T defaultStr) {
		return org.apache.commons.lang3.StringUtils.isEmpty(str) ? defaultStr : str;
	}

	public static java.lang.String reverse(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.lang.StringBuilder(str).reverse().toString();
	}

	public static java.lang.String reverseDelimited(java.lang.String str, char separatorChar) {
		if (str == null) {
			return null;
		}
		java.lang.String[] strs = org.apache.commons.lang3.StringUtils.split(str, separatorChar);
		org.apache.commons.lang3.ArrayUtils.reverse(strs);
		return org.apache.commons.lang3.StringUtils.join(strs, separatorChar);
	}

	public static java.lang.String abbreviate(java.lang.String str, int maxWidth) {
		return org.apache.commons.lang3.StringUtils.abbreviate(str, 0, maxWidth);
	}

	public static java.lang.String abbreviate(java.lang.String str, int offset, int maxWidth) {
		if (str == null) {
			return null;
		}
		if (maxWidth < 4) {
			throw new java.lang.IllegalArgumentException("Minimum abbreviation width is 4");
		}
		if ((str.length()) <= maxWidth) {
			return str;
		}
		if (offset > (str.length())) {
			offset = str.length();
		}
		if (((str.length()) - offset) < (maxWidth - 3)) {
			offset = (str.length()) - (maxWidth - 3);
		}
		final java.lang.String abrevMarker = "...";
		if (offset <= 4) {
			return (str.substring(0, (maxWidth - 3))) + abrevMarker;
		}
		if (maxWidth < 7) {
			throw new java.lang.IllegalArgumentException("Minimum abbreviation width with offset is 7");
		}
		if ((offset + (maxWidth - 3)) < (str.length())) {
			return abrevMarker + (org.apache.commons.lang3.StringUtils.abbreviate(str.substring(offset), (maxWidth - 3)));
		}
		return abrevMarker + (str.substring(((str.length()) - (maxWidth - 3))));
	}

	public static java.lang.String abbreviateMiddle(java.lang.String str, java.lang.String middle, int length) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(str)) || (org.apache.commons.lang3.StringUtils.isEmpty(middle))) {
			return str;
		}
		if ((length >= (str.length())) || (length < ((middle.length()) + 2))) {
			return str;
		}
		int targetSting = length - (middle.length());
		int startOffset = (targetSting / 2) + (targetSting % 2);
		int endOffset = (str.length()) - (targetSting / 2);
		java.lang.StringBuilder builder = new java.lang.StringBuilder(length);
		builder.append(str.substring(0, startOffset));
		builder.append(middle);
		builder.append(str.substring(endOffset));
		return builder.toString();
	}

	public static java.lang.String difference(java.lang.String str1, java.lang.String str2) {
		if (str1 == null) {
			return str2;
		}
		if (str2 == null) {
			return str1;
		}
		int at = org.apache.commons.lang3.StringUtils.indexOfDifference(str1, str2);
		if (at == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		return str2.substring(at);
	}

	public static int indexOfDifference(java.lang.CharSequence cs1, java.lang.CharSequence cs2) {
		if (cs1 == cs2) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if ((cs1 == null) || (cs2 == null)) {
			return 0;
		}
		int i;
		for (i = 0; (i < (cs1.length())) && (i < (cs2.length())); ++i) {
			if ((cs1.charAt(i)) != (cs2.charAt(i))) {
				break;
			}
		}
		if ((i < (cs2.length())) || (i < (cs1.length()))) {
			return i;
		}
		return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
	}

	public static int indexOfDifference(java.lang.CharSequence... css) {
		if ((css == null) || ((css.length) <= 1)) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		boolean anyStringNull = false;
		boolean allStringsNull = true;
		int arrayLen = css.length;
		int shortestStrLen = java.lang.Integer.MAX_VALUE;
		int longestStrLen = 0;
		for (int i = 0; i < arrayLen; i++) {
			if ((css[i]) == null) {
				anyStringNull = true;
				shortestStrLen = 0;
			}else {
				allStringsNull = false;
				shortestStrLen = java.lang.Math.min(css[i].length(), shortestStrLen);
				longestStrLen = java.lang.Math.max(css[i].length(), longestStrLen);
			}
		}
		if (allStringsNull || ((longestStrLen == 0) && (!anyStringNull))) {
			return org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND;
		}
		if (shortestStrLen == 0) {
			return 0;
		}
		int firstDiff = -1;
		for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
			char comparisonChar = css[0].charAt(stringPos);
			for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
				if ((css[arrayPos].charAt(stringPos)) != comparisonChar) {
					firstDiff = stringPos;
					break;
				}
			}
			if (firstDiff != (-1)) {
				break;
			}
		}
		if ((firstDiff == (-1)) && (shortestStrLen != longestStrLen)) {
			return shortestStrLen;
		}
		return firstDiff;
	}

	public static java.lang.String getCommonPrefix(java.lang.String... strs) {
		if ((strs == null) || ((strs.length) == 0)) {
			return org.apache.commons.lang3.StringUtils.EMPTY;
		}
		int smallestIndexOfDiff = org.apache.commons.lang3.StringUtils.indexOfDifference(strs);
		if (smallestIndexOfDiff == (org.apache.commons.lang3.StringUtils.INDEX_NOT_FOUND)) {
			if ((strs[0]) == null) {
				return org.apache.commons.lang3.StringUtils.EMPTY;
			}
			return strs[0];
		}else
			if (smallestIndexOfDiff == 0) {
				return org.apache.commons.lang3.StringUtils.EMPTY;
			}else {
				return strs[0].substring(0, smallestIndexOfDiff);
			}
		
	}

	public static int getLevenshteinDistance(java.lang.CharSequence s, java.lang.CharSequence t) {
		if ((s == null) || (t == null)) {
			throw new java.lang.IllegalArgumentException("Strings must not be null");
		}
		int n = s.length();
		int m = t.length();
		if (n == 0) {
			return m;
		}else
			if (m == 0) {
				return n;
			}
		
		if (n > m) {
			java.lang.CharSequence tmp = s;
			s = t;
			t = tmp;
			n = m;
			m = t.length();
		}
		int[] p = new int[n + 1];
		int[] d = new int[n + 1];
		int[] _d;
		int i;
		int j;
		char t_j;
		int cost;
		for (i = 0; i <= n; i++) {
			p[i] = i;
		}
		for (j = 1; j <= m; j++) {
			t_j = t.charAt((j - 1));
			d[0] = j;
			for (i = 1; i <= n; i++) {
				cost = ((s.charAt((i - 1))) == t_j) ? 0 : 1;
				d[i] = java.lang.Math.min(java.lang.Math.min(((d[(i - 1)]) + 1), ((p[i]) + 1)), ((p[(i - 1)]) + cost));
			}
			_d = p;
			p = d;
			d = _d;
		}
		return p[n];
	}

	public static boolean startsWith(java.lang.String str, java.lang.String prefix) {
		return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, false);
	}

	public static boolean startsWithIgnoreCase(java.lang.String str, java.lang.String prefix) {
		return org.apache.commons.lang3.StringUtils.startsWith(str, prefix, true);
	}

	private static boolean startsWith(java.lang.String str, java.lang.String prefix, boolean ignoreCase) {
		if ((str == null) || (prefix == null)) {
			return (str == null) && (prefix == null);
		}
		if ((prefix.length()) > (str.length())) {
			return false;
		}
		return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());
	}

	public static boolean startsWithAny(java.lang.String string, java.lang.String... searchStrings) {
		if ((org.apache.commons.lang3.StringUtils.isEmpty(string)) || (org.apache.commons.lang3.ArrayUtils.isEmpty(searchStrings))) {
			return false;
		}
		for (int i = 0; i < (searchStrings.length); i++) {
			java.lang.String searchString = searchStrings[i];
			if (org.apache.commons.lang3.StringUtils.startsWith(string, searchString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean endsWith(java.lang.String str, java.lang.String suffix) {
		return org.apache.commons.lang3.StringUtils.endsWith(str, suffix, false);
	}

	public static boolean endsWithIgnoreCase(java.lang.String str, java.lang.String suffix) {
		return org.apache.commons.lang3.StringUtils.endsWith(str, suffix, true);
	}

	private static boolean endsWith(java.lang.String str, java.lang.String suffix, boolean ignoreCase) {
		if ((str == null) || (suffix == null)) {
			return (str == null) && (suffix == null);
		}
		if ((suffix.length()) > (str.length())) {
			return false;
		}
		int strOffset = (str.length()) - (suffix.length());
		return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());
	}
}
2019-04-14 13:54:15,241 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:54:15,242 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--) {
			if ((str.charAt(i)) != '0')
				return false;
			
		}
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:54:15,244 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:54:20,886 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:54:20,887 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try {
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				} catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:54:20,890 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:54:54,629 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:54:54,629 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++) {
			builder.append(javaVersions[i]);
		}
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:54:54,632 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:55:11,612 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:55:11,612 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:55:11,615 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else
				mant = str;
			
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else
				exp = null;
			
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
							return f;
						
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try 
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					 catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:55:14,579 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:55:14,579 ERROR main - Undo Error: original: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++) {
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		}
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:55:14,581 ERROR main - Undo Error: modified: 
public class NumberUtils {
	public static final java.lang.Long LONG_ZERO = new java.lang.Long(0L);

	public static final java.lang.Long LONG_ONE = new java.lang.Long(1L);

	public static final java.lang.Long LONG_MINUS_ONE = new java.lang.Long((-1L));

	public static final java.lang.Integer INTEGER_ZERO = new java.lang.Integer(0);

	public static final java.lang.Integer INTEGER_ONE = new java.lang.Integer(1);

	public static final java.lang.Integer INTEGER_MINUS_ONE = new java.lang.Integer((-1));

	public static final java.lang.Short SHORT_ZERO = new java.lang.Short(((short) (0)));

	public static final java.lang.Short SHORT_ONE = new java.lang.Short(((short) (1)));

	public static final java.lang.Short SHORT_MINUS_ONE = new java.lang.Short(((short) (-1)));

	public static final java.lang.Byte BYTE_ZERO = java.lang.Byte.valueOf(((byte) (0)));

	public static final java.lang.Byte BYTE_ONE = java.lang.Byte.valueOf(((byte) (1)));

	public static final java.lang.Byte BYTE_MINUS_ONE = java.lang.Byte.valueOf(((byte) (-1)));

	public static final java.lang.Double DOUBLE_ZERO = new java.lang.Double(0.0);

	public static final java.lang.Double DOUBLE_ONE = new java.lang.Double(1.0);

	public static final java.lang.Double DOUBLE_MINUS_ONE = new java.lang.Double((-1.0));

	public static final java.lang.Float FLOAT_ZERO = new java.lang.Float(0.0F);

	public static final java.lang.Float FLOAT_ONE = new java.lang.Float(1.0F);

	public static final java.lang.Float FLOAT_MINUS_ONE = new java.lang.Float((-1.0F));

	public NumberUtils() {
		super();
	}

	public static int toInt(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toInt(str, 0);
	}

	public static int toInt(java.lang.String str, int defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Integer.parseInt(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static long toLong(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toLong(str, 0L);
	}

	public static long toLong(java.lang.String str, long defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Long.parseLong(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static float toFloat(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toFloat(str, 0.0F);
	}

	public static float toFloat(java.lang.String str, float defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Float.parseFloat(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static double toDouble(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toDouble(str, 0.0);
	}

	public static double toDouble(java.lang.String str, double defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Double.parseDouble(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static byte toByte(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toByte(str, ((byte) (0)));
	}

	public static byte toByte(java.lang.String str, byte defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Byte.parseByte(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static short toShort(java.lang.String str) {
		return org.apache.commons.lang3.math.NumberUtils.toShort(str, ((short) (0)));
	}

	public static short toShort(java.lang.String str, short defaultValue) {
		if (str == null) {
			return defaultValue;
		}
		try {
			return java.lang.Short.parseShort(str);
		} catch (java.lang.NumberFormatException nfe) {
			return defaultValue;
		}
	}

	public static java.lang.Number createNumber(java.lang.String str) throws java.lang.NumberFormatException {
		if (str == null)
			return null;
		
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		if (str.startsWith("--")) {
			return null;
		}
		if ((str.startsWith("0x")) || (str.startsWith("-0x")))
			return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
		
		char lastChar = str.charAt(((str.length()) - 1));
		java.lang.String mant;
		java.lang.String dec;
		java.lang.String exp;
		int decPos = str.indexOf('.');
		int expPos = ((str.indexOf('e')) + (str.indexOf('E'))) + 1;
		if (decPos > (-1)) {
			if (expPos > (-1)) {
				if (expPos < decPos) {
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				}
				dec = str.substring((decPos + 1), expPos);
			}else
				dec = str.substring((decPos + 1));
			
			mant = str.substring(0, decPos);
		}else {
			if (expPos > (-1))
				mant = str.substring(0, expPos);
			else {
				mant = str;
			}
			dec = null;
		}
		if ((!(java.lang.Character.isDigit(lastChar))) && (lastChar != '.')) {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), ((str.length()) - 1));
			else {
				exp = null;
			}
			java.lang.String numeric = str.substring(0, ((str.length()) - 1));
			boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
			switch (lastChar) {
				case 'l' :
				case 'L' :
					if (((dec == null) && (exp == null)) && ((((numeric.charAt(0)) == '-') && (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1)))) || (org.apache.commons.lang3.math.NumberUtils.isDigits(numeric)))) {
						try 
							return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);
						 catch (java.lang.NumberFormatException nfe) {
						}
						return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);
					}
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
				case 'f' :
				case 'F' :
					try {
						java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);
						if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {
							return f;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
				case 'd' :
				case 'D' :
					try {
						java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);
						if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {
							return d;
						}
					} catch (java.lang.NumberFormatException nfe) {
					}
					try {
						return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);
					} catch (java.lang.NumberFormatException e) {
					}
				default :
					throw new java.lang.NumberFormatException((str + " is not a valid number."));
			}
		}else {
			if ((expPos > (-1)) && (expPos < ((str.length()) - 1)))
				exp = str.substring((expPos + 1), str.length());
			else
				exp = null;
			
			if ((dec == null) && (exp == null)) {
				try 
					return org.apache.commons.lang3.math.NumberUtils.createInteger(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				try 
					return org.apache.commons.lang3.math.NumberUtils.createLong(str);
				 catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);
			}else {
				boolean allZeros = (org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp));
				try {
					java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);
					if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros))))
						return f;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				try {
					java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);
					if (!((d.isInfinite()) || (((d.doubleValue()) == 0.0) && (!allZeros))))
						return d;
					
				} catch (java.lang.NumberFormatException nfe) {
				}
				return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);
			}
		}
	}

	private static boolean isAllZeros(java.lang.String str) {
		if (str == null) {
			return true;
		}
		for (int i = (str.length()) - 1; i >= 0; i--)
			if ((str.charAt(i)) != '0')
				return false;
			
		
		return (str.length()) > 0;
	}

	public static java.lang.Float createFloat(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Float.valueOf(str);
	}

	public static java.lang.Double createDouble(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Double.valueOf(str);
	}

	public static java.lang.Integer createInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Integer.decode(str);
	}

	public static java.lang.Long createLong(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return java.lang.Long.valueOf(str);
	}

	public static java.math.BigInteger createBigInteger(java.lang.String str) {
		if (str == null) {
			return null;
		}
		return new java.math.BigInteger(str);
	}

	public static java.math.BigDecimal createBigDecimal(java.lang.String str) {
		if (str == null) {
			return null;
		}
		if (org.apache.commons.lang3.StringUtils.isBlank(str)) {
			throw new java.lang.NumberFormatException("A blank string is not a valid number");
		}
		return new java.math.BigDecimal(str);
	}

	public static long min(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static int min(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int min = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) < min) {
				min = array[j];
			}
		}
		return min;
	}

	public static short min(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static byte min(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static double min(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Double.isNaN(array[i])) {
				return java.lang.Double.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static float min(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float min = array[0];
		for (int i = 1; i < (array.length); i++) {
			if (java.lang.Float.isNaN(array[i])) {
				return java.lang.Float.NaN;
			}
			if ((array[i]) < min) {
				min = array[i];
			}
		}
		return min;
	}

	public static long max(long[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		long max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static int max(int[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		int max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static short max(short[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		short max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static byte max(byte[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		byte max = array[0];
		for (int i = 1; i < (array.length); i++) {
			if ((array[i]) > max) {
				max = array[i];
			}
		}
		return max;
	}

	public static double max(double[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		double max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Double.isNaN(array[j])) {
				return java.lang.Double.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static float max(float[] array) {
		if (array == null) {
			throw new java.lang.IllegalArgumentException("The Array must not be null");
		}else
			if ((array.length) == 0) {
				throw new java.lang.IllegalArgumentException("Array cannot be empty.");
			}
		
		float max = array[0];
		for (int j = 1; j < (array.length); j++) {
			if (java.lang.Float.isNaN(array[j])) {
				return java.lang.Float.NaN;
			}
			if ((array[j]) > max) {
				max = array[j];
			}
		}
		return max;
	}

	public static long min(long a, long b, long c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static int min(int a, int b, int c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static short min(short a, short b, short c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static byte min(byte a, byte b, byte c) {
		if (b < a) {
			a = b;
		}
		if (c < a) {
			a = c;
		}
		return a;
	}

	public static double min(double a, double b, double c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static float min(float a, float b, float c) {
		return java.lang.Math.min(java.lang.Math.min(a, b), c);
	}

	public static long max(long a, long b, long c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static int max(int a, int b, int c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static short max(short a, short b, short c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static byte max(byte a, byte b, byte c) {
		if (b > a) {
			a = b;
		}
		if (c > a) {
			a = c;
		}
		return a;
	}

	public static double max(double a, double b, double c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static float max(float a, float b, float c) {
		return java.lang.Math.max(java.lang.Math.max(a, b), c);
	}

	public static boolean isDigits(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		for (int i = 0; i < (str.length()); i++)
			if (!(java.lang.Character.isDigit(str.charAt(i)))) {
				return false;
			}
		
		return true;
	}

	public static boolean isNumber(java.lang.String str) {
		if (org.apache.commons.lang3.StringUtils.isEmpty(str)) {
			return false;
		}
		char[] chars = str.toCharArray();
		int sz = chars.length;
		boolean hasExp = false;
		boolean hasDecPoint = false;
		boolean allowSigns = false;
		boolean foundDigit = false;
		int start = ((chars[0]) == '-') ? 1 : 0;
		if (sz > (start + 1)) {
			if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {
				int i = start + 2;
				if (i == sz) {
					return false;
				}
				for (; i < (chars.length); i++) {
					if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {
						return false;
					}
				}
				return true;
			}
		}
		sz--;
		int i = start;
		while ((i < sz) || (((i < (sz + 1)) && allowSigns) && (!foundDigit))) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				foundDigit = true;
				allowSigns = false;
			}else
				if ((chars[i]) == '.') {
					if (hasDecPoint || hasExp) {
						return false;
					}
					hasDecPoint = true;
				}else
					if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
						if (hasExp) {
							return false;
						}
						if (!foundDigit) {
							return false;
						}
						hasExp = true;
						allowSigns = true;
					}else
						if (((chars[i]) == '+') || ((chars[i]) == '-')) {
							if (!allowSigns) {
								return false;
							}
							allowSigns = false;
							foundDigit = false;
						}else {
							return false;
						}
					
				
			
			i++;
		} 
		if (i < (chars.length)) {
			if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {
				return true;
			}
			if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {
				return false;
			}
			if ((chars[i]) == '.') {
				if (hasDecPoint || hasExp) {
					return false;
				}
				return foundDigit;
			}
			if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {
				return foundDigit;
			}
			if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {
				return foundDigit && (!hasExp);
			}
			return false;
		}
		return (!allowSigns) && foundDigit;
	}
}
2019-04-14 13:55:36,529 ERROR main - Error: the model was not the same from the original after this generation
2019-04-14 13:55:36,529 ERROR main - Undo Error: original: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3) {
			intVersion += javaVersions[2];
		}
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:55:36,531 ERROR main - Undo Error: modified: 
public class SystemUtils {
	private static final int JAVA_VERSION_TRIM_SIZE = 3;

	private static final java.lang.String OS_NAME_WINDOWS_PREFIX = "Windows";

	private static final java.lang.String USER_HOME_KEY = "user.home";

	private static final java.lang.String USER_DIR_KEY = "user.dir";

	private static final java.lang.String JAVA_IO_TMPDIR_KEY = "java.io.tmpdir";

	private static final java.lang.String JAVA_HOME_KEY = "java.home";

	public static final java.lang.String AWT_TOOLKIT = org.apache.commons.lang3.SystemUtils.getSystemProperty("awt.toolkit");

	public static final java.lang.String FILE_ENCODING = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.encoding");

	public static final java.lang.String FILE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("file.separator");

	public static final java.lang.String JAVA_AWT_FONTS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.fonts");

	public static final java.lang.String JAVA_AWT_GRAPHICSENV = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.graphicsenv");

	public static final java.lang.String JAVA_AWT_HEADLESS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.headless");

	public static final java.lang.String JAVA_AWT_PRINTERJOB = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.awt.printerjob");

	public static final java.lang.String JAVA_CLASS_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.path");

	public static final java.lang.String JAVA_CLASS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.class.version");

	public static final java.lang.String JAVA_COMPILER = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.compiler");

	public static final java.lang.String JAVA_ENDORSED_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.endorsed.dirs");

	public static final java.lang.String JAVA_EXT_DIRS = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.ext.dirs");

	public static final java.lang.String JAVA_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY);

	public static final java.lang.String JAVA_IO_TMPDIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY);

	public static final java.lang.String JAVA_LIBRARY_PATH = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.library.path");

	public static final java.lang.String JAVA_RUNTIME_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.name");

	public static final java.lang.String JAVA_RUNTIME_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.runtime.version");

	public static final java.lang.String JAVA_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.name");

	public static final java.lang.String JAVA_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.vendor");

	public static final java.lang.String JAVA_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.specification.version");

	public static final java.lang.String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.util.prefs.PreferencesFactory");

	public static final java.lang.String JAVA_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor");

	public static final java.lang.String JAVA_VENDOR_URL = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vendor.url");

	public static final java.lang.String JAVA_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.version");

	public static final java.lang.String JAVA_VM_INFO = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.info");

	public static final java.lang.String JAVA_VM_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.name");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.vendor");

	public static final java.lang.String JAVA_VM_SPECIFICATION_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.specification.version");

	public static final java.lang.String JAVA_VM_VENDOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.vendor");

	public static final java.lang.String JAVA_VM_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("java.vm.version");

	public static final java.lang.String LINE_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("line.separator");

	public static final java.lang.String OS_ARCH = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.arch");

	public static final java.lang.String OS_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.name");

	public static final java.lang.String OS_VERSION = org.apache.commons.lang3.SystemUtils.getSystemProperty("os.version");

	public static final java.lang.String PATH_SEPARATOR = org.apache.commons.lang3.SystemUtils.getSystemProperty("path.separator");

	public static final java.lang.String USER_COUNTRY = ((org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country")) == null) ? org.apache.commons.lang3.SystemUtils.getSystemProperty("user.region") : org.apache.commons.lang3.SystemUtils.getSystemProperty("user.country");

	public static final java.lang.String USER_DIR = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY);

	public static final java.lang.String USER_HOME = org.apache.commons.lang3.SystemUtils.getSystemProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY);

	public static final java.lang.String USER_LANGUAGE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.language");

	public static final java.lang.String USER_NAME = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.name");

	public static final java.lang.String USER_TIMEZONE = org.apache.commons.lang3.SystemUtils.getSystemProperty("user.timezone");

	public static final java.lang.String JAVA_VERSION_TRIMMED = org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed();

	public static final float JAVA_VERSION_FLOAT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat();

	public static final int JAVA_VERSION_INT = org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt();

	public static final boolean IS_JAVA_1_1 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.1");

	public static final boolean IS_JAVA_1_2 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.2");

	public static final boolean IS_JAVA_1_3 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.3");

	public static final boolean IS_JAVA_1_4 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.4");

	public static final boolean IS_JAVA_1_5 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.5");

	public static final boolean IS_JAVA_1_6 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.6");

	public static final boolean IS_JAVA_1_7 = org.apache.commons.lang3.SystemUtils.getJavaVersionMatches("1.7");

	public static final boolean IS_OS_AIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("AIX");

	public static final boolean IS_OS_HP_UX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("HP-UX");

	public static final boolean IS_OS_IRIX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Irix");

	public static final boolean IS_OS_LINUX = (org.apache.commons.lang3.SystemUtils.getOSMatchesName("Linux")) || (org.apache.commons.lang3.SystemUtils.getOSMatchesName("LINUX"));

	public static final boolean IS_OS_MAC = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac");

	public static final boolean IS_OS_MAC_OSX = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Mac OS X");

	public static final boolean IS_OS_OS2 = org.apache.commons.lang3.SystemUtils.getOSMatchesName("OS/2");

	public static final boolean IS_OS_SOLARIS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("Solaris");

	public static final boolean IS_OS_SUN_OS = org.apache.commons.lang3.SystemUtils.getOSMatchesName("SunOS");

	public static final boolean IS_OS_UNIX = ((((((org.apache.commons.lang3.SystemUtils.IS_OS_AIX) || (org.apache.commons.lang3.SystemUtils.IS_OS_HP_UX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_IRIX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_LINUX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_MAC_OSX)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SOLARIS)) || (org.apache.commons.lang3.SystemUtils.IS_OS_SUN_OS);

	public static final boolean IS_OS_WINDOWS = org.apache.commons.lang3.SystemUtils.getOSMatchesName(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX);

	public static final boolean IS_OS_WINDOWS_2000 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.0");

	public static final boolean IS_OS_WINDOWS_95 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.0");

	public static final boolean IS_OS_WINDOWS_98 = org.apache.commons.lang3.SystemUtils.getOSMatches(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " 9"), "4.1");

	public static final boolean IS_OS_WINDOWS_ME = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "4.9");

	public static final boolean IS_OS_WINDOWS_NT = org.apache.commons.lang3.SystemUtils.getOSMatchesName(((org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX) + " NT"));

	public static final boolean IS_OS_WINDOWS_XP = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "5.1");

	public static final boolean IS_OS_WINDOWS_VISTA = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.0");

	public static final boolean IS_OS_WINDOWS_7 = org.apache.commons.lang3.SystemUtils.getOSMatches(org.apache.commons.lang3.SystemUtils.OS_NAME_WINDOWS_PREFIX, "6.1");

	public static java.io.File getJavaHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_HOME_KEY));
	}

	public static java.io.File getJavaIoTmpDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.JAVA_IO_TMPDIR_KEY));
	}

	private static float getJavaVersionAsFloat() {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static int getJavaVersionAsInt() {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(org.apache.commons.lang3.SystemUtils.JAVA_VERSION, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	private static boolean getJavaVersionMatches(java.lang.String versionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIMMED, versionPrefix);
	}

	private static java.lang.String getJavaVersionTrimmed() {
		if ((org.apache.commons.lang3.SystemUtils.JAVA_VERSION) != null)
			for (int i = 0; i < (org.apache.commons.lang3.SystemUtils.JAVA_VERSION.length()); i++) {
				char ch = org.apache.commons.lang3.SystemUtils.JAVA_VERSION.charAt(i);
				if ((ch >= '0') && (ch <= '9'))
					return org.apache.commons.lang3.SystemUtils.JAVA_VERSION.substring(i);
				
			}
		
		return null;
	}

	private static boolean getOSMatches(java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, org.apache.commons.lang3.SystemUtils.OS_VERSION, osNamePrefix, osVersionPrefix);
	}

	private static boolean getOSMatchesName(java.lang.String osNamePrefix) {
		return org.apache.commons.lang3.SystemUtils.isOSNameMatch(org.apache.commons.lang3.SystemUtils.OS_NAME, osNamePrefix);
	}

	private static java.lang.String getSystemProperty(java.lang.String property) {
		try 
			return java.lang.System.getProperty(property);
		 catch (java.lang.SecurityException ex) {
			java.lang.System.err.println((("Caught a SecurityException reading the system property '" + property) + "'; the SystemUtils property value will default to null."));
			return null;
		}
	}

	public static java.io.File getUserDir() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_DIR_KEY));
	}

	public static java.io.File getUserHome() {
		return new java.io.File(java.lang.System.getProperty(org.apache.commons.lang3.SystemUtils.USER_HOME_KEY));
	}

	public static boolean isJavaAwtHeadless() {
		return (org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS) != null ? org.apache.commons.lang3.SystemUtils.JAVA_AWT_HEADLESS.equals(java.lang.Boolean.TRUE.toString()) : false;
	}

	public static boolean isJavaVersionAtLeast(float requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_FLOAT) >= requiredVersion;
	}

	public static boolean isJavaVersionAtLeast(int requiredVersion) {
		return (org.apache.commons.lang3.SystemUtils.JAVA_VERSION_INT) >= requiredVersion;
	}

	static boolean isJavaVersionMatch(java.lang.String version, java.lang.String versionPrefix) {
		if (version == null) {
			return false;
		}
		return version.startsWith(versionPrefix);
	}

	static boolean isOSMatch(java.lang.String osName, java.lang.String osVersion, java.lang.String osNamePrefix, java.lang.String osVersionPrefix) {
		if ((osName == null) || (osVersion == null)) {
			return false;
		}
		return (osName.startsWith(osNamePrefix)) && (osVersion.startsWith(osVersionPrefix));
	}

	static boolean isOSNameMatch(java.lang.String osName, java.lang.String osNamePrefix) {
		if (osName == null) {
			return false;
		}
		return osName.startsWith(osNamePrefix);
	}

	static float toJavaVersionFloat(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionFloat(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int toJavaVersionInt(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toVersionInt(org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, org.apache.commons.lang3.SystemUtils.JAVA_VERSION_TRIM_SIZE));
	}

	static int[] toJavaVersionIntArray(java.lang.String version) {
		return org.apache.commons.lang3.SystemUtils.toJavaVersionIntArray(version, java.lang.Integer.MAX_VALUE);
	}

	private static int[] toJavaVersionIntArray(java.lang.String version, int limit) {
		if (version == null) {
			return org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY;
		}
		java.lang.String[] strings = java.util.regex.Pattern.compile("[^\\d]").split(version);
		int[] ints = new int[java.lang.Math.min(limit, strings.length)];
		int j = 0;
		for (int i = 0; (i < (strings.length)) && (j < limit); i++) {
			java.lang.String s = strings[i];
			if ((s.length()) > 0)
				ints[(j++)] = java.lang.Integer.parseInt(s);
			
		}
		return ints;
	}

	private static float toVersionFloat(int[] javaVersions) {
		if ((javaVersions == null) || ((javaVersions.length) == 0)) {
			return 0.0F;
		}
		if ((javaVersions.length) == 1) {
			return javaVersions[0];
		}
		java.lang.StringBuilder builder = new java.lang.StringBuilder();
		builder.append(javaVersions[0]);
		builder.append('.');
		for (int i = 1; i < (javaVersions.length); i++)
			builder.append(javaVersions[i]);
		
		try 
			return java.lang.Float.parseFloat(builder.toString());
		 catch (java.lang.Exception ex) {
			return 0.0F;
		}
	}

	private static int toVersionInt(int[] javaVersions) {
		if (javaVersions == null) {
			return 0;
		}
		int intVersion = 0;
		int len = javaVersions.length;
		if (len >= 1)
			intVersion = (javaVersions[0]) * 100;
		
		if (len >= 2)
			intVersion += (javaVersions[1]) * 10;
		
		if (len >= 3)
			intVersion += javaVersions[2];
		
		return intVersion;
	}

	public SystemUtils() {
		super();
	}
}
2019-04-14 13:55:47,296 INFO main - Time Repair Loop (s): 471.369
2019-04-14 13:55:47,296 INFO main - 
----SUMMARY_EXECUTION---
2019-04-14 13:55:47,296 INFO main - 
successful_ing_attempts (0): []
2019-04-14 13:55:47,296 INFO main - 
failing_ing_attempts (600): [6, 23, 2, 10, 4, 5, 16, 5, 3, 2, 1, 0, 0, 16, 0, 7, 2, 19, 0, 6, 0, 2, 8, 8, 0, 5, 0, 13, 2, 0, 16, 3, 0, 0, 9, 0, 0, 9, 5, 3, 1, 6, 4, 17, 2, 3, 0, 3, 0, 7, 0, 3, 0, 7, 7, 0, 0, 8, 3, 1, 0, 4, 0, 8, 15, 1, 10, 17, 4, 2, 1, 6, 0, 0, 10, 6, 23, 7, 1, 5, 0, 177, 2, 6, 5, 6, 10, 2, 3, 0, 2, 0, 0, 0, 5, 5, 7, 0, 8, 3, 124, 0, 7, 2, 15, 2, 1, 1, 0, 0, 2, 1, 12, 5, 24, 0, 2, 0, 0, 0, 5, 0, 25, 10, 3, 0, 0, 4, 0, 1, 0, 2, 0, 0, 5, 0, 0, 27, 9, 0, 4, 4, 0, 2, 0, 5, 0, 7, 0, 3, 5, 42, 0, 0, 18, 2, 1, 7, 2, 0, 1, 19, 4, 26, 0, 2, 0, 1, 2, 1, 0, 5, 2, 7, 4, 2, 1, 16, 0, 0, 3, 0, 2, 5, 3, 1, 1, 0, 5, 0, 0, 1, 5, 3, 36, 9, 2, 3, 0, 9, 0, 1, 11, 6, 1, 2, 11, 25, 2, 6, 3, 0, 2, 4, 5, 2, 13, 7, 0, 1, 0, 1, 4, 3, 0, 5, 0, 0, 0, 2, 22, 1, 23, 7, 0, 7, 5, 93, 0, 0, 2, 7, 1, 8, 0, 3, 18, 12, 0, 2, 3, 5, 2, 1, 7, 30, 27, 0, 9, 8, 0, 1, 0, 0, 21, 302, 0, 0, 3, 1, 0, 3, 90, 96, 0, 1, 6, 0, 12, 15, 2, 2, 6, 3, 0, 13, 12, 0, 8, 6, 6, 4, 0, 1, 1, 1, 0, 8, 0, 3, 13, 0, 19, 16, 2, 27, 25, 5, 3, 2, 1, 5, 6, 5, 4, 0, 4, 0, 1, 0, 1, 8, 8, 26, 0, 43, 0, 4, 7, 7, 0, 11, 27, 6, 3, 0, 2, 7, 1, 1, 8, 0, 3, 1, 7, 3, 3, 2, 1, 3, 2, 0, 1, 1, 5, 0, 6, 66, 10, 0, 0, 0, 0, 1, 6, 4, 6, 0, 8, 11, 3, 2, 10, 0, 6, 2, 3, 3, 1, 0, 0, 5, 10, 35, 1, 8, 0, 21, 0, 5, 0, 8, 7, 0, 14, 14, 1, 19, 13, 1, 1, 1, 2, 0, 8, 9, 1, 0, 41, 28, 15, 4, 0, 1, 6, 2, 8, 14, 0, 1, 1, 0, 3, 0, 0, 2, 13, 0, 9, 0, 1, 0, 1, 9, 4, 4, 6, 1, 1, 4, 8, 3, 3, 15, 8, 0, 6, 11, 0, 0, 18, 0, 0, 1, 0, 8, 3, 6, 0, 3, 34, 31, 25, 1, 11, 22, 12, 2, 16, 17, 0, 3, 10, 66, 2, 3, 83, 5, 1, 2, 3, 1, 14, 1, 24, 0, 2, 3, 1, 7, 4, 3, 2, 14, 18, 2, 2, 1, 0, 0, 1, 6, 0, 2, 0, 1, 4, 6, 16, 1, 0, 1, 0, 2, 2, 8, 8, 4, 18, 4, 6, 1, 0, 3, 62, 3, 6, 0, 10, 4, 8, 3, 0, 3, 3, 6, 8, 1, 2, 0, 7, 7, 3, 3, 1, 0, 4, 0, 1, 5, 3, 0, 2, 2, 1, 17, 0, 0, 39, 1, 1, 64, 11, 3, 25, 0, 102, 0, 3, 0, 5, 2, 10, 19, 6, 7, 1, 1, 15, 5, 8, 0, 9, 7, 0, 1, 25, 5, 2, 13, 2, 6, 43, 4, 4, 4, 4, 6, 16, 6]
2019-04-14 13:55:47,296 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 518.382
[DONE]
