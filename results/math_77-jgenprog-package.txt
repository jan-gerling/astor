2019-04-12 15:37:47,269 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  package  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/math_77/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-12 15:37:50,336 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_77//bin//default from 230 classes with test cases
2019-04-12 15:37:50,336 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-12 15:37:52,169 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-math_77//bin//default]
2019-04-12 15:38:23,882 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions
2019-04-12 15:38:23,899 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions
2019-04-12 15:38:23,906 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:2129, fails: 2, GZoltar suspicious 17017
2019-04-12 15:38:23,923 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 33 with susp > 0.5, we consider: 33
2019-04-12 15:38:23,954 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_77//src//default, compliance level: 8
2019-04-12 15:38:42,022 INFO main - 
---- Initial suspicious size: 33
2019-04-12 15:38:42,430 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.AbstractRealVector, methodName=org.apache.commons.math.linear.AbstractRealVector{getNorm()D 0.0, lineNumber=216, susp=0.7071067811865475]
2019-04-12 15:38:43,862 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.OpenMapRealVector, methodName=org.apache.commons.math.linear.OpenMapRealVector{access$000(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; 0.0, lineNumber=30, susp=0.5]
2019-04-12 15:38:44,077 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator, methodName=org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator{next()Ljava/lang/Object; 0.0, lineNumber=854, susp=0.5]
2019-04-12 15:38:44,077 INFO main - Total suspicious from FL: 33,  30
2019-04-12 15:38:44,077 INFO main - Total ModPoint created: 30
2019-04-12 15:38:44,077 INFO main - Creating program variant #1, [Variant id: 1, #gens: 30, #ops: 0, parent:-]
2019-04-12 15:38:44,320 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.AbstractRealVector, methodName=org.apache.commons.math.linear.AbstractRealVector{getNorm()D 0.0, lineNumber=216, susp=0.7071067811865475]
2019-04-12 15:38:45,164 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.OpenMapRealVector, methodName=org.apache.commons.math.linear.OpenMapRealVector{access$000(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; 0.0, lineNumber=30, susp=0.5]
2019-04-12 15:38:45,282 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator, methodName=org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator{next()Ljava/lang/Object; 0.0, lineNumber=854, susp=0.5]
2019-04-12 15:38:45,282 INFO main - Total suspicious from FL: 33,  30
2019-04-12 15:38:45,282 INFO main - Total ModPoint created: 30
2019-04-12 15:38:45,282 INFO main - Creating program variant #2, [Variant id: 2, #gens: 30, #ops: 0, parent:-]
2019-04-12 15:38:45,497 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.AbstractRealVector, methodName=org.apache.commons.math.linear.AbstractRealVector{getNorm()D 0.0, lineNumber=216, susp=0.7071067811865475]
2019-04-12 15:38:46,230 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.OpenMapRealVector, methodName=org.apache.commons.math.linear.OpenMapRealVector{access$000(Lorg/apache/commons/math/linear/OpenMapRealVector;)Lorg/apache/commons/math/util/OpenIntToDoubleHashMap; 0.0, lineNumber=30, susp=0.5]
2019-04-12 15:38:46,290 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator, methodName=org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator{next()Ljava/lang/Object; 0.0, lineNumber=854, susp=0.5]
2019-04-12 15:38:46,290 INFO main - Total suspicious from FL: 33,  30
2019-04-12 15:38:46,290 INFO main - Total ModPoint created: 30
2019-04-12 15:38:46,290 INFO main - Creating program variant #3, [Variant id: 3, #gens: 30, #ops: 0, parent:-]
2019-04-12 15:39:53,296 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 15:39:53,296 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-12 15:39:53,297 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-12 15:39:53,297 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-12 15:39:53,300 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-12 15:39:53,300 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-12 15:39:53,300 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-12 15:39:53,301 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-12 15:39:53,301 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-12 15:39:53,308 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/math_77/
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-12 15:39:53,316 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 15:39:53,323 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= package
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-12 15:39:53,324 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-12 15:39:53,328 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-12 15:39:53,329 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-12 15:39:53,329 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-12 15:39:53,329 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 15:39:53,329 INFO main - 
----Starting Solution Search
2019-04-12 15:40:05,663 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:40:05,663 ERROR main - Undo Error: original: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data) {
			sum += java.lang.Math.abs(a);
		}
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:40:05,671 ERROR main - Undo Error: modified: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:40:30,278 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:40:30,278 ERROR main - Undo Error: original: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data) {
			sum += java.lang.Math.abs(a);
		}
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:40:30,298 ERROR main - Undo Error: modified: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:41:27,361 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:41:27,379 ERROR main - Undo Error: original: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data) {
			sum += java.lang.Math.abs(a);
		}
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:41:27,387 ERROR main - Undo Error: modified: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:42:27,745 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:42:27,745 ERROR main - Undo Error: original: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:42:27,753 ERROR main - Undo Error: modified: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data)
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:43:09,007 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:43:09,007 ERROR main - Undo Error: original: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data) {
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		}
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:43:09,025 ERROR main - Undo Error: modified: 
public class ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable {
	private static final java.lang.String NON_FITTING_POSITION_AND_SIZE_MESSAGE = "position {0} and size {1} don't fit to the size of the input array {2}";

	private static final long serialVersionUID = -1097961340710804027L;

	private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT = org.apache.commons.math.linear.RealVectorFormat.getInstance();

	protected double[] data;

	public ArrayRealVector() {
		data = new double[0];
	}

	public ArrayRealVector(int size) {
		data = new double[size];
	}

	public ArrayRealVector(int size, double preset) {
		data = new double[size];
		java.util.Arrays.fill(data, preset);
	}

	public ArrayRealVector(double[] d) {
		data = d.clone();
	}

	public ArrayRealVector(double[] d, boolean copyArray) throws java.lang.IllegalArgumentException, java.lang.NullPointerException {
		if (d == null) {
			throw new java.lang.NullPointerException();
		}
		if ((d.length) == 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
		}
		data = (copyArray) ? d.clone() : d;
	}

	public ArrayRealVector(double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		java.lang.System.arraycopy(d, pos, data, 0, size);
	}

	public ArrayRealVector(java.lang.Double[] d) {
		data = new double[d.length];
		for (int i = 0; i < (d.length); i++) {
			data[i] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(java.lang.Double[] d, int pos, int size) {
		if ((d.length) < (pos + size)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.linear.ArrayRealVector.NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length);
		}
		data = new double[size];
		for (int i = pos; i < (pos + size); i++) {
			data[(i - pos)] = d[i].doubleValue();
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v) {
		data = new double[v.getDimension()];
		for (int i = 0; i < (data.length); ++i) {
			data[i] = v.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v) {
		this(v, true);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v, boolean deep) {
		data = (deep) ? v.data.clone() : v.data;
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		data = new double[(v1.data.length) + (v2.data.length)];
		java.lang.System.arraycopy(v1.data, 0, data, 0, v1.data.length);
		java.lang.System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, org.apache.commons.math.linear.RealVector v2) {
		final int l1 = v1.data.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		for (int i = 0; i < l2; ++i) {
			data[(l1 + i)] = v2.getEntry(i);
		}
	}

	public ArrayRealVector(org.apache.commons.math.linear.RealVector v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.data.length;
		data = new double[l1 + l2];
		for (int i = 0; i < l1; ++i) {
			data[i] = v1.getEntry(i);
		}
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(org.apache.commons.math.linear.ArrayRealVector v1, double[] v2) {
		final int l1 = v1.getDimension();
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1.data, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, org.apache.commons.math.linear.ArrayRealVector v2) {
		final int l1 = v1.length;
		final int l2 = v2.getDimension();
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2.data, 0, data, l1, l2);
	}

	public ArrayRealVector(double[] v1, double[] v2) {
		final int l1 = v1.length;
		final int l2 = v2.length;
		data = new double[l1 + l2];
		java.lang.System.arraycopy(v1, 0, data, 0, l1);
		java.lang.System.arraycopy(v2, 0, data, l1, l2);
	}

	public org.apache.commons.math.linear.AbstractRealVector copy() {
		return new org.apache.commons.math.linear.ArrayRealVector(this, true);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return add(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] += e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] += v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (add(v.data)));
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return subtract(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				out[e.getIndex()] -= e.getValue();
			} 
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] -= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (subtract(v.data)));
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) + d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) - d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) * d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = (data[i]) / d;
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.pow(data[i], d);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.exp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.expm1(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log10(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.log1p(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cosh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sinh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tanh(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.tan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.acos(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.asin(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.atan(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = 1.0 / (data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.abs(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.sqrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.cbrt(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ceil(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.floor(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.rint(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.signum(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		for (int i = 0; i < (data.length); i++) {
			data[i] = java.lang.Math.ulp(data[i]);
		}
		return this;
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeMultiply(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] *= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] *= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeMultiply(v.data)));
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return ebeDivide(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double[] out = data.clone();
			for (int i = 0; i < (data.length); i++) {
				out[i] /= v.getEntry(i);
			}
			return new org.apache.commons.math.linear.ArrayRealVector(out, false);
		}
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double[] out = data.clone();
		for (int i = 0; i < (data.length); i++) {
			out[i] /= v[i];
		}
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return ((org.apache.commons.math.linear.ArrayRealVector) (ebeDivide(v.data)));
	}

	public double[] getData() {
		return data.clone();
	}

	public double[] getDataRef() {
		return data;
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return dotProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double dot = 0;
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry e;
			while ((it.hasNext()) && ((e = it.next()) != null)) {
				dot += (data[e.getIndex()]) * (e.getValue());
			} 
			return dot;
		}
	}

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double dot = 0;
		for (int i = 0; i < (data.length); i++) {
			dot += (data[i]) * (v[i]);
		}
		return dot;
	}

	public double dotProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return dotProduct(v.data);
	}

	@java.lang.Override
	public double getNorm() {
		double sum = 0;
		for (double a : data) {
			sum += a * a;
		}
		return java.lang.Math.sqrt(sum);
	}

	@java.lang.Override
	public double getL1Norm() {
		double sum = 0;
		for (double a : data)
			sum += java.lang.Math.abs(a);
		
		return sum;
	}

	@java.lang.Override
	public double getLInfNorm() {
		double max = 0;
		for (double a : data)
			max += java.lang.Math.max(max, java.lang.Math.abs(a));
		
		return max;
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += delta * delta;
			}
			return java.lang.Math.sqrt(sum);
		}
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += delta * delta;
		}
		return java.lang.Math.sqrt(sum);
	}

	public double getDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getDistance(v.data);
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getL1Distance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double sum = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				sum += java.lang.Math.abs(delta);
			}
			return sum;
		}
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double sum = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			sum += java.lang.Math.abs(delta);
		}
		return sum;
	}

	public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getL1Distance(v.data);
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return getLInfDistance(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			double max = 0;
			for (int i = 0; i < (data.length); ++i) {
				final double delta = (data[i]) - (v.getEntry(i));
				max = java.lang.Math.max(max, java.lang.Math.abs(delta));
			}
			return max;
		}
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double max = 0;
		for (int i = 0; i < (data.length); ++i) {
			final double delta = (data[i]) - (v[i]);
			max = java.lang.Math.max(max, java.lang.Math.abs(delta));
		}
		return max;
	}

	public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return getLInfDistance(v.data);
	}

	public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("zero norm");
		}
		return mapDivide(norm);
	}

	public void unitize() throws java.lang.ArithmeticException {
		final double norm = getNorm();
		if (norm == 0) {
			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
		}
		mapDivideToSelf(norm);
	}

	public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) {
		return v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector v) {
		return ((org.apache.commons.math.linear.ArrayRealVector) (v.mapMultiply(((dotProduct(v)) / (v.dotProduct(v))))));
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			return outerProduct(((org.apache.commons.math.linear.ArrayRealVector) (v)));
		}else {
			checkVectorDimensions(v);
			final int m = data.length;
			final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
			for (int i = 0; i < (data.length); i++) {
				for (int j = 0; j < (data.length); j++) {
					out.setEntry(i, j, ((data[i]) * (v.getEntry(j))));
				}
			}
			return out;
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector v) throws java.lang.IllegalArgumentException {
		return outerProduct(v.data);
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		final int m = data.length;
		final org.apache.commons.math.linear.RealMatrix out = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(m, m);
		for (int i = 0; i < (data.length); i++) {
			for (int j = 0; j < (data.length); j++) {
				out.setEntry(i, j, ((data[i]) * (v[j])));
			}
		}
		return out;
	}

	public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {
		return data[index];
	}

	public int getDimension() {
		return data.length;
	}

	public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector v) {
		try {
			return new org.apache.commons.math.linear.ArrayRealVector(this, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
		} catch (java.lang.ClassCastException cce) {
			return new org.apache.commons.math.linear.ArrayRealVector(this, v);
		}
	}

	public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector v) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, v);
	}

	public org.apache.commons.math.linear.RealVector append(double in) {
		final double[] out = new double[(data.length) + 1];
		java.lang.System.arraycopy(data, 0, out, 0, data.length);
		out[data.length] = in;
		return new org.apache.commons.math.linear.ArrayRealVector(out, false);
	}

	public org.apache.commons.math.linear.RealVector append(double[] in) {
		return new org.apache.commons.math.linear.ArrayRealVector(this, in);
	}

	public org.apache.commons.math.linear.RealVector getSubVector(int index, int n) {
		org.apache.commons.math.linear.ArrayRealVector out = new org.apache.commons.math.linear.ArrayRealVector(n);
		try {
			java.lang.System.arraycopy(data, index, out.data, 0, n);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + n) - 1));
		}
		return out;
	}

	public void setEntry(int index, double value) {
		try {
			data[index] = value;
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) {
		try {
			try {
				set(index, ((org.apache.commons.math.linear.ArrayRealVector) (v)));
			} catch (java.lang.ClassCastException cce) {
				for (int i = index; i < (index + (v.getDimension())); ++i) {
					data[i] = v.getEntry((i - index));
				}
			}
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.getDimension())) - 1));
		}
	}

	public void setSubVector(int index, double[] v) {
		try {
			java.lang.System.arraycopy(v, 0, data, index, v.length);
		} catch (java.lang.IndexOutOfBoundsException e) {
			checkIndex(index);
			checkIndex(((index + (v.length)) - 1));
		}
	}

	public void set(int index, org.apache.commons.math.linear.ArrayRealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		setSubVector(index, v.data);
	}

	public void set(double value) {
		java.util.Arrays.fill(data, value);
	}

	public double[] toArray() {
		return data.clone();
	}

	@java.lang.Override
	public java.lang.String toString() {
		return org.apache.commons.math.linear.ArrayRealVector.DEFAULT_FORMAT.format(this);
	}

	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		if ((data.length) != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", data.length, n);
		}
	}

	public boolean isNaN() {
		for (double v : data) {
			if (java.lang.Double.isNaN(v)) {
				return true;
			}
		}
		return false;
	}

	public boolean isInfinite() {
		if (isNaN()) {
			return false;
		}
		for (double v : data) {
			if (java.lang.Double.isInfinite(v)) {
				return true;
			}
		}
		return false;
	}

	@java.lang.Override
	public boolean equals(java.lang.Object other) {
		if ((this) == other) {
			return true;
		}
		if ((other == null) || (!(other instanceof org.apache.commons.math.linear.RealVector))) {
			return false;
		}
		org.apache.commons.math.linear.RealVector rhs = ((org.apache.commons.math.linear.RealVector) (other));
		if ((data.length) != (rhs.getDimension())) {
			return false;
		}
		if (rhs.isNaN()) {
			return this.isNaN();
		}
		for (int i = 0; i < (data.length); ++i) {
			if ((data[i]) != (rhs.getEntry(i))) {
				return false;
			}
		}
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (isNaN()) {
			return 9;
		}
		return org.apache.commons.math.util.MathUtils.hash(data);
	}
}
2019-04-12 15:43:25,619 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:43:25,620 ERROR main - Undo Error: original: 
public abstract class AbstractRealVector implements org.apache.commons.math.linear.RealVector {
	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		double d = getDimension();
		if (d != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", d, n);
		}
	}

	protected void checkIndex(final int index) throws org.apache.commons.math.linear.MatrixIndexException {
		if ((index < 0) || (index >= (getDimension()))) {
			throw new org.apache.commons.math.linear.MatrixIndexException("index {0} out of allowed range [{1}, {2}]", index, 0, ((getDimension()) - 1));
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.getDimension())) - 1));
		setSubVector(index, v.getData());
	}

	public void setSubVector(int index, double[] v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.length)) - 1));
		for (int i = 0; i < (v.length); i++) {
			setEntry((i + index), v[i]);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			result[e.getIndex()] += e.getValue();
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result[index] = (e.getValue()) - (result[index]);
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			v.setEntry(index, ((e.getValue()) - (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector mapAdd(double d) {
		return copy().mapAddToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		if (d != 0) {
			try {
				return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.ADD.fix1stArgument(d));
			} catch (org.apache.commons.math.FunctionEvaluationException e) {
				throw new java.lang.IllegalArgumentException(e);
			}
		}
		return this;
	}

	public abstract org.apache.commons.math.linear.AbstractRealVector copy();

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		return dotProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += (e.getValue()) * (v.getEntry(e.getIndex()));
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		return ebeDivide(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		return ebeMultiply(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
			d += diff * diff;
		} 
		return java.lang.Math.sqrt(d);
	}

	public double getNorm() {
		double sum = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double value = e.getValue();
			sum += value * value;
		} 
		return java.lang.Math.sqrt(sum);
	}

	public double getL1Norm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			norm += java.lang.Math.abs(e.getValue());
		} 
		return norm;
	}

	public double getLInfNorm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			norm = java.lang.Math.max(norm, java.lang.Math.abs(e.getValue()));
		} 
		return norm;
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		return getDistance(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
		} 
		return d;
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()])));
		} 
		return d;
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
		} 
		return d;
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()]))), d);
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector mapAbs() {
		return copy().mapAbsToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ABS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAcos() {
		return copy().mapAcosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ACOS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAsin() {
		return copy().mapAsinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ASIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAtan() {
		return copy().mapAtanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ATAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCbrt() {
		return copy().mapCbrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CBRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCeil() {
		return copy().mapCeilToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CEIL);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCos() {
		return copy().mapCosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCosh() {
		return copy().mapCoshToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COSH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapDivide(double d) {
		return copy().mapDivideToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.DIVIDE.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExp() {
		return copy().mapExpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExpm1() {
		return copy().mapExpm1ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXPM1);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapFloor() {
		return copy().mapFloorToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.FLOOR);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapInv() {
		return copy().mapInvToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.INVERT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog() {
		return copy().mapLogToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog10() {
		return copy().mapLog10ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG10);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog1p() {
		return copy().mapLog1pToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG1P);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapMultiply(double d) {
		return copy().mapMultiplyToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.MULTIPLY.fix1stArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapPow(double d) {
		return copy().mapPowToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.POW.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapRint() {
		return copy().mapRintToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.RINT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSignum() {
		return copy().mapSignumToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIGNUM);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSin() {
		return copy().mapSinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSinh() {
		return copy().mapSinhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SINH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSqrt() {
		return copy().mapSqrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SQRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSubtract(double d) {
		return copy().mapSubtractToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		return mapAddToSelf((-d));
	}

	public org.apache.commons.math.linear.RealVector mapTan() {
		return copy().mapTanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapTanh() {
		return copy().mapTanhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TANH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapUlp() {
		return copy().mapUlpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ULP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		org.apache.commons.math.linear.RealMatrix product;
		if ((v instanceof org.apache.commons.math.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math.linear.SparseRealVector)) {
			product = new org.apache.commons.math.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());
		}else {
			product = new org.apache.commons.math.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());
		}
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> thisIt = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry thisE = null;
		while ((thisIt.hasNext()) && ((thisE = thisIt.next()) != null)) {
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> otherIt = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry otherE = null;
			while ((otherIt.hasNext()) && ((otherE = otherIt.next()) != null)) {
				product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
			} 
		} 
		return product;
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		return outerProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) throws java.lang.IllegalArgumentException {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public void set(double value) {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e = null;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(value);
		} 
	}

	public double[] toArray() {
		int dim = getDimension();
		double[] values = new double[dim];
		for (int i = 0; i < dim; i++) {
			values[i] = getEntry(i);
		}
		return values;
	}

	public double[] getData() {
		return toArray();
	}

	public org.apache.commons.math.linear.RealVector unitVector() {
		org.apache.commons.math.linear.RealVector copy = copy();
		copy.unitize();
		return copy;
	}

	public void unitize() {
		mapDivideToSelf(getNorm());
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> sparseIterator() {
		return new org.apache.commons.math.linear.AbstractRealVector.SparseEntryIterator();
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> iterator() {
		final int dim = getDimension();
		return new java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry>() {
			private int i = 0;

			private org.apache.commons.math.linear.AbstractRealVector.EntryImpl e = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

			public boolean hasNext() {
				return (i) < dim;
			}

			public org.apache.commons.math.linear.RealVector.Entry next() {
				e.setIndex(((i)++));
				return e;
			}

			public void remove() {
				throw new java.lang.UnsupportedOperationException("Not supported");
			}
		};
	}

	public org.apache.commons.math.linear.RealVector map(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		return copy().mapToSelf(function);
	}

	public org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(function.value(e.getValue()));
		} 
		return this;
	}

	protected class EntryImpl extends org.apache.commons.math.linear.RealVector.Entry {
		public EntryImpl() {
			setIndex(0);
		}

		public double getValue() {
			return getEntry(getIndex());
		}

		public void setValue(double newValue) {
			setEntry(getIndex(), newValue);
		}
	}

	protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> {
		private final int dim;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl tmp = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl current;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl next;

		protected SparseEntryIterator() {
			dim = getDimension();
			current = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
			if ((current.getValue()) == 0) {
				advance(current);
			}
			if ((current.getIndex()) >= 0) {
				next = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
				next.setIndex(current.getIndex());
				advance(next);
			}else {
				current = null;
			}
		}

		protected void advance(org.apache.commons.math.linear.AbstractRealVector.EntryImpl e) {
			if (e == null) {
				return ;
			}
			do {
				e.setIndex(((e.getIndex()) + 1));
			} while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
			if ((e.getIndex()) >= (dim)) {
				e.setIndex((-1));
			}
		}

		public boolean hasNext() {
			return (current) != null;
		}

		public org.apache.commons.math.linear.RealVector.Entry next() {
			tmp.setIndex(current.getIndex());
			if ((next) != null) {
				current.setIndex(next.getIndex());
				advance(next);
				if ((next.getIndex()) < 0) {
					next = null;
				}
			}else {
				current = null;
			}
			return tmp;
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException("Not supported");
		}
	}
}
2019-04-12 15:43:25,697 ERROR main - Undo Error: modified: 
public abstract class AbstractRealVector implements org.apache.commons.math.linear.RealVector {
	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		double d = getDimension();
		if (d != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", d, n);
		}
	}

	protected void checkIndex(final int index) throws org.apache.commons.math.linear.MatrixIndexException {
		if ((index < 0) || (index >= (getDimension()))) {
			throw new org.apache.commons.math.linear.MatrixIndexException("index {0} out of allowed range [{1}, {2}]", index, 0, ((getDimension()) - 1));
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.getDimension())) - 1));
		setSubVector(index, v.getData());
	}

	public void setSubVector(int index, double[] v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.length)) - 1));
		for (int i = 0; i < (v.length); i++) {
			setEntry((i + index), v[i]);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			result[e.getIndex()] += e.getValue();
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result[index] = (e.getValue()) - (result[index]);
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			v.setEntry(index, ((e.getValue()) - (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector mapAdd(double d) {
		return copy().mapAddToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		if (d != 0) {
			try {
				return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.ADD.fix1stArgument(d));
			} catch (org.apache.commons.math.FunctionEvaluationException e) {
				throw new java.lang.IllegalArgumentException(e);
			}
		}
		return this;
	}

	public abstract org.apache.commons.math.linear.AbstractRealVector copy();

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		return dotProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += (e.getValue()) * (v.getEntry(e.getIndex()));
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		return ebeDivide(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		return ebeMultiply(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
			d += diff * diff;
		} 
		return java.lang.Math.sqrt(d);
	}

	public double getNorm() {
		double sum = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double value = e.getValue();
			sum += value * value;
		} 
		return java.lang.Math.sqrt(sum);
	}

	public double getL1Norm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null))
			norm += java.lang.Math.abs(e.getValue());
		
		return norm;
	}

	public double getLInfNorm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			norm = java.lang.Math.max(norm, java.lang.Math.abs(e.getValue()));
		} 
		return norm;
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		return getDistance(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
		} 
		return d;
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()])));
		} 
		return d;
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
		} 
		return d;
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()]))), d);
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector mapAbs() {
		return copy().mapAbsToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ABS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAcos() {
		return copy().mapAcosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ACOS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAsin() {
		return copy().mapAsinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ASIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAtan() {
		return copy().mapAtanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ATAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCbrt() {
		return copy().mapCbrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CBRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCeil() {
		return copy().mapCeilToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CEIL);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCos() {
		return copy().mapCosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCosh() {
		return copy().mapCoshToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COSH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapDivide(double d) {
		return copy().mapDivideToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.DIVIDE.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExp() {
		return copy().mapExpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExpm1() {
		return copy().mapExpm1ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXPM1);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapFloor() {
		return copy().mapFloorToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.FLOOR);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapInv() {
		return copy().mapInvToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.INVERT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog() {
		return copy().mapLogToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog10() {
		return copy().mapLog10ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG10);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog1p() {
		return copy().mapLog1pToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG1P);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapMultiply(double d) {
		return copy().mapMultiplyToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.MULTIPLY.fix1stArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapPow(double d) {
		return copy().mapPowToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.POW.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapRint() {
		return copy().mapRintToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.RINT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSignum() {
		return copy().mapSignumToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIGNUM);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSin() {
		return copy().mapSinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSinh() {
		return copy().mapSinhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SINH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSqrt() {
		return copy().mapSqrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SQRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSubtract(double d) {
		return copy().mapSubtractToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		return mapAddToSelf((-d));
	}

	public org.apache.commons.math.linear.RealVector mapTan() {
		return copy().mapTanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapTanh() {
		return copy().mapTanhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TANH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapUlp() {
		return copy().mapUlpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ULP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		org.apache.commons.math.linear.RealMatrix product;
		if ((v instanceof org.apache.commons.math.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math.linear.SparseRealVector)) {
			product = new org.apache.commons.math.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());
		}else {
			product = new org.apache.commons.math.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());
		}
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> thisIt = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry thisE = null;
		while ((thisIt.hasNext()) && ((thisE = thisIt.next()) != null)) {
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> otherIt = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry otherE = null;
			while ((otherIt.hasNext()) && ((otherE = otherIt.next()) != null)) {
				product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
			} 
		} 
		return product;
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		return outerProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) throws java.lang.IllegalArgumentException {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public void set(double value) {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e = null;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(value);
		} 
	}

	public double[] toArray() {
		int dim = getDimension();
		double[] values = new double[dim];
		for (int i = 0; i < dim; i++) {
			values[i] = getEntry(i);
		}
		return values;
	}

	public double[] getData() {
		return toArray();
	}

	public org.apache.commons.math.linear.RealVector unitVector() {
		org.apache.commons.math.linear.RealVector copy = copy();
		copy.unitize();
		return copy;
	}

	public void unitize() {
		mapDivideToSelf(getNorm());
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> sparseIterator() {
		return new org.apache.commons.math.linear.AbstractRealVector.SparseEntryIterator();
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> iterator() {
		final int dim = getDimension();
		return new java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry>() {
			private int i = 0;

			private org.apache.commons.math.linear.AbstractRealVector.EntryImpl e = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

			public boolean hasNext() {
				return (i) < dim;
			}

			public org.apache.commons.math.linear.RealVector.Entry next() {
				e.setIndex(((i)++));
				return e;
			}

			public void remove() {
				throw new java.lang.UnsupportedOperationException("Not supported");
			}
		};
	}

	public org.apache.commons.math.linear.RealVector map(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		return copy().mapToSelf(function);
	}

	public org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(function.value(e.getValue()));
		} 
		return this;
	}

	protected class EntryImpl extends org.apache.commons.math.linear.RealVector.Entry {
		public EntryImpl() {
			setIndex(0);
		}

		public double getValue() {
			return getEntry(getIndex());
		}

		public void setValue(double newValue) {
			setEntry(getIndex(), newValue);
		}
	}

	protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> {
		private final int dim;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl tmp = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl current;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl next;

		protected SparseEntryIterator() {
			dim = getDimension();
			current = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
			if ((current.getValue()) == 0) {
				advance(current);
			}
			if ((current.getIndex()) >= 0) {
				next = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
				next.setIndex(current.getIndex());
				advance(next);
			}else {
				current = null;
			}
		}

		protected void advance(org.apache.commons.math.linear.AbstractRealVector.EntryImpl e) {
			if (e == null) {
				return ;
			}
			do {
				e.setIndex(((e.getIndex()) + 1));
			} while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
			if ((e.getIndex()) >= (dim)) {
				e.setIndex((-1));
			}
		}

		public boolean hasNext() {
			return (current) != null;
		}

		public org.apache.commons.math.linear.RealVector.Entry next() {
			tmp.setIndex(current.getIndex());
			if ((next) != null) {
				current.setIndex(next.getIndex());
				advance(next);
				if ((next.getIndex()) < 0) {
					next = null;
				}
			}else {
				current = null;
			}
			return tmp;
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException("Not supported");
		}
	}
}
2019-04-12 15:44:14,832 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 15:44:14,832 ERROR main - Undo Error: original: 
public abstract class AbstractRealVector implements org.apache.commons.math.linear.RealVector {
	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		double d = getDimension();
		if (d != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", d, n);
		}
	}

	protected void checkIndex(final int index) throws org.apache.commons.math.linear.MatrixIndexException {
		if ((index < 0) || (index >= (getDimension()))) {
			throw new org.apache.commons.math.linear.MatrixIndexException("index {0} out of allowed range [{1}, {2}]", index, 0, ((getDimension()) - 1));
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.getDimension())) - 1));
		setSubVector(index, v.getData());
	}

	public void setSubVector(int index, double[] v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.length)) - 1));
		for (int i = 0; i < (v.length); i++) {
			setEntry((i + index), v[i]);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			result[e.getIndex()] += e.getValue();
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result[index] = (e.getValue()) - (result[index]);
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			v.setEntry(index, ((e.getValue()) - (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector mapAdd(double d) {
		return copy().mapAddToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		if (d != 0) {
			try {
				return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.ADD.fix1stArgument(d));
			} catch (org.apache.commons.math.FunctionEvaluationException e) {
				throw new java.lang.IllegalArgumentException(e);
			}
		}
		return this;
	}

	public abstract org.apache.commons.math.linear.AbstractRealVector copy();

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		return dotProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += (e.getValue()) * (v.getEntry(e.getIndex()));
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		return ebeDivide(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		return ebeMultiply(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
			d += diff * diff;
		} 
		return java.lang.Math.sqrt(d);
	}

	public double getNorm() {
		double sum = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double value = e.getValue();
			sum += value * value;
		} 
		return java.lang.Math.sqrt(sum);
	}

	public double getL1Norm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			norm += java.lang.Math.abs(e.getValue());
		} 
		return norm;
	}

	public double getLInfNorm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			norm = java.lang.Math.max(norm, java.lang.Math.abs(e.getValue()));
		} 
		return norm;
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		return getDistance(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
		} 
		return d;
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()])));
		} 
		return d;
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
		} 
		return d;
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()]))), d);
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector mapAbs() {
		return copy().mapAbsToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ABS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAcos() {
		return copy().mapAcosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ACOS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAsin() {
		return copy().mapAsinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ASIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAtan() {
		return copy().mapAtanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ATAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCbrt() {
		return copy().mapCbrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CBRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCeil() {
		return copy().mapCeilToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CEIL);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCos() {
		return copy().mapCosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCosh() {
		return copy().mapCoshToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COSH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapDivide(double d) {
		return copy().mapDivideToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.DIVIDE.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExp() {
		return copy().mapExpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExpm1() {
		return copy().mapExpm1ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXPM1);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapFloor() {
		return copy().mapFloorToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.FLOOR);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapInv() {
		return copy().mapInvToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.INVERT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog() {
		return copy().mapLogToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog10() {
		return copy().mapLog10ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG10);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog1p() {
		return copy().mapLog1pToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG1P);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapMultiply(double d) {
		return copy().mapMultiplyToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.MULTIPLY.fix1stArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapPow(double d) {
		return copy().mapPowToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.POW.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapRint() {
		return copy().mapRintToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.RINT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSignum() {
		return copy().mapSignumToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIGNUM);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSin() {
		return copy().mapSinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSinh() {
		return copy().mapSinhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SINH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSqrt() {
		return copy().mapSqrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SQRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSubtract(double d) {
		return copy().mapSubtractToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		return mapAddToSelf((-d));
	}

	public org.apache.commons.math.linear.RealVector mapTan() {
		return copy().mapTanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapTanh() {
		return copy().mapTanhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TANH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapUlp() {
		return copy().mapUlpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ULP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		org.apache.commons.math.linear.RealMatrix product;
		if ((v instanceof org.apache.commons.math.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math.linear.SparseRealVector)) {
			product = new org.apache.commons.math.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());
		}else {
			product = new org.apache.commons.math.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());
		}
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> thisIt = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry thisE = null;
		while ((thisIt.hasNext()) && ((thisE = thisIt.next()) != null)) {
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> otherIt = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry otherE = null;
			while ((otherIt.hasNext()) && ((otherE = otherIt.next()) != null)) {
				product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
			} 
		} 
		return product;
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		return outerProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) throws java.lang.IllegalArgumentException {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public void set(double value) {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e = null;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(value);
		} 
	}

	public double[] toArray() {
		int dim = getDimension();
		double[] values = new double[dim];
		for (int i = 0; i < dim; i++) {
			values[i] = getEntry(i);
		}
		return values;
	}

	public double[] getData() {
		return toArray();
	}

	public org.apache.commons.math.linear.RealVector unitVector() {
		org.apache.commons.math.linear.RealVector copy = copy();
		copy.unitize();
		return copy;
	}

	public void unitize() {
		mapDivideToSelf(getNorm());
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> sparseIterator() {
		return new org.apache.commons.math.linear.AbstractRealVector.SparseEntryIterator();
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> iterator() {
		final int dim = getDimension();
		return new java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry>() {
			private int i = 0;

			private org.apache.commons.math.linear.AbstractRealVector.EntryImpl e = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

			public boolean hasNext() {
				return (i) < dim;
			}

			public org.apache.commons.math.linear.RealVector.Entry next() {
				e.setIndex(((i)++));
				return e;
			}

			public void remove() {
				throw new java.lang.UnsupportedOperationException("Not supported");
			}
		};
	}

	public org.apache.commons.math.linear.RealVector map(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		return copy().mapToSelf(function);
	}

	public org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(function.value(e.getValue()));
		} 
		return this;
	}

	protected class EntryImpl extends org.apache.commons.math.linear.RealVector.Entry {
		public EntryImpl() {
			setIndex(0);
		}

		public double getValue() {
			return getEntry(getIndex());
		}

		public void setValue(double newValue) {
			setEntry(getIndex(), newValue);
		}
	}

	protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> {
		private final int dim;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl tmp = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl current;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl next;

		protected SparseEntryIterator() {
			dim = getDimension();
			current = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
			if ((current.getValue()) == 0) {
				advance(current);
			}
			if ((current.getIndex()) >= 0) {
				next = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
				next.setIndex(current.getIndex());
				advance(next);
			}else {
				current = null;
			}
		}

		protected void advance(org.apache.commons.math.linear.AbstractRealVector.EntryImpl e) {
			if (e == null) {
				return ;
			}
			do {
				e.setIndex(((e.getIndex()) + 1));
			} while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
			if ((e.getIndex()) >= (dim)) {
				e.setIndex((-1));
			}
		}

		public boolean hasNext() {
			return (current) != null;
		}

		public org.apache.commons.math.linear.RealVector.Entry next() {
			tmp.setIndex(current.getIndex());
			if ((next) != null) {
				current.setIndex(next.getIndex());
				advance(next);
				if ((next.getIndex()) < 0) {
					next = null;
				}
			}else {
				current = null;
			}
			return tmp;
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException("Not supported");
		}
	}
}
2019-04-12 15:44:14,927 ERROR main - Undo Error: modified: 
public abstract class AbstractRealVector implements org.apache.commons.math.linear.RealVector {
	protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector v) {
		checkVectorDimensions(v.getDimension());
	}

	protected void checkVectorDimensions(int n) throws java.lang.IllegalArgumentException {
		double d = getDimension();
		if (d != n) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}", d, n);
		}
	}

	protected void checkIndex(final int index) throws org.apache.commons.math.linear.MatrixIndexException {
		if ((index < 0) || (index >= (getDimension()))) {
			throw new org.apache.commons.math.linear.MatrixIndexException("index {0} out of allowed range [{1}, {2}]", index, 0, ((getDimension()) - 1));
		}
	}

	public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.getDimension())) - 1));
		setSubVector(index, v.getData());
	}

	public void setSubVector(int index, double[] v) throws org.apache.commons.math.linear.MatrixIndexException {
		checkIndex(index);
		checkIndex(((index + (v.length)) - 1));
		for (int i = 0; i < (v.length); i++) {
			setEntry((i + index), v[i]);
		}
	}

	public org.apache.commons.math.linear.RealVector add(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			result[e.getIndex()] += e.getValue();
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result.setEntry(index, ((e.getValue()) + (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector subtract(double[] v) throws java.lang.IllegalArgumentException {
		double[] result = v.clone();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			result[index] = (e.getValue()) - (result[index]);
		} 
		return new org.apache.commons.math.linear.ArrayRealVector(result, false);
	}

	public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		if (v instanceof org.apache.commons.math.linear.ArrayRealVector) {
			double[] values = ((org.apache.commons.math.linear.ArrayRealVector) (v)).getDataRef();
			return add(values);
		}
		org.apache.commons.math.linear.RealVector result = v.copy();
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final int index = e.getIndex();
			v.setEntry(index, ((e.getValue()) - (result.getEntry(index))));
		} 
		return result;
	}

	public org.apache.commons.math.linear.RealVector mapAdd(double d) {
		return copy().mapAddToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapAddToSelf(double d) {
		if (d != 0) {
			try {
				return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.ADD.fix1stArgument(d));
			} catch (org.apache.commons.math.FunctionEvaluationException e) {
				throw new java.lang.IllegalArgumentException(e);
			}
		}
		return this;
	}

	public abstract org.apache.commons.math.linear.AbstractRealVector copy();

	public double dotProduct(double[] v) throws java.lang.IllegalArgumentException {
		return dotProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += (e.getValue()) * (v.getEntry(e.getIndex()));
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {
		return ebeDivide(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {
		return ebeMultiply(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double diff = (e.getValue()) - (v.getEntry(e.getIndex()));
			d += diff * diff;
		} 
		return java.lang.Math.sqrt(d);
	}

	public double getNorm() {
		double sum = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			final double value = e.getValue();
			sum += value * value;
		} 
		return java.lang.Math.sqrt(sum);
	}

	public double getL1Norm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null))
			norm += java.lang.Math.abs(e.getValue());
		
		return norm;
	}

	public double getLInfNorm() {
		double norm = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			norm = java.lang.Math.max(norm, java.lang.Math.abs(e.getValue()));
		} 
		return norm;
	}

	public double getDistance(double[] v) throws java.lang.IllegalArgumentException {
		return getDistance(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex()))));
		} 
		return d;
	}

	public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d += java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()])));
		} 
		return d;
	}

	public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v.getEntry(e.getIndex())))), d);
		} 
		return d;
	}

	public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {
		checkVectorDimensions(v.length);
		double d = 0;
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			d = java.lang.Math.max(java.lang.Math.abs(((e.getValue()) - (v[e.getIndex()]))), d);
		} 
		return d;
	}

	public org.apache.commons.math.linear.RealVector mapAbs() {
		return copy().mapAbsToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAbsToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ABS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAcos() {
		return copy().mapAcosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAcosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ACOS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAsin() {
		return copy().mapAsinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAsinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ASIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapAtan() {
		return copy().mapAtanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapAtanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ATAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCbrt() {
		return copy().mapCbrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCbrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CBRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCeil() {
		return copy().mapCeilToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCeilToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.CEIL);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCos() {
		return copy().mapCosToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCosToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COS);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapCosh() {
		return copy().mapCoshToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapCoshToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.COSH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapDivide(double d) {
		return copy().mapDivideToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapDivideToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.DIVIDE.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExp() {
		return copy().mapExpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapExpm1() {
		return copy().mapExpm1ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapExpm1ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.EXPM1);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapFloor() {
		return copy().mapFloorToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapFloorToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.FLOOR);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapInv() {
		return copy().mapInvToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapInvToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.INVERT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog() {
		return copy().mapLogToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLogToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog10() {
		return copy().mapLog10ToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog10ToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG10);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapLog1p() {
		return copy().mapLog1pToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapLog1pToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.LOG1P);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapMultiply(double d) {
		return copy().mapMultiplyToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.MULTIPLY.fix1stArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapPow(double d) {
		return copy().mapPowToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapPowToSelf(double d) {
		try {
			return mapToSelf(org.apache.commons.math.analysis.BinaryFunction.POW.fix2ndArgument(d));
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapRint() {
		return copy().mapRintToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapRintToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.RINT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSignum() {
		return copy().mapSignumToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSignumToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIGNUM);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSin() {
		return copy().mapSinToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SIN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSinh() {
		return copy().mapSinhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSinhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SINH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSqrt() {
		return copy().mapSqrtToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapSqrtToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.SQRT);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapSubtract(double d) {
		return copy().mapSubtractToSelf(d);
	}

	public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double d) {
		return mapAddToSelf((-d));
	}

	public org.apache.commons.math.linear.RealVector mapTan() {
		return copy().mapTanToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TAN);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapTanh() {
		return copy().mapTanhToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapTanhToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.TANH);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealVector mapUlp() {
		return copy().mapUlpToSelf();
	}

	public org.apache.commons.math.linear.RealVector mapUlpToSelf() {
		try {
			return mapToSelf(org.apache.commons.math.analysis.ComposableFunction.ULP);
		} catch (org.apache.commons.math.FunctionEvaluationException e) {
			throw new java.lang.IllegalArgumentException(e);
		}
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {
		org.apache.commons.math.linear.RealMatrix product;
		if ((v instanceof org.apache.commons.math.linear.SparseRealVector) || ((this) instanceof org.apache.commons.math.linear.SparseRealVector)) {
			product = new org.apache.commons.math.linear.OpenMapRealMatrix(this.getDimension(), v.getDimension());
		}else {
			product = new org.apache.commons.math.linear.Array2DRowRealMatrix(this.getDimension(), v.getDimension());
		}
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> thisIt = sparseIterator();
		org.apache.commons.math.linear.RealVector.Entry thisE = null;
		while ((thisIt.hasNext()) && ((thisE = thisIt.next()) != null)) {
			java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> otherIt = v.sparseIterator();
			org.apache.commons.math.linear.RealVector.Entry otherE = null;
			while ((otherIt.hasNext()) && ((otherE = otherIt.next()) != null)) {
				product.setEntry(thisE.getIndex(), otherE.getIndex(), ((thisE.getValue()) * (otherE.getValue())));
			} 
		} 
		return product;
	}

	public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {
		return outerProduct(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public org.apache.commons.math.linear.RealVector projection(double[] v) throws java.lang.IllegalArgumentException {
		return projection(new org.apache.commons.math.linear.ArrayRealVector(v, false));
	}

	public void set(double value) {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = iterator();
		org.apache.commons.math.linear.RealVector.Entry e = null;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(value);
		} 
	}

	public double[] toArray() {
		int dim = getDimension();
		double[] values = new double[dim];
		for (int i = 0; i < dim; i++) {
			values[i] = getEntry(i);
		}
		return values;
	}

	public double[] getData() {
		return toArray();
	}

	public org.apache.commons.math.linear.RealVector unitVector() {
		org.apache.commons.math.linear.RealVector copy = copy();
		copy.unitize();
		return copy;
	}

	public void unitize() {
		mapDivideToSelf(getNorm());
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> sparseIterator() {
		return new org.apache.commons.math.linear.AbstractRealVector.SparseEntryIterator();
	}

	public java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> iterator() {
		final int dim = getDimension();
		return new java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry>() {
			private int i = 0;

			private org.apache.commons.math.linear.AbstractRealVector.EntryImpl e = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

			public boolean hasNext() {
				return (i) < dim;
			}

			public org.apache.commons.math.linear.RealVector.Entry next() {
				e.setIndex(((i)++));
				return e;
			}

			public void remove() {
				throw new java.lang.UnsupportedOperationException("Not supported");
			}
		};
	}

	public org.apache.commons.math.linear.RealVector map(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		return copy().mapToSelf(function);
	}

	public org.apache.commons.math.linear.RealVector mapToSelf(org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> it = ((function.value(0)) == 0) ? sparseIterator() : iterator();
		org.apache.commons.math.linear.RealVector.Entry e;
		while ((it.hasNext()) && ((e = it.next()) != null)) {
			e.setValue(function.value(e.getValue()));
		} 
		return this;
	}

	protected class EntryImpl extends org.apache.commons.math.linear.RealVector.Entry {
		public EntryImpl() {
			setIndex(0);
		}

		public double getValue() {
			return getEntry(getIndex());
		}

		public void setValue(double newValue) {
			setEntry(getIndex(), newValue);
		}
	}

	protected class SparseEntryIterator implements java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> {
		private final int dim;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl tmp = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl current;

		private org.apache.commons.math.linear.AbstractRealVector.EntryImpl next;

		protected SparseEntryIterator() {
			dim = getDimension();
			current = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
			if ((current.getValue()) == 0) {
				advance(current);
			}
			if ((current.getIndex()) >= 0) {
				next = new org.apache.commons.math.linear.AbstractRealVector.EntryImpl();
				next.setIndex(current.getIndex());
				advance(next);
			}else {
				current = null;
			}
		}

		protected void advance(org.apache.commons.math.linear.AbstractRealVector.EntryImpl e) {
			if (e == null) {
				return ;
			}
			do {
				e.setIndex(((e.getIndex()) + 1));
			} while (((e.getIndex()) < (dim)) && ((e.getValue()) == 0) );
			if ((e.getIndex()) >= (dim)) {
				e.setIndex((-1));
			}
		}

		public boolean hasNext() {
			return (current) != null;
		}

		public org.apache.commons.math.linear.RealVector.Entry next() {
			tmp.setIndex(current.getIndex());
			if ((next) != null) {
				current.setIndex(next.getIndex());
				advance(next);
				if ((next.getIndex()) < 0) {
					next = null;
				}
			}else {
				current = null;
			}
			return tmp;
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException("Not supported");
		}
	}
}
2019-04-12 16:02:29,540 INFO main - Time Repair Loop (s): 1356.205
2019-04-12 16:02:29,541 INFO main - 
----SUMMARY_EXECUTION---
2019-04-12 16:02:29,541 INFO main - 
successful_ing_attempts (0): []
2019-04-12 16:02:29,541 INFO main - 
failing_ing_attempts (600): [3, 19, 7, 3, 4, 0, 6, 5, 12, 4, 0, 21, 6, 25, 2, 0, 0, 13, 7, 5, 0, 37, 0, 3, 2, 0, 1, 16, 27, 0, 16, 9, 28, 29, 5, 38, 8, 15, 16, 4, 5, 8, 0, 13, 6, 6, 24, 16, 0, 0, 28, 20, 23, 41, 1, 1, 1, 12, 6, 2, 0, 44, 12, 19, 8, 2, 0, 0, 2, 0, 5, 41, 13, 0, 0, 1, 6, 3, 0, 0, 3, 3, 99, 4, 6, 29, 24, 0, 3, 0, 0, 7, 13, 39, 0, 2, 12, 26, 1, 17, 0, 16, 1, 61, 1, 15, 1, 16, 11, 3, 15, 2, 46, 3, 6, 2, 38, 4, 3, 0, 1, 21, 7, 15, 7, 16, 23, 0, 52, 4, 4, 19, 0, 0, 4, 4, 1, 0, 3, 18, 8, 42, 1, 11, 0, 12, 9, 6, 0, 12, 2, 4, 2, 0, 15, 0, 21, 1, 15, 10, 20, 1, 20, 6, 4, 5, 4, 10, 2, 4, 20, 5, 13, 44, 18, 0, 8, 16, 3, 25, 3, 10, 1, 1, 57, 1, 0, 11, 2, 8, 0, 7, 15, 24, 13, 12, 5, 3, 9, 6, 3, 8, 0, 7, 0, 1, 2, 0, 1, 3, 20, 1, 1, 4, 5, 39, 7, 11, 0, 18, 37, 1, 2, 3, 19, 9, 0, 5, 9, 5, 0, 1, 1, 7, 1, 5, 1, 8, 19, 2, 0, 0, 13, 11, 4, 6, 18, 19, 2, 5, 0, 4, 4, 11, 6, 7, 9, 17, 3, 32, 28, 0, 45, 18, 0, 10, 20, 20, 28, 1, 0, 7, 3, 18, 5, 32, 4, 14, 3, 3, 5, 2, 0, 4, 17, 0, 0, 27, 0, 5, 19, 6, 18, 2, 0, 0, 0, 17, 7, 0, 0, 45, 35, 5, 13, 7, 9, 4, 0, 18, 1, 48, 1, 12, 3, 40, 25, 25, 0, 6, 0, 1, 4, 1, 5, 0, 0, 2, 5, 49, 6, 15, 2, 2, 3, 15, 19, 7, 64, 2, 3, 11, 2, 1, 0, 5, 0, 0, 87, 1, 0, 6, 3, 0, 0, 1, 0, 25, 8, 19, 2, 7, 13, 13, 20, 4, 0, 5, 7, 0, 11, 4, 7, 2, 0, 9, 2, 14, 13, 1, 4, 1, 33, 19, 22, 23, 37, 4, 6, 13, 5, 0, 0, 7, 4, 9, 24, 4, 10, 57, 0, 2, 5, 29, 4, 7, 0, 8, 0, 6, 11, 28, 1, 0, 27, 17, 4, 0, 12, 3, 3, 15, 19, 6, 24, 6, 7, 3, 0, 34, 0, 27, 3, 0, 1, 2, 25, 1, 19, 6, 0, 1, 0, 55, 0, 10, 12, 6, 19, 51, 3, 30, 1, 11, 0, 0, 4, 0, 5, 5, 4, 0, 0, 0, 3, 0, 21, 7, 9, 1, 5, 11, 6, 15, 10, 22, 0, 63, 6, 7, 6, 1, 0, 3, 1, 1, 3, 5, 31, 9, 3, 13, 9, 13, 1, 0, 30, 6, 13, 3, 0, 12, 29, 0, 14, 3, 14, 0, 3, 14, 17, 0, 30, 4, 5, 6, 4, 7, 15, 0, 11, 58, 4, 0, 5, 2, 16, 1, 6, 1, 0, 21, 11, 9, 4, 0, 25, 23, 0, 10, 11, 6, 3, 13, 7, 23, 36, 0, 14, 1, 0, 9, 4, 6, 8, 5, 3, 18, 0, 0, 0, 2, 53, 4, 59, 0, 0, 0, 13, 7, 3, 13, 20, 4, 11, 0, 9, 8, 2, 5, 19, 11, 32, 3, 33, 7, 1, 6, 0, 22, 0, 1, 14, 0, 27, 65, 0, 1, 0, 3]
2019-04-12 16:02:29,541 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 1482.243
[DONE]
