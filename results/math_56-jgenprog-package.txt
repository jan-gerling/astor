2019-04-15 17:46:49,363 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  package  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  /home/jan_gerling/astor/defect4j_tests/math_56/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-15 17:46:50,514 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_56//bin//default from 262 classes with test cases
2019-04-15 17:46:50,514 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-15 17:46:51,300 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-math_56//bin//default]
2019-04-15 17:48:40,382 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.util.MultidimensionalCounterTest#testIterationConsistency
2019-04-15 17:48:40,384 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.stat.descriptive.moment.MeanTest#testWeightedConsistency
2019-04-15 17:48:40,385 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.util.FastMathTest#checkMissingFastMathClasses
2019-04-15 17:48:40,392 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:2400, fails: 3, GZoltar suspicious 20245
2019-04-15 17:48:40,406 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 28 with susp > 0.5, we consider: 28
2019-04-15 17:48:40,415 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_56//src//default, compliance level: 8
2019-04-15 17:48:48,589 INFO main - 
---- Initial suspicious size: 28
2019-04-15 17:48:48,716 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.util.MultidimensionalCounter, methodName=org.apache.commons.math.util.MultidimensionalCounter{access$200(Lorg/apache/commons/math/util/MultidimensionalCounter;)[I 0.0, lineNumber=46, susp=0.5773502691896258]
2019-04-15 17:48:48,738 INFO main - Total suspicious from FL: 28,  27
2019-04-15 17:48:48,739 INFO main - Total ModPoint created: 27
2019-04-15 17:48:48,739 INFO main - Creating program variant #1, [Variant id: 1, #gens: 27, #ops: 0, parent:-]
2019-04-15 17:48:48,811 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.util.MultidimensionalCounter, methodName=org.apache.commons.math.util.MultidimensionalCounter{access$200(Lorg/apache/commons/math/util/MultidimensionalCounter;)[I 0.0, lineNumber=46, susp=0.5773502691896258]
2019-04-15 17:48:48,829 INFO main - Total suspicious from FL: 28,  27
2019-04-15 17:48:48,829 INFO main - Total ModPoint created: 27
2019-04-15 17:48:48,829 INFO main - Creating program variant #2, [Variant id: 2, #gens: 27, #ops: 0, parent:-]
2019-04-15 17:48:48,903 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.util.MultidimensionalCounter, methodName=org.apache.commons.math.util.MultidimensionalCounter{access$200(Lorg/apache/commons/math/util/MultidimensionalCounter;)[I 0.0, lineNumber=46, susp=0.5773502691896258]
2019-04-15 17:48:48,922 INFO main - Total suspicious from FL: 28,  27
2019-04-15 17:48:48,922 INFO main - Total ModPoint created: 27
2019-04-15 17:48:48,922 INFO main - Creating program variant #3, [Variant id: 3, #gens: 27, #ops: 0, parent:-]
2019-04-15 17:50:28,562 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-15 17:50:28,562 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-15 17:50:28,563 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= /home/jan_gerling/astor/defect4j_tests/math_56/
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-15 17:50:28,564 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= package
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-15 17:50:28,565 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-15 17:50:28,566 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-15 17:50:28,566 INFO main - 
----Starting Solution Search
2019-04-15 17:53:32,088 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 17:54:09,425 ERROR main - Error: the model was not the same from the original after this generation
2019-04-15 17:54:09,426 ERROR main - Undo Error: original: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1)) {
					return true;
				}
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--) {
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			}
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 17:54:09,427 ERROR main - Undo Error: modified: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1))
					return true;
				
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--) {
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			}
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 17:56:51,479 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 17:57:13,210 ERROR main - Error: the model was not the same from the original after this generation
2019-04-15 17:57:13,210 ERROR main - Undo Error: original: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1)) {
					return true;
				}
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--) {
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			}
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 17:57:13,211 ERROR main - Undo Error: modified: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1)) {
					return true;
				}
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--)
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 17:58:18,937 ERROR main - Error: the model was not the same from the original after this generation
2019-04-15 17:58:18,937 ERROR main - Undo Error: original: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1)) {
					return true;
				}
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--)
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 17:58:18,938 ERROR main - Undo Error: modified: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1))
					return true;
				
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--)
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 18:00:04,334 ERROR main - Error: the model was not the same from the original after this generation
2019-04-15 18:00:04,334 ERROR main - Undo Error: original: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++) {
				if ((counter[i]) != ((size[i]) - 1))
					return true;
				
			}
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--)
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 18:00:04,335 ERROR main - Undo Error: modified: 
public class MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
	private final int dimension;

	private final int[] uniCounterOffset;

	private final int[] size;

	private final int totalSize;

	private final int last;

	public class Iterator implements java.util.Iterator<java.lang.Integer> {
		private final int[] counter = new int[dimension];

		private int count = -1;

		Iterator() {
			counter[last] = -1;
		}

		public boolean hasNext() {
			for (int i = 0; i < (dimension); i++)
				if ((counter[i]) != ((size[i]) - 1))
					return true;
				
			
			return false;
		}

		public java.lang.Integer next() {
			for (int i = last; i >= 0; i--)
				if ((counter[i]) == ((size[i]) - 1)) {
					counter[i] = 0;
				}else {
					++(counter[i]);
					break;
				}
			
			return ++(count);
		}

		public int getCount() {
			return count;
		}

		public int[] getCounts() {
			return org.apache.commons.math.util.MathUtils.copyOf(counter);
		}

		public int getCount(int dim) {
			return counter[dim];
		}

		public void remove() {
			throw new java.lang.UnsupportedOperationException();
		}
	}

	public MultidimensionalCounter(int... size) {
		dimension = size.length;
		this.size = org.apache.commons.math.util.MathUtils.copyOf(size);
		uniCounterOffset = new int[dimension];
		last = (dimension) - 1;
		int tS = size[last];
		for (int i = 0; i < (last); i++) {
			int count = 1;
			for (int j = i + 1; j < (dimension); j++) {
				count *= size[j];
			}
			uniCounterOffset[i] = count;
			tS *= size[i];
		}
		uniCounterOffset[last] = 0;
		if (tS <= 0) {
			throw new org.apache.commons.math.exception.NotStrictlyPositiveException(tS);
		}
		totalSize = tS;
	}

	public org.apache.commons.math.util.MultidimensionalCounter.Iterator iterator() {
		return new org.apache.commons.math.util.MultidimensionalCounter.Iterator();
	}

	public int getDimension() {
		return dimension;
	}

	public int[] getCounts(int index) {
		if ((index < 0) || (index >= (totalSize))) {
			throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, totalSize);
		}
		final int[] indices = new int[dimension];
		int count = 0;
		for (int i = 0; i < (last); i++) {
			int idx = 0;
			final int offset = uniCounterOffset[i];
			while (count <= index) {
				count += offset;
				++idx;
			} 
			--idx;
			count -= offset;
			indices[i] = idx;
		}
		int idx = 1;
		while (count < index) {
			count += idx;
			++idx;
		} 
		--idx;
		indices[last] = idx;
		return indices;
	}

	public int getCount(int... c) throws org.apache.commons.math.exception.OutOfRangeException {
		if ((c.length) != (dimension)) {
			throw new org.apache.commons.math.exception.DimensionMismatchException(c.length, dimension);
		}
		int count = 0;
		for (int i = 0; i < (dimension); i++) {
			final int index = c[i];
			if ((index < 0) || (index >= (size[i]))) {
				throw new org.apache.commons.math.exception.OutOfRangeException(index, 0, ((size[i]) - 1));
			}
			count += (uniCounterOffset[i]) * (c[i]);
		}
		return count + (c[last]);
	}

	public int getSize() {
		return totalSize;
	}

	public int[] getSizes() {
		return org.apache.commons.math.util.MathUtils.copyOf(size);
	}

	@java.lang.Override
	public java.lang.String toString() {
		final java.lang.StringBuilder sb = new java.lang.StringBuilder();
		for (int i = 0; i < (dimension); i++) {
			sb.append("[").append(getCount(i)).append("]");
		}
		return sb.toString();
	}
}
2019-04-15 18:25:02,074 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 18:31:57,435 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 18:47:44,213 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 19:01:36,056 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 19:06:20,853 INFO main - The Process that runs JUnit test cases had problems: process hasn't exited
2019-04-15 19:27:20,679 INFO main - Time Repair Loop (s): 5812.112
2019-04-15 19:27:20,679 INFO main - 
----SUMMARY_EXECUTION---
2019-04-15 19:27:20,680 INFO main - 
successful_ing_attempts (0): []
2019-04-15 19:27:20,680 INFO main - 
failing_ing_attempts (600): [3, 2, 13, 14, 6, 17, 6, 7, 12, 6, 0, 0, 52, 3, 2, 2, 3, 11, 43, 6, 20, 0, 5, 3, 9, 0, 34, 5, 0, 10, 0, 0, 4, 2, 14, 2, 7, 2, 0, 19, 4, 0, 13, 12, 3, 0, 2, 7, 4, 1, 29, 0, 3, 10, 5, 0, 1, 9, 9, 3, 8, 1, 4, 1, 1, 21, 29, 14, 0, 0, 10, 2, 0, 7, 9, 0, 21, 0, 6, 0, 0, 5, 4, 4, 4, 5, 28, 1, 7, 4, 0, 8, 36, 6, 3, 5, 1, 8, 2, 5, 22, 17, 18, 0, 14, 3, 3, 3, 9, 8, 3, 10, 5, 0, 4, 57, 2, 21, 29, 2, 1, 4, 8, 2, 0, 23, 11, 4, 3, 5, 9, 0, 4, 15, 1, 0, 1, 12, 57, 123, 5, 4, 11, 14, 12, 15, 7, 5, 20, 0, 1, 2, 0, 1, 0, 91, 100, 6, 5, 13, 16, 7, 3, 0, 2, 26, 0, 5, 0, 4, 1, 0, 0, 1, 7, 9, 2, 0, 9, 6, 2, 16, 6, 2, 5, 1, 4, 13, 5, 1, 17, 4, 1, 4, 4, 22, 19, 19, 0, 4, 17, 18, 13, 10, 19, 0, 26, 0, 5, 0, 12, 4, 0, 32, 12, 12, 3, 3, 2, 14, 2, 2, 38, 8, 10, 0, 10, 0, 4, 0, 2, 3, 0, 9, 2, 5, 2, 3, 3, 9, 5, 0, 8, 14, 6, 18, 6, 4, 2, 2, 1, 4, 4, 0, 2, 3, 0, 0, 18, 5, 13, 5, 4, 1, 0, 7, 0, 2, 0, 0, 3, 27, 9, 11, 24, 0, 8, 6, 23, 0, 3, 0, 22, 0, 0, 0, 26, 0, 0, 3, 19, 13, 16, 4, 2, 4, 0, 18, 19, 27, 0, 0, 15, 19, 34, 2, 10, 14, 10, 0, 5, 13, 0, 3, 6, 2, 1, 0, 0, 0, 0, 11, 0, 39, 2, 0, 4, 17, 16, 0, 2, 11, 1, 3, 22, 8, 0, 0, 0, 2, 66, 2, 0, 20, 13, 0, 15, 19, 0, 23, 8, 10, 0, 0, 0, 13, 2, 3, 8, 0, 14, 3, 11, 16, 3, 2, 1, 3, 19, 2, 0, 12, 18, 0, 4, 2, 0, 14, 11, 5, 0, 5, 3, 10, 29, 1, 2, 3, 7, 0, 1, 7, 4, 15, 19, 19, 0, 11, 72, 16, 93, 25, 7, 0, 0, 12, 39, 12, 0, 27, 7, 0, 7, 3, 2, 24, 5, 7, 12, 38, 1, 0, 0, 0, 85, 28, 0, 3, 18, 11, 9, 0, 10, 12, 1, 1, 17, 11, 0, 0, 2, 7, 10, 1, 8, 0, 0, 22, 0, 28, 0, 1, 4, 0, 1, 1, 0, 8, 7, 2, 4, 6, 0, 0, 57, 0, 0, 18, 0, 9, 6, 3, 3, 0, 4, 0, 21, 3, 4, 0, 4, 0, 0, 28, 2, 10, 12, 0, 10, 4, 3, 12, 234, 11, 9, 3, 0, 1, 8, 1, 3, 0, 26, 0, 0, 0, 10, 17, 9, 0, 12, 14, 7, 11, 0, 1, 4, 19, 23, 16, 12, 1, 8, 47, 2, 0, 3, 0, 0, 12, 4, 0, 1, 2, 17, 13, 41, 10, 4, 9, 0, 8, 3, 7, 1, 3, 0, 12, 0, 0, 24, 1, 22, 0, 2, 7, 3, 11, 4, 1, 1, 17, 9, 18, 0, 15, 7, 1, 1, 1, 2, 0, 0, 14, 13, 0, 5, 189, 11, 6, 0, 3, 6, 0, 4, 1, 6, 3, 0, 5, 35, 20, 17, 5, 1, 5, 1, 2, 0, 9]
2019-04-15 19:27:20,680 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 6031.31
[DONE]
