2019-04-12 18:57:54,366 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  package  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  /home/jan/astor/defect4j_tests/math_73/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-12 18:57:55,539 INFO main - -Executing Gzoltar classpath: /home/jan/astor/./outputMutation/AstorMain-math_73//bin//default from 231 classes with test cases
2019-04-12 18:57:55,540 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-12 18:57:56,396 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan/astor/./examples/libs/junit-4.4.jar, /home/jan/astor/./outputMutation/AstorMain-math_73//bin//default]
2019-04-12 18:58:09,417 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints
2019-04-12 18:58:09,423 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:2140, fails: 1, GZoltar suspicious 16665
2019-04-12 18:58:09,437 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 17 with susp > 0.5, we consider: 17
2019-04-12 18:58:09,448 INFO main - building model: /home/jan/astor/./outputMutation/AstorMain-math_73//src//default, compliance level: 8
2019-04-12 18:58:17,641 INFO main - 
---- Initial suspicious size: 17
2019-04-12 18:58:17,726 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.BrentSolver, methodName=org.apache.commons.math.analysis.solvers.BrentSolver{solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D 0.0, lineNumber=185, susp=0.7071067811865475]
2019-04-12 18:58:17,745 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl{verifyInterval(DD)V 0.0, lineNumber=211, susp=0.5]
2019-04-12 18:58:17,745 INFO main - Total suspicious from FL: 17,  15
2019-04-12 18:58:17,745 INFO main - Total ModPoint created: 15
2019-04-12 18:58:17,746 INFO main - Creating program variant #1, [Variant id: 1, #gens: 15, #ops: 0, parent:-]
2019-04-12 18:58:17,801 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.BrentSolver, methodName=org.apache.commons.math.analysis.solvers.BrentSolver{solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D 0.0, lineNumber=185, susp=0.7071067811865475]
2019-04-12 18:58:17,820 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl{verifyInterval(DD)V 0.0, lineNumber=211, susp=0.5]
2019-04-12 18:58:17,820 INFO main - Total suspicious from FL: 17,  15
2019-04-12 18:58:17,820 INFO main - Total ModPoint created: 15
2019-04-12 18:58:17,821 INFO main - Creating program variant #2, [Variant id: 2, #gens: 15, #ops: 0, parent:-]
2019-04-12 18:58:17,867 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.BrentSolver, methodName=org.apache.commons.math.analysis.solvers.BrentSolver{solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D 0.0, lineNumber=185, susp=0.7071067811865475]
2019-04-12 18:58:17,883 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl{verifyInterval(DD)V 0.0, lineNumber=211, susp=0.5]
2019-04-12 18:58:17,884 INFO main - Total suspicious from FL: 17,  15
2019-04-12 18:58:17,884 INFO main - Total ModPoint created: 15
2019-04-12 18:58:17,884 INFO main - Creating program variant #3, [Variant id: 3, #gens: 15, #ops: 0, parent:-]
2019-04-12 18:58:28,632 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 18:58:28,632 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-12 18:58:28,633 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan/astor/./outputMutation
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-12 18:58:28,634 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= /home/jan/astor/defect4j_tests/math_73/
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-12 18:58:28,635 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-12 18:58:28,636 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= package
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-12 18:58:28,637 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-12 18:58:28,638 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 18:58:28,639 INFO main - 
----Starting Solution Search
2019-04-12 18:58:29,828 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:29,828 ERROR main - Undo Error: original: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0) {
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else {
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				}
			
		}else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:29,829 ERROR main - Undo Error: modified: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0)
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else {
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				}
			
		else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:30,226 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:30,226 ERROR main - Undo Error: original: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0) {
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else {
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				}
			
		}else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:30,227 ERROR main - Undo Error: modified: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0) {
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				
			
		}else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:31,800 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:31,801 ERROR main - Undo Error: original: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0)
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else {
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				}
			
		else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:31,801 ERROR main - Undo Error: modified: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0)
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				
			
		else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:33,153 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:33,153 ERROR main - Undo Error: original: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0) {
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else {
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				}
			
		}else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:33,154 ERROR main - Undo Error: modified: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0) {
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				
			
		}else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:40,351 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:40,351 ERROR main - Undo Error: original: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0) {
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				
			
		}else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:40,352 ERROR main - Undo Error: modified: 
public class BrentSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl {
	private static final java.lang.String NON_BRACKETING_MESSAGE = "function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]";

	private static final long serialVersionUID = 7694577816772532779L;

	@java.lang.Deprecated
	public BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		super(f, 100, 1.0E-6);
	}

	public BrentSolver() {
		super(100, 1.0E-6);
	}

	@java.lang.Deprecated
	public double solve(double min, double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max);
	}

	@java.lang.Deprecated
	public double solve(double min, double max, double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		return solve(f, min, max, initial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max, final double initial) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifySequence(min, initial, max);
		double yInitial = f.value(initial);
		if ((java.lang.Math.abs(yInitial)) <= (functionValueAccuracy)) {
			setResult(initial, 0);
			return result;
		}
		double yMin = f.value(min);
		if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
			setResult(yMin, 0);
			return result;
		}
		if ((yInitial * yMin) < 0) {
			return solve(f, min, yMin, initial, yInitial, min, yMin);
		}
		double yMax = f.value(max);
		if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
			setResult(yMax, 0);
			return result;
		}
		if ((yInitial * yMax) < 0) {
			return solve(f, initial, yInitial, max, yMax, initial, yInitial);
		}
		return solve(f, min, yMin, max, yMax, initial, yInitial);
	}

	public double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, final double min, final double max) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		clearResult();
		verifyInterval(min, max);
		double ret = java.lang.Double.NaN;
		double yMin = f.value(min);
		double yMax = f.value(max);
		double sign = yMin * yMax;
		if (sign > 0)
			if ((java.lang.Math.abs(yMin)) <= (functionValueAccuracy)) {
				setResult(min, 0);
				ret = min;
			}else
				if ((java.lang.Math.abs(yMax)) <= (functionValueAccuracy)) {
					setResult(max, 0);
					ret = max;
				}else
					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
				
			
		else
			if (sign < 0) {
				ret = solve(f, min, yMin, max, yMax, min, yMin);
			}else {
				if (yMin == 0.0) {
					ret = min;
				}else {
					ret = max;
				}
			}
		
		return ret;
	}

	private double solve(final org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double y0, double x1, double y1, double x2, double y2) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.MaxIterationsExceededException {
		double delta = x1 - x0;
		double oldDelta = delta;
		int i = 0;
		while (i < (maximalIterationCount)) {
			if ((java.lang.Math.abs(y2)) < (java.lang.Math.abs(y1))) {
				x0 = x1;
				x1 = x2;
				x2 = x0;
				y0 = y1;
				y1 = y2;
				y2 = y0;
			}
			if ((java.lang.Math.abs(y1)) <= (functionValueAccuracy)) {
				setResult(x1, i);
				return result;
			}
			double dx = x2 - x1;
			double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(x1))), absoluteAccuracy);
			if ((java.lang.Math.abs(dx)) <= tolerance) {
				setResult(x1, i);
				return result;
			}
			if (((java.lang.Math.abs(oldDelta)) < tolerance) || ((java.lang.Math.abs(y0)) <= (java.lang.Math.abs(y1)))) {
				delta = 0.5 * dx;
				oldDelta = delta;
			}else {
				double r3 = y1 / y0;
				double p;
				double p1;
				if (x0 == x2) {
					p = dx * r3;
					p1 = 1.0 - r3;
				}else {
					double r1 = y0 / y2;
					double r2 = y1 / y2;
					p = r3 * (((dx * r1) * (r1 - r2)) - ((x1 - x0) * (r2 - 1.0)));
					p1 = ((r1 - 1.0) * (r2 - 1.0)) * (r3 - 1.0);
				}
				if (p > 0.0) {
					p1 = -p1;
				}else {
					p = -p;
				}
				if (((2.0 * p) >= (((1.5 * dx) * p1) - (java.lang.Math.abs((tolerance * p1))))) || (p >= (java.lang.Math.abs(((0.5 * oldDelta) * p1))))) {
					delta = 0.5 * dx;
					oldDelta = delta;
				}else {
					oldDelta = delta;
					delta = p / p1;
				}
			}
			x0 = x1;
			y0 = y1;
			if ((java.lang.Math.abs(delta)) > tolerance) {
				x1 = x1 + delta;
			}else
				if (dx > 0.0) {
					x1 = x1 + (0.5 * tolerance);
				}else
					if (dx <= 0.0) {
						x1 = x1 - (0.5 * tolerance);
					}
				
			
			y1 = f.value(x1);
			if ((y1 > 0) == (y2 > 0)) {
				x2 = x0;
				y2 = y0;
				delta = x1 - x0;
				oldDelta = delta;
			}
			i++;
		} 
		throw new org.apache.commons.math.MaxIterationsExceededException(maximalIterationCount);
	}
}
2019-04-12 18:58:46,836 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:46,837 ERROR main - Undo Error: original: 
public abstract class UnivariateRealSolverImpl extends org.apache.commons.math.ConvergingAlgorithmImpl implements org.apache.commons.math.analysis.solvers.UnivariateRealSolver {
	protected double functionValueAccuracy;

	protected double defaultFunctionValueAccuracy;

	protected boolean resultComputed = false;

	protected double result;

	protected double functionValue;

	@java.lang.Deprecated
	protected org.apache.commons.math.analysis.UnivariateRealFunction f;

	@java.lang.Deprecated
	protected UnivariateRealSolverImpl(final org.apache.commons.math.analysis.UnivariateRealFunction f, final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
		}
		this.f = f;
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected void checkResultComputed() throws java.lang.IllegalStateException {
		if (!(resultComputed)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalStateException("no result available");
		}
	}

	public double getResult() {
		checkResultComputed();
		return result;
	}

	public double getFunctionValue() {
		checkResultComputed();
		return functionValue;
	}

	public void setFunctionValueAccuracy(final double accuracy) {
		functionValueAccuracy = accuracy;
	}

	public double getFunctionValueAccuracy() {
		return functionValueAccuracy;
	}

	public void resetFunctionValueAccuracy() {
		functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected final void setResult(final double newResult, final int iterationCount) {
		this.result = newResult;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void setResult(final double x, final double fx, final int iterationCount) {
		this.result = x;
		this.functionValue = fx;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void clearResult() {
		this.iterationCount = 0;
		this.resultComputed = false;
	}

	protected boolean isBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		final double f1 = function.value(lower);
		final double f2 = function.value(upper);
		return ((f1 > 0) && (f2 < 0)) || ((f1 < 0) && (f2 > 0));
	}

	protected boolean isSequence(final double start, final double mid, final double end) {
		return (start < mid) && (mid < end);
	}

	protected void verifyInterval(final double lower, final double upper) {
		if (lower >= upper) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]", lower, upper);
		}
	}

	protected void verifySequence(final double lower, final double initial, final double upper) {
		if (!(isSequence(lower, initial, upper))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}", lower, initial, upper);
		}
	}

	protected void verifyBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		verifyInterval(lower, upper);
		if (!(isBracketing(lower, upper, function))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]"), lower, upper, function.value(lower), function.value(upper));
		}
	}
}
2019-04-12 18:58:46,837 ERROR main - Undo Error: modified: 
public abstract class UnivariateRealSolverImpl extends org.apache.commons.math.ConvergingAlgorithmImpl implements org.apache.commons.math.analysis.solvers.UnivariateRealSolver {
	protected double functionValueAccuracy;

	protected double defaultFunctionValueAccuracy;

	protected boolean resultComputed = false;

	protected double result;

	protected double functionValue;

	@java.lang.Deprecated
	protected org.apache.commons.math.analysis.UnivariateRealFunction f;

	@java.lang.Deprecated
	protected UnivariateRealSolverImpl(final org.apache.commons.math.analysis.UnivariateRealFunction f, final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
		}
		this.f = f;
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected void checkResultComputed() throws java.lang.IllegalStateException {
		if (!(resultComputed)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalStateException("no result available");
		}
	}

	public double getResult() {
		checkResultComputed();
		return result;
	}

	public double getFunctionValue() {
		checkResultComputed();
		return functionValue;
	}

	public void setFunctionValueAccuracy(final double accuracy) {
		functionValueAccuracy = accuracy;
	}

	public double getFunctionValueAccuracy() {
		return functionValueAccuracy;
	}

	public void resetFunctionValueAccuracy() {
		functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected final void setResult(final double newResult, final int iterationCount) {
		this.result = newResult;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void setResult(final double x, final double fx, final int iterationCount) {
		this.result = x;
		this.functionValue = fx;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void clearResult() {
		this.iterationCount = 0;
		this.resultComputed = false;
	}

	protected boolean isBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		final double f1 = function.value(lower);
		final double f2 = function.value(upper);
		return ((f1 > 0) && (f2 < 0)) || ((f1 < 0) && (f2 > 0));
	}

	protected boolean isSequence(final double start, final double mid, final double end) {
		return (start < mid) && (mid < end);
	}

	protected void verifyInterval(final double lower, final double upper) {
		if (lower >= upper)
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]", lower, upper);
		
	}

	protected void verifySequence(final double lower, final double initial, final double upper) {
		if (!(isSequence(lower, initial, upper))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}", lower, initial, upper);
		}
	}

	protected void verifyBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		verifyInterval(lower, upper);
		if (!(isBracketing(lower, upper, function))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]"), lower, upper, function.value(lower), function.value(upper));
		}
	}
}
2019-04-12 18:58:50,737 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 18:58:50,737 ERROR main - Undo Error: original: 
public abstract class UnivariateRealSolverImpl extends org.apache.commons.math.ConvergingAlgorithmImpl implements org.apache.commons.math.analysis.solvers.UnivariateRealSolver {
	protected double functionValueAccuracy;

	protected double defaultFunctionValueAccuracy;

	protected boolean resultComputed = false;

	protected double result;

	protected double functionValue;

	@java.lang.Deprecated
	protected org.apache.commons.math.analysis.UnivariateRealFunction f;

	@java.lang.Deprecated
	protected UnivariateRealSolverImpl(final org.apache.commons.math.analysis.UnivariateRealFunction f, final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
		}
		this.f = f;
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected void checkResultComputed() throws java.lang.IllegalStateException {
		if (!(resultComputed)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalStateException("no result available");
		}
	}

	public double getResult() {
		checkResultComputed();
		return result;
	}

	public double getFunctionValue() {
		checkResultComputed();
		return functionValue;
	}

	public void setFunctionValueAccuracy(final double accuracy) {
		functionValueAccuracy = accuracy;
	}

	public double getFunctionValueAccuracy() {
		return functionValueAccuracy;
	}

	public void resetFunctionValueAccuracy() {
		functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected final void setResult(final double newResult, final int iterationCount) {
		this.result = newResult;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void setResult(final double x, final double fx, final int iterationCount) {
		this.result = x;
		this.functionValue = fx;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void clearResult() {
		this.iterationCount = 0;
		this.resultComputed = false;
	}

	protected boolean isBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		final double f1 = function.value(lower);
		final double f2 = function.value(upper);
		return ((f1 > 0) && (f2 < 0)) || ((f1 < 0) && (f2 > 0));
	}

	protected boolean isSequence(final double start, final double mid, final double end) {
		return (start < mid) && (mid < end);
	}

	protected void verifyInterval(final double lower, final double upper) {
		if (lower >= upper) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]", lower, upper);
		}
	}

	protected void verifySequence(final double lower, final double initial, final double upper) {
		if (!(isSequence(lower, initial, upper))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}", lower, initial, upper);
		}
	}

	protected void verifyBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		verifyInterval(lower, upper);
		if (!(isBracketing(lower, upper, function))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]"), lower, upper, function.value(lower), function.value(upper));
		}
	}
}
2019-04-12 18:58:50,738 ERROR main - Undo Error: modified: 
public abstract class UnivariateRealSolverImpl extends org.apache.commons.math.ConvergingAlgorithmImpl implements org.apache.commons.math.analysis.solvers.UnivariateRealSolver {
	protected double functionValueAccuracy;

	protected double defaultFunctionValueAccuracy;

	protected boolean resultComputed = false;

	protected double result;

	protected double functionValue;

	@java.lang.Deprecated
	protected org.apache.commons.math.analysis.UnivariateRealFunction f;

	@java.lang.Deprecated
	protected UnivariateRealSolverImpl(final org.apache.commons.math.analysis.UnivariateRealFunction f, final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
		}
		this.f = f;
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount, final double defaultAbsoluteAccuracy) {
		super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
		this.defaultFunctionValueAccuracy = 1.0E-15;
		this.functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected void checkResultComputed() throws java.lang.IllegalStateException {
		if (!(resultComputed)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalStateException("no result available");
		}
	}

	public double getResult() {
		checkResultComputed();
		return result;
	}

	public double getFunctionValue() {
		checkResultComputed();
		return functionValue;
	}

	public void setFunctionValueAccuracy(final double accuracy) {
		functionValueAccuracy = accuracy;
	}

	public double getFunctionValueAccuracy() {
		return functionValueAccuracy;
	}

	public void resetFunctionValueAccuracy() {
		functionValueAccuracy = defaultFunctionValueAccuracy;
	}

	protected final void setResult(final double newResult, final int iterationCount) {
		this.result = newResult;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void setResult(final double x, final double fx, final int iterationCount) {
		this.result = x;
		this.functionValue = fx;
		this.iterationCount = iterationCount;
		this.resultComputed = true;
	}

	protected final void clearResult() {
		this.iterationCount = 0;
		this.resultComputed = false;
	}

	protected boolean isBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		final double f1 = function.value(lower);
		final double f2 = function.value(upper);
		return ((f1 > 0) && (f2 < 0)) || ((f1 < 0) && (f2 > 0));
	}

	protected boolean isSequence(final double start, final double mid, final double end) {
		return (start < mid) && (mid < end);
	}

	protected void verifyInterval(final double lower, final double upper) {
		if (lower >= upper)
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]", lower, upper);
		
	}

	protected void verifySequence(final double lower, final double initial, final double upper) {
		if (!(isSequence(lower, initial, upper))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}", lower, initial, upper);
		}
	}

	protected void verifyBracketing(final double lower, final double upper, final org.apache.commons.math.analysis.UnivariateRealFunction function) throws org.apache.commons.math.FunctionEvaluationException {
		verifyInterval(lower, upper);
		if (!(isBracketing(lower, upper, function))) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(("function values at endpoints do not have different signs.  " + "Endpoints: [{0}, {1}], Values: [{2}, {3}]"), lower, upper, function.value(lower), function.value(upper));
		}
	}
}
2019-04-12 18:59:58,999 INFO main - -Found Solution, child variant #762
2019-04-12 18:59:59,076 INFO main - Time Repair Loop (s): 90.437
2019-04-12 18:59:59,076 INFO main - 
----SUMMARY_EXECUTION---
2019-04-12 18:59:59,076 INFO main - 
Solution details
2019-04-12 18:59:59,077 INFO main - 
 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 762
 
time(sec)= 90
operation: ReplaceOp
location= org.apache.commons.math.analysis.solvers.BrentSolver
line= 138
lineSuspiciousness= 1
original statement= return solve(f, min, yMin, max, yMax, initial, yInitial)
fixed statement= return solve(f, initial, max)
generation= 190
ingredientScope= PACKAGE
validation=|true|0|2140|[]|
2019-04-12 18:59:59,077 INFO main - 
successful_ing_attempts (1): [1]
2019-04-12 18:59:59,077 INFO main - 
failing_ing_attempts (569): [12, 1, 4, 13, 9, 4, 1, 6, 0, 0, 11, 2, 1, 0, 1, 4, 0, 2, 0, 4, 4, 0, 2, 0, 1, 0, 0, 8, 0, 5, 2, 1, 6, 0, 1, 0, 2, 8, 0, 0, 2, 0, 3, 2, 0, 3, 0, 2, 1, 0, 4, 3, 7, 3, 0, 4, 3, 0, 2, 5, 3, 1, 1, 8, 1, 0, 1, 2, 6, 5, 3, 4, 1, 5, 2, 0, 0, 8, 2, 8, 3, 1, 0, 4, 1, 4, 1, 0, 1, 5, 0, 3, 0, 4, 2, 0, 0, 2, 3, 8, 3, 3, 2, 4, 6, 0, 3, 4, 0, 0, 1, 1, 2, 14, 3, 5, 2, 4, 0, 4, 2, 2, 0, 1, 1, 7, 0, 4, 5, 2, 4, 1, 1, 0, 1, 3, 4, 1, 7, 0, 0, 2, 0, 0, 2, 0, 0, 3, 2, 7, 1, 1, 0, 5, 0, 1, 1, 0, 4, 1, 4, 0, 1, 9, 1, 4, 1, 0, 9, 3, 0, 1, 4, 0, 2, 5, 1, 3, 3, 0, 2, 6, 2, 5, 2, 3, 0, 0, 0, 2, 8, 3, 0, 1, 5, 0, 4, 0, 2, 1, 6, 4, 0, 0, 0, 5, 1, 4, 0, 1, 5, 0, 3, 3, 0, 1, 10, 1, 0, 0, 0, 1, 0, 0, 0, 2, 2, 2, 7, 0, 0, 1, 1, 0, 3, 3, 0, 8, 0, 1, 7, 8, 10, 0, 0, 8, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 2, 7, 3, 4, 3, 10, 0, 5, 0, 2, 1, 0, 1, 1, 1, 0, 2, 1, 2, 2, 2, 7, 2, 13, 2, 3, 0, 3, 0, 3, 1, 0, 0, 4, 1, 6, 0, 2, 3, 23, 2, 3, 8, 3, 0, 2, 5, 0, 0, 9, 0, 20, 7, 1, 2, 10, 1, 1, 1, 4, 4, 2, 3, 1, 0, 1, 1, 2, 9, 5, 1, 1, 1, 1, 0, 0, 0, 2, 9, 2, 6, 0, 0, 3, 6, 1, 1, 1, 7, 3, 1, 1, 2, 5, 6, 1, 1, 0, 1, 5, 1, 0, 16, 0, 5, 1, 4, 1, 1, 0, 1, 16, 6, 9, 4, 2, 0, 3, 1, 1, 6, 2, 8, 0, 1, 2, 0, 9, 1, 0, 4, 0, 5, 4, 0, 3, 5, 7, 6, 13, 1, 1, 3, 0, 2, 2, 15, 0, 6, 10, 5, 4, 2, 3, 3, 0, 2, 3, 1, 2, 1, 2, 0, 2, 1, 0, 1, 1, 0, 0, 1, 0, 1, 2, 9, 1, 1, 0, 0, 1, 1, 3, 0, 2, 2, 7, 2, 3, 0, 0, 4, 6, 2, 3, 0, 0, 1, 4, 4, 0, 0, 0, 13, 0, 5, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 4, 2, 7, 0, 6, 2, 0, 1, 3, 1, 3, 1, 4, 2, 4, 4, 1, 3, 0, 0, 4, 1, 0, 1, 6, 0, 1, 1, 7, 8, 0, 1, 0, 16, 7, 3, 2, 4, 3, 1, 1, 4, 5, 1, 3, 4, 0, 1, 5, 4, 1, 4, 0, 12, 4, 1, 1, 0, 0, 2, 2, 0, 0, 1, 0, 2, 5, 1, 2, 0, 0, 0, 0, 3, 14, 5, 2, 1, 0, 4, 6, 0, 6, 6, 1, 0, 0, 0, 1, 1, 0, 3, 3, 0, 0, 3, 1, 1]
2019-04-12 18:59:59,077 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 124.703
[DONE]
