2019-04-12 10:01:29,393 INFO main - command line arguments: [-jvm4testexecution  /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin  -mode  jgenprog  -scope  global  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -location  defect4j_tests/math_85/  -dependencies  ./examples/libs/junit-4.4.jar  -flthreshold  0.5  -maxtime  100  -stopfirst  true]
2019-04-12 10:01:31,700 INFO main - -Executing Gzoltar classpath: /home/jan_gerling/astor/./outputMutation/AstorMain-math_85//bin//default from 214 classes with test cases
2019-04-12 10:01:31,701 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar fault localization: min susp value parameter: 0.5
2019-04-12 10:01:33,152 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - -gz-Adding classpath: [/home/jan_gerling/astor/./examples/libs/junit-4.4.jar, /home/jan_gerling/astor/./outputMutation/AstorMain-math_85//bin//default]
2019-04-12 10:01:53,072 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Test failt: org.apache.commons.math.distribution.NormalDistributionTest#testMath280
2019-04-12 10:01:53,078 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar Test Result Total:1983, fails: 1, GZoltar suspicious 16489
2019-04-12 10:01:53,114 INFO fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization - Gzoltar found: 24 with susp > 0.5, we consider: 24
2019-04-12 10:01:53,137 INFO main - building model: /home/jan_gerling/astor/./outputMutation/AstorMain-math_85//src//default, compliance level: 8
2019-04-12 10:02:08,328 INFO main - 
---- Initial suspicious size: 24
2019-04-12 10:02:08,412 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=203, susp=1.0]
2019-04-12 10:02:08,415 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=204, susp=1.0]
2019-04-12 10:02:08,457 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.distribution.NormalDistributionImpl, methodName=org.apache.commons.math.distribution.NormalDistributionImpl{cumulativeProbability(D)D 0.0, lineNumber=128, susp=0.7071067811865475]
2019-04-12 10:02:08,585 INFO main - Total suspicious from FL: 24,  21
2019-04-12 10:02:08,586 INFO main - Total ModPoint created: 21
2019-04-12 10:02:08,586 INFO main - Creating program variant #1, [Variant id: 1, #gens: 21, #ops: 0, parent:-]
2019-04-12 10:02:08,612 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=203, susp=1.0]
2019-04-12 10:02:08,614 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=204, susp=1.0]
2019-04-12 10:02:08,649 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.distribution.NormalDistributionImpl, methodName=org.apache.commons.math.distribution.NormalDistributionImpl{cumulativeProbability(D)D 0.0, lineNumber=128, susp=0.7071067811865475]
2019-04-12 10:02:08,751 INFO main - Total suspicious from FL: 24,  21
2019-04-12 10:02:08,751 INFO main - Total ModPoint created: 21
2019-04-12 10:02:08,751 INFO main - Creating program variant #2, [Variant id: 2, #gens: 21, #ops: 0, parent:-]
2019-04-12 10:02:08,785 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=203, susp=1.0]
2019-04-12 10:02:08,787 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, methodName=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils{bracket(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DDDI)[D 0.0, lineNumber=204, susp=1.0]
2019-04-12 10:02:08,805 INFO main - -any mod point created for suspicious Candidate [className=org.apache.commons.math.distribution.NormalDistributionImpl, methodName=org.apache.commons.math.distribution.NormalDistributionImpl{cumulativeProbability(D)D 0.0, lineNumber=128, susp=0.7071067811865475]
2019-04-12 10:02:08,861 INFO main - Total suspicious from FL: 24,  21
2019-04-12 10:02:08,861 INFO main - Total ModPoint created: 21
2019-04-12 10:02:08,861 INFO main - Creating program variant #3, [Variant id: 3, #gens: 21, #ops: 0, parent:-]
2019-04-12 10:05:12,604 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 10:05:12,605 INFO fr.inria.astor.core.setup.ConfigurationProperties - ---Configuration properties:---Execution values
2019-04-12 10:05:12,605 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:faultlocalization= fr.inria.astor.core.faultlocalization.GZoltarFaultLocalization
2019-04-12 10:05:12,605 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:packageToInstrument= 
2019-04-12 10:05:12,605 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:flthreshold= 0.5
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:numberExecutions= 1
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuiteresultfolder= evosuite
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoredTestCases= 
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:skipfaultlocalization= false
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxGeneration= 200
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxsuspcandidates= 1000
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax2= 960000
2019-04-12 10:05:12,606 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:tmax1= 120000
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:workingDirectory= /home/jan_gerling/astor/./outputMutation
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mode= jgenprog
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:ignoreflakyinfl= false
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:uniqueoptogen= false
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pathToMVNRepository= 
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:timezone= America/Los_Angeles
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:applyCrossover= false
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clonegranularity= types
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:modificationpointnavigation= weight
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:clusteringfilename= clustering.csv
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:maxtime= 100
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:probagenmutation= false
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:alternativecompliancelevel= 4
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:version-location= ./math-version/
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:location= defect4j_tests/math_85/
2019-04-12 10:05:12,607 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:filterfaultlocalization= true
2019-04-12 10:05:12,608 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:stopfirst= true
2019-04-12 10:05:12,608 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4testexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 10:05:12,608 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bugId= 280
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:mutationrate= 1 
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:forceExecuteRegression= false
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:projectIdentifier= 
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_buggy_class= true
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoRunOnBuggyClass= true
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resetoperations= false
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.8.0-openjdk-amd64/bin
2019-04-12 10:05:12,614 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:seed= 0
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:testbystep= false
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srctestfolder= /src/test/
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:javacompliancelevel= 8
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:bintestfolder= /target/test-classes/
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:fitnessfunction= fr.inria.astor.core.loop.population.TestCaseFitnessFunction
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:commandTrunk= 50000
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:dependenciespath= ./examples/libs/junit-4.4.jar
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:multipointmodification= false
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:transformingredient= false
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:validation= process
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:scope= global
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitetimeout= 120
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evoDSE= false
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:elementsToMutate= 10
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:allpoints= false
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:resourcesfolder= /src/main/resources:/src/test/resources:
2019-04-12 10:05:12,615 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:regressionforfaultlocalization= true
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:population= 3
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:saveall= false
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:pvariantfoldername= variant-
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:populationcontroller= fr.inria.astor.core.loop.population.TestCaseBasedFitnessPopulationController
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:savesolution= true
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:srcjavafolder= /src/java/
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evo_affected_by_op= true
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:binjavafolder= /target/classes/
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:reintroduce= original-parents
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - p:learningdir= 
2019-04-12 10:05:12,616 INFO fr.inria.astor.core.setup.ConfigurationProperties - ----------------------------
2019-04-12 10:05:12,616 INFO main - 
----Starting Solution Search
2019-04-12 10:05:15,984 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:15,985 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else {
			ret = getMean();
		}
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:15,991 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:17,235 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:17,235 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else {
			ret = getMean();
		}
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:17,236 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:24,390 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:24,390 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:24,391 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:24,551 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:24,552 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:24,552 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:24,706 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:24,706 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else {
			ret = java.lang.Double.MAX_VALUE;
		}
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:24,707 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:33,997 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:33,997 ERROR main - Undo Error: original: 
public class UnivariateRealSolverUtils {
	private UnivariateRealSolverUtils() {
		super();
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver();
		solver.setAbsoluteAccuracy(absoluteAccuracy);
		return solver.solve(f, x0, x1);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		if (function == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
		if (maximumIterations <= 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
		}
		if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
		}
		double a = initial;
		double b = initial;
		double fa;
		double fb;
		int numIterations = 0;
		do {
			a = java.lang.Math.max((a - 1.0), lowerBound);
			b = java.lang.Math.min((b + 1.0), upperBound);
			fa = function.value(a);
			fb = function.value(b);
			numIterations++;
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound)) );
		if ((fa * fb) >= 0.0) {
			throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
		}
		return new double[]{ a , b };
	}

	public static double midpoint(double a, double b) {
		return (a + b) * 0.5;
	}

	private static void setup(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
	}

	private static class LazyHolder {
		private static final org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory FACTORY = org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance();
	}
}
2019-04-12 10:05:33,999 ERROR main - Undo Error: modified: 
public class UnivariateRealSolverUtils {
	private UnivariateRealSolverUtils() {
		super();
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver();
		solver.setAbsoluteAccuracy(absoluteAccuracy);
		return solver.solve(f, x0, x1);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		if (function == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
		if (maximumIterations <= 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
		}
		if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
		}
		double a = initial;
		double b = initial;
		double fa;
		double fb;
		int numIterations = 0;
		do {
			a = java.lang.Math.max((a - 1.0), lowerBound);
			b = java.lang.Math.min((b + 1.0), upperBound);
			fa = function.value(a);
			fb = function.value(b);
			numIterations++;
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound)) );
		if ((fa * fb) >= 0.0)
			throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
		
		return new double[]{ a , b };
	}

	public static double midpoint(double a, double b) {
		return (a + b) * 0.5;
	}

	private static void setup(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
	}

	private static class LazyHolder {
		private static final org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory FACTORY = org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance();
	}
}
2019-04-12 10:05:37,155 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:37,156 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:37,156 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:38,731 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:38,731 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) {
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		}
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:38,732 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:05:38,890 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:38,891 ERROR main - Undo Error: original: 
public class Gamma {
	public static final double GAMMA = 0.5772156649015329;

	private static final double DEFAULT_EPSILON = 1.0E-14;

	private static final double[] lanczos = new double[]{ 0.9999999999999971 , 57.15623566586292 , -59.59796035547549 , 14.136097974741746 , -0.4919138160976202 , 3.399464998481189E-5 , 4.652362892704858E-5 , -9.837447530487956E-5 , 1.580887032249125E-4 , -2.1026444172410488E-4 , 2.1743961811521265E-4 , -1.643181065367639E-4 , 8.441822398385275E-5 , -2.6190838401581408E-5 , 3.6899182659531625E-6 };

	private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

	private Gamma() {
		super();
	}

	public static double logGamma(double x) {
		double ret;
		if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
			ret = java.lang.Double.NaN;
		}else {
			double g = 607.0 / 128.0;
			double sum = 0.0;
			for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
				sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
			}
			sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
			double tmp = (x + g) + 0.5;
			ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
		}
		return ret;
	}

	public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 0.0;
			}else
				if ((a >= 1.0) && (x > a)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
				}else {
					double n = 0.0;
					double an = 1.0 / a;
					double sum = an;
					while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
						n = n + 1.0;
						an = an * (x / (a + n));
						sum = sum + an;
					} 
					if (n >= maxIterations) {
						throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
					}else {
						ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
					}
				}
			
		
		return ret;
	}

	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 1.0;
			}else
				if ((x < a) || (a < 1.0)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
				}else {
					org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
						@java.lang.Override
						protected double getA(int n, double x) {
							return (((2.0 * n) + 1.0) - a) + x;
						}

						@java.lang.Override
						protected double getB(int n, double x) {
							return n * (a - n);
						}
					};
					ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
					ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
				}
			
		
		return ret;
	}

	private static final double C_LIMIT = 49;

	private static final double S_LIMIT = 1.0E-5;

	public static double digamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((java.lang.Math.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
		}
		return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
	}

	public static double trigamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return 1 / (x * x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
		}
		return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
	}
}
2019-04-12 10:05:38,895 ERROR main - Undo Error: modified: 
public class Gamma {
	public static final double GAMMA = 0.5772156649015329;

	private static final double DEFAULT_EPSILON = 1.0E-14;

	private static final double[] lanczos = new double[]{ 0.9999999999999971 , 57.15623566586292 , -59.59796035547549 , 14.136097974741746 , -0.4919138160976202 , 3.399464998481189E-5 , 4.652362892704858E-5 , -9.837447530487956E-5 , 1.580887032249125E-4 , -2.1026444172410488E-4 , 2.1743961811521265E-4 , -1.643181065367639E-4 , 8.441822398385275E-5 , -2.6190838401581408E-5 , 3.6899182659531625E-6 };

	private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

	private Gamma() {
		super();
	}

	public static double logGamma(double x) {
		double ret;
		if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
			ret = java.lang.Double.NaN;
		}else {
			double g = 607.0 / 128.0;
			double sum = 0.0;
			for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
				sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
			}
			sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
			double tmp = (x + g) + 0.5;
			ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
		}
		return ret;
	}

	public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 0.0;
			}else
				if ((a >= 1.0) && (x > a)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
				}else {
					double n = 0.0;
					double an = 1.0 / a;
					double sum = an;
					while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
						n = n + 1.0;
						an = an * (x / (a + n));
						sum = sum + an;
					} 
					if (n >= maxIterations)
						throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
					else {
						ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
					}
				}
			
		
		return ret;
	}

	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 1.0;
			}else
				if ((x < a) || (a < 1.0)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
				}else {
					org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
						@java.lang.Override
						protected double getA(int n, double x) {
							return (((2.0 * n) + 1.0) - a) + x;
						}

						@java.lang.Override
						protected double getB(int n, double x) {
							return n * (a - n);
						}
					};
					ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
					ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
				}
			
		
		return ret;
	}

	private static final double C_LIMIT = 49;

	private static final double S_LIMIT = 1.0E-5;

	public static double digamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((java.lang.Math.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
		}
		return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
	}

	public static double trigamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return 1 / (x * x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
		}
		return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
	}
}
2019-04-12 10:05:40,037 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:05:40,037 ERROR main - Undo Error: original: 
public class UnivariateRealSolverUtils {
	private UnivariateRealSolverUtils() {
		super();
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver();
		solver.setAbsoluteAccuracy(absoluteAccuracy);
		return solver.solve(f, x0, x1);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		if (function == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
		if (maximumIterations <= 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
		}
		if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
		}
		double a = initial;
		double b = initial;
		double fa;
		double fb;
		int numIterations = 0;
		do {
			a = java.lang.Math.max((a - 1.0), lowerBound);
			b = java.lang.Math.min((b + 1.0), upperBound);
			fa = function.value(a);
			fb = function.value(b);
			numIterations++;
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound)) );
		if ((fa * fb) >= 0.0) {
			throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
		}
		return new double[]{ a , b };
	}

	public static double midpoint(double a, double b) {
		return (a + b) * 0.5;
	}

	private static void setup(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
	}

	private static class LazyHolder {
		private static final org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory FACTORY = org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance();
	}
}
2019-04-12 10:05:40,039 ERROR main - Undo Error: modified: 
public class UnivariateRealSolverUtils {
	private UnivariateRealSolverUtils() {
		super();
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
	}

	public static double solve(org.apache.commons.math.analysis.UnivariateRealFunction f, double x0, double x1, double absoluteAccuracy) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.setup(f);
		org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY.newDefaultSolver();
		solver.setAbsoluteAccuracy(absoluteAccuracy);
		return solver.solve(f, x0, x1);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE);
	}

	public static double[] bracket(org.apache.commons.math.analysis.UnivariateRealFunction function, double initial, double lowerBound, double upperBound, int maximumIterations) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException {
		if (function == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
		if (maximumIterations <= 0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);
		}
		if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}", lowerBound, initial, upperBound);
		}
		double a = initial;
		double b = initial;
		double fa;
		double fb;
		int numIterations = 0;
		do {
			a = java.lang.Math.max((a - 1.0), lowerBound);
			b = java.lang.Math.min((b + 1.0), upperBound);
			fa = function.value(a);
			fb = function.value(b);
			numIterations++;
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound)) );
		if ((fa * fb) >= 0.0)
			throw new org.apache.commons.math.ConvergenceException(("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}")), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
		
		return new double[]{ a , b };
	}

	public static double midpoint(double a, double b) {
		return (a + b) * 0.5;
	}

	private static void setup(org.apache.commons.math.analysis.UnivariateRealFunction f) {
		if (f == null) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("function is null");
		}
	}

	private static class LazyHolder {
		private static final org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory FACTORY = org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory.newInstance();
	}
}
2019-04-12 10:06:10,508 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:06:10,508 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:06:10,509 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5)
				ret = (getMean()) + (getStandardDeviation());
			else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:06:17,166 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:06:17,166 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation)))) {
					return 1.0;
				}else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5)
				ret = (getMean()) + (getStandardDeviation());
			else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:06:17,180 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5)
				ret = (getMean()) + (getStandardDeviation());
			else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:06:19,146 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:06:19,160 ERROR main - Undo Error: original: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5) {
				ret = (getMean()) + (getStandardDeviation());
			}else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:06:19,161 ERROR main - Undo Error: modified: 
public class NormalDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements java.io.Serializable , org.apache.commons.math.distribution.NormalDistribution {
	private static final long serialVersionUID = 8589540077390120676L;

	private static final double SQRT2PI = java.lang.Math.sqrt((2 * (java.lang.Math.PI)));

	private double mean = 0;

	private double standardDeviation = 1;

	public NormalDistributionImpl(double mean, double sd) {
		super();
		setMean(mean);
		setStandardDeviation(sd);
	}

	public NormalDistributionImpl() {
		this(0.0, 1.0);
	}

	public double getMean() {
		return mean;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	public double getStandardDeviation() {
		return standardDeviation;
	}

	public void setStandardDeviation(double sd) {
		if (sd <= 0.0) {
			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})", sd);
		}
		standardDeviation = sd;
	}

	public double density(java.lang.Double x) {
		double x0 = x - (getMean());
		return (java.lang.Math.exp((((-x0) * x0) / ((2 * (getStandardDeviation())) * (getStandardDeviation()))))) / ((getStandardDeviation()) * (org.apache.commons.math.distribution.NormalDistributionImpl.SQRT2PI));
	}

	public double cumulativeProbability(double x) throws org.apache.commons.math.MathException {
		try {
			return 0.5 * (1.0 + (org.apache.commons.math.special.Erf.erf(((x - (mean)) / ((standardDeviation) * (java.lang.Math.sqrt(2.0)))))));
		} catch (org.apache.commons.math.MaxIterationsExceededException ex) 
			if (x < ((mean) - (20 * (standardDeviation)))) {
				return 0.0;
			}else
				if (x > ((mean) + (20 * (standardDeviation))))
					return 1.0;
				else {
					throw ex;
				}
			
		
	}

	@java.lang.Override
	public double inverseCumulativeProbability(final double p) throws org.apache.commons.math.MathException {
		if (p == 0) {
			return java.lang.Double.NEGATIVE_INFINITY;
		}
		if (p == 1) {
			return java.lang.Double.POSITIVE_INFINITY;
		}
		return super.inverseCumulativeProbability(p);
	}

	@java.lang.Override
	protected double getDomainLowerBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = -(java.lang.Double.MAX_VALUE);
		}else
			ret = getMean();
		
		return ret;
	}

	@java.lang.Override
	protected double getDomainUpperBound(double p) {
		double ret;
		if (p < 0.5) {
			ret = getMean();
		}else
			ret = java.lang.Double.MAX_VALUE;
		
		return ret;
	}

	@java.lang.Override
	protected double getInitialDomain(double p) {
		double ret;
		if (p < 0.5) {
			ret = (getMean()) - (getStandardDeviation());
		}else
			if (p > 0.5)
				ret = (getMean()) + (getStandardDeviation());
			else {
				ret = getMean();
			}
		
		return ret;
	}
}
2019-04-12 10:08:48,007 ERROR main - Error: the model was not the same from the original after this generation
2019-04-12 10:08:48,007 ERROR main - Undo Error: original: 
public class Gamma {
	public static final double GAMMA = 0.5772156649015329;

	private static final double DEFAULT_EPSILON = 1.0E-14;

	private static final double[] lanczos = new double[]{ 0.9999999999999971 , 57.15623566586292 , -59.59796035547549 , 14.136097974741746 , -0.4919138160976202 , 3.399464998481189E-5 , 4.652362892704858E-5 , -9.837447530487956E-5 , 1.580887032249125E-4 , -2.1026444172410488E-4 , 2.1743961811521265E-4 , -1.643181065367639E-4 , 8.441822398385275E-5 , -2.6190838401581408E-5 , 3.6899182659531625E-6 };

	private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

	private Gamma() {
		super();
	}

	public static double logGamma(double x) {
		double ret;
		if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
			ret = java.lang.Double.NaN;
		}else {
			double g = 607.0 / 128.0;
			double sum = 0.0;
			for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
				sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
			}
			sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
			double tmp = (x + g) + 0.5;
			ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
		}
		return ret;
	}

	public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 0.0;
			}else
				if ((a >= 1.0) && (x > a)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
				}else {
					double n = 0.0;
					double an = 1.0 / a;
					double sum = an;
					while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
						n = n + 1.0;
						an = an * (x / (a + n));
						sum = sum + an;
					} 
					if (n >= maxIterations) {
						throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
					}else {
						ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
					}
				}
			
		
		return ret;
	}

	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 1.0;
			}else
				if ((x < a) || (a < 1.0)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
				}else {
					org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
						@java.lang.Override
						protected double getA(int n, double x) {
							return (((2.0 * n) + 1.0) - a) + x;
						}

						@java.lang.Override
						protected double getB(int n, double x) {
							return n * (a - n);
						}
					};
					ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
					ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
				}
			
		
		return ret;
	}

	private static final double C_LIMIT = 49;

	private static final double S_LIMIT = 1.0E-5;

	public static double digamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((java.lang.Math.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
		}
		return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
	}

	public static double trigamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return 1 / (x * x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
		}
		return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
	}
}
2019-04-12 10:08:48,008 ERROR main - Undo Error: modified: 
public class Gamma {
	public static final double GAMMA = 0.5772156649015329;

	private static final double DEFAULT_EPSILON = 1.0E-14;

	private static final double[] lanczos = new double[]{ 0.9999999999999971 , 57.15623566586292 , -59.59796035547549 , 14.136097974741746 , -0.4919138160976202 , 3.399464998481189E-5 , 4.652362892704858E-5 , -9.837447530487956E-5 , 1.580887032249125E-4 , -2.1026444172410488E-4 , 2.1743961811521265E-4 , -1.643181065367639E-4 , 8.441822398385275E-5 , -2.6190838401581408E-5 , 3.6899182659531625E-6 };

	private static final double HALF_LOG_2_PI = 0.5 * (java.lang.Math.log((2.0 * (java.lang.Math.PI))));

	private Gamma() {
		super();
	}

	public static double logGamma(double x) {
		double ret;
		if ((java.lang.Double.isNaN(x)) || (x <= 0.0)) {
			ret = java.lang.Double.NaN;
		}else {
			double g = 607.0 / 128.0;
			double sum = 0.0;
			for (int i = (org.apache.commons.math.special.Gamma.lanczos.length) - 1; i > 0; --i) {
				sum = sum + ((org.apache.commons.math.special.Gamma.lanczos[i]) / (x + i));
			}
			sum = sum + (org.apache.commons.math.special.Gamma.lanczos[0]);
			double tmp = (x + g) + 0.5;
			ret = ((((x + 0.5) * (java.lang.Math.log(tmp))) - tmp) + (org.apache.commons.math.special.Gamma.HALF_LOG_2_PI)) + (java.lang.Math.log((sum / x)));
		}
		return ret;
	}

	public static double regularizedGammaP(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 0.0;
			}else
				if ((a >= 1.0) && (x > a)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, epsilon, maxIterations));
				}else {
					double n = 0.0;
					double an = 1.0 / a;
					double sum = an;
					while (((java.lang.Math.abs(an)) > epsilon) && (n < maxIterations)) {
						n = n + 1.0;
						an = an * (x / (a + n));
						sum = sum + an;
					} 
					if (n >= maxIterations)
						throw new org.apache.commons.math.MaxIterationsExceededException(maxIterations);
					else {
						ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * sum;
					}
				}
			
		
		return ret;
	}

	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);
	}

	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException {
		double ret;
		if ((((java.lang.Double.isNaN(a)) || (java.lang.Double.isNaN(x))) || (a <= 0.0)) || (x < 0.0)) {
			ret = java.lang.Double.NaN;
		}else
			if (x == 0.0) {
				ret = 1.0;
			}else
				if ((x < a) || (a < 1.0)) {
					ret = 1.0 - (org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations));
				}else {
					org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() {
						@java.lang.Override
						protected double getA(int n, double x) {
							return (((2.0 * n) + 1.0) - a) + x;
						}

						@java.lang.Override
						protected double getB(int n, double x) {
							return n * (a - n);
						}
					};
					ret = 1.0 / (cf.evaluate(x, epsilon, maxIterations));
					ret = (java.lang.Math.exp((((-x) + (a * (java.lang.Math.log(x)))) - (org.apache.commons.math.special.Gamma.logGamma(a))))) * ret;
				}
			
		
		return ret;
	}

	private static final double C_LIMIT = 49;

	private static final double S_LIMIT = 1.0E-5;

	public static double digamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return (-(org.apache.commons.math.special.Gamma.GAMMA)) - (1 / x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((java.lang.Math.log(x)) - (0.5 / x)) - (inv * ((1.0 / 12) + (inv * ((1.0 / 120) - (inv / 252)))));
		}
		return (org.apache.commons.math.special.Gamma.digamma((x + 1))) - (1 / x);
	}

	public static double trigamma(double x) {
		if ((x > 0) && (x <= (org.apache.commons.math.special.Gamma.S_LIMIT))) {
			return 1 / (x * x);
		}
		if (x >= (org.apache.commons.math.special.Gamma.C_LIMIT)) {
			double inv = 1 / (x * x);
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));
		}
		return (org.apache.commons.math.special.Gamma.trigamma((x + 1))) + (1 / (x * x));
	}
}
2019-04-12 10:10:03,041 INFO main - Time Repair Loop (s): 290.425
2019-04-12 10:10:03,041 INFO main - 
----SUMMARY_EXECUTION---
2019-04-12 10:10:03,041 INFO main - 
successful_ing_attempts (0): []
2019-04-12 10:10:03,042 INFO main - 
failing_ing_attempts (600): [9, 12, 0, 4, 0, 1, 0, 13, 10, 115, 14, 4, 0, 0, 4, 0, 0, 6, 8, 14, 80, 4, 1, 0, 6, 15, 7, 2, 2, 8, 0, 6, 6, 5, 0, 1, 0, 3, 4, 0, 0, 3, 2, 3, 19, 9, 3, 0, 54, 0, 4, 1, 2, 6, 2, 29, 0, 7, 25, 0, 11, 0, 0, 13, 21, 0, 0, 0, 1, 2, 5, 3, 23, 0, 24, 18, 0, 0, 6, 2, 4, 288, 36, 1, 0, 220, 19, 0, 3, 0, 1, 10, 0, 12, 5, 36, 6, 18, 9, 87, 3, 0, 17, 1, 2, 9, 0, 4, 3, 3, 2, 1, 3, 0, 0, 1, 0, 0, 2, 0, 0, 29, 61, 16, 1, 2, 0, 0, 2, 0, 1, 5, 2, 0, 1, 0, 26, 0, 11, 340, 16, 29, 19, 1, 1, 20, 149, 14, 0, 5, 57, 2, 12, 40, 20, 4, 2, 0, 2, 0, 9, 39, 6, 0, 0, 0, 1, 8, 11, 24, 13, 0, 18, 4, 18, 7, 19, 42, 5, 20, 9, 34, 14, 86, 0, 3, 6, 1, 153, 17, 2, 13, 13, 0, 19, 11, 0, 44, 0, 2, 1, 8, 47, 11, 0, 23, 7, 13, 4, 42, 18, 0, 15, 14, 0, 0, 3, 1, 0, 6, 0, 8, 8, 14, 0, 29, 0, 6, 7, 0, 7, 5, 30, 19, 2, 15, 144, 7, 0, 23, 30, 42, 6, 0, 20, 1, 0, 0, 0, 4, 9, 25, 38, 17, 2, 4, 0, 0, 16, 78, 10, 0, 2, 1, 27, 22, 8, 10, 2, 0, 25, 0, 0, 12, 7, 0, 9, 0, 144, 7, 68, 9, 0, 0, 7, 18, 7, 0, 3, 0, 5, 8, 1, 3, 7, 0, 4, 7, 18, 30, 1, 3, 4, 134, 1, 0, 0, 1, 3, 0, 7, 14, 6, 64, 0, 17, 2, 0, 21, 7, 36, 10, 1, 2, 0, 23, 0, 0, 0, 18, 48, 0, 1, 20, 0, 2, 6, 1, 6, 94, 11, 42, 11, 0, 0, 16, 1, 8, 0, 20, 17, 16, 0, 0, 9, 68, 40, 2, 12, 16, 0, 27, 0, 2, 2, 12, 0, 0, 22, 0, 1, 7, 0, 0, 5, 16, 2, 0, 46, 4, 3, 7, 1, 0, 0, 12, 2, 0, 2, 4, 6, 108, 1, 7, 0, 46, 0, 6, 7, 168, 0, 0, 0, 5, 8, 9, 8, 0, 47, 5, 165, 4, 0, 2, 2, 1, 5, 0, 1, 25, 12, 1, 9, 1, 2, 0, 20, 0, 3, 62, 2, 0, 43, 16, 7, 0, 20, 3, 5, 0, 2, 24, 0, 34, 7, 7, 14, 0, 14, 0, 2, 1, 44, 11, 60, 36, 23, 10, 136, 12, 1, 22, 1, 4, 23, 9, 67, 17, 19, 1, 24, 7, 25, 5, 26, 0, 5, 15, 1, 29, 0, 8, 0, 3, 17, 10, 1, 42, 1, 1, 0, 6, 10, 0, 1, 0, 45, 5, 3, 37, 6, 15, 0, 161, 9, 1, 0, 3, 1, 0, 5, 9, 0, 1, 4, 10, 8, 26, 0, 0, 19, 7, 6, 2, 0, 1, 46, 0, 11, 1, 0, 15, 25, 5, 17, 9, 12, 0, 4, 6, 0, 2, 0, 26, 10, 6, 16, 9, 14, 7, 7, 2, 6, 4, 14, 3, 6, 12, 2, 0, 0, 1, 1, 64, 3, 2, 73, 187, 0, 32, 22, 3, 0, 36, 8, 14, 2, 0, 0, 0, 16, 8, 1, 0, 15, 0, 2, 3, 14, 26, 3, 3, 3, 15, 3, 8, 17, 15, 2, 13]
2019-04-12 10:10:03,042 INFO fr.inria.main.evolution.AstorMain - Time Total(s): 513.632
[DONE]
